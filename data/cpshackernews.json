[{"by": "sedachv", "score": null, "time": 1294975646, "timestamp": 1294975646000, "title": "", "type": "comment", "url": "", "text": "Then there's jwacs (<a href=\"http://chumsley.org/jwacs/\" rel=\"nofollow\">http://chumsley.org/jwacs/</a>), which does CPS conversion on JavaScript without inventing weird new terms or requiring runtime libraries.", "parent": 2101469.0, "deleted": null, "dead": null, "descendants": null, "id": 2102419, "ranking": null, "date": 1294975646000, "year": 2011}, {"by": "swannodette", "score": null, "time": 1295031377, "timestamp": 1295031377000, "title": "", "type": "comment", "url": "", "text": "You can get most of the real benefits of TCO (including many mutually recursive functions) in Clojure with lazy-sequences. The harder (and less frequest) use case of TCO'ing CPS style code can be accomplished with trampoline.", "parent": 2104886.0, "deleted": null, "dead": null, "descendants": null, "id": 2104909, "ranking": null, "date": 1295031377000, "year": 2011}, {"by": "sedachv", "score": null, "time": 1295477835, "timestamp": 1295477835000, "title": "", "type": "comment", "url": "", "text": "Or I don't know, use continuations in a place that's actually appropriate? John Fremlin showed that even with horrible CPS rewriting and epoll you can get way better throughput in SBCL (TPD2) than nginx. MzScheme comes with native continuations. It's not hard to call out to epoll.<p>Instead everyone in the Lisp community (pg included) is still enamored with using continuations to produce ugly URLs and unmaintainable web applications.", "parent": 2121495.0, "deleted": null, "dead": null, "descendants": null, "id": 2121644, "ranking": null, "date": 1295477835000, "year": 2011}, {"by": "gchpaco", "score": null, "time": 1295485766, "timestamp": 1295485766000, "title": "", "type": "comment", "url": "", "text": "MzScheme/Racket's continuations are of the \"copy the C stack\" variety, or were last time I checked.  They are in no way efficient; it would probably be better to CPS transform your own code than try to use MzScheme/Racket's continuations directly in performance sensitive code.", "parent": 2121644.0, "deleted": null, "dead": null, "descendants": null, "id": 2122083, "ranking": null, "date": 1295485766000, "year": 2011}, {"by": "Zef", "score": 4.0, "time": 1296463779, "timestamp": 1296463779000, "title": "Mobl - language to develop mobile web apps: reactive programming, CPS transform", "type": "story", "url": "http://www.mobl-lang.org/", "text": "", "parent": null, "deleted": null, "dead": null, "descendants": 0.0, "id": 2160770, "ranking": null, "date": 1296463779000, "year": 2011}, {"by": "prawn", "score": null, "time": 1296474718, "timestamp": 1296474718000, "title": "", "type": "comment", "url": "", "text": "AFAIK, CBA and Community CPS both do it.", "parent": 2161017.0, "deleted": null, "dead": null, "descendants": null, "id": 2161120, "ranking": null, "date": 1296474718000, "year": 2011}, {"by": "fat_tony", "score": null, "time": 1296910961, "timestamp": 1296910961000, "title": "", "type": "comment", "url": "", "text": "Relativism is destroying our society. There are things that are not up for debate. They usually involve facts and science. Inoculation is one of them.<p>I think vaccines should be mandatory for all children. If you don't vaccine your kid, CPS should take the kid away after multiple warnings, because you are an unfit parent and a danger to our community otherwise.", "parent": 2182852.0, "deleted": null, "dead": null, "descendants": null, "id": 2183002, "ranking": null, "date": 1296910961000, "year": 2011}, {"by": "michaeldhopkins", "score": null, "time": 1296927879, "timestamp": 1296927879000, "title": "", "type": "comment", "url": "", "text": "I would never trust you to make decisions for my children. That is essentially what you are proposing, since you do not say \"CPS should decide whether parents may keep their children\" but rather say that CPS should follow your policy.<p>I consider people like you a menace to a free and healthy society.", "parent": 2183002.0, "deleted": null, "dead": null, "descendants": null, "id": 2183499, "ranking": null, "date": 1296927879000, "year": 2011}, {"by": "iamelgringo", "score": null, "time": 1296936102, "timestamp": 1296936102000, "title": "", "type": "comment", "url": "", "text": "<i>I think vaccines should be mandatory for all children. If you don't vaccine your kid, CPS should take the kid away after multiple warnings, because you are an unfit parent and a danger to our community otherwise</i><p>They are in some places, and that is what happens unless you object on moral or religious grounds.  I worked at a pediatric clinic, and on several occasions, we called CPS on parents that did not bring in their children for routine physicals and vaccinations.<p>Also, it's very difficult to get a child into the school system unless the child has been vaccinated.<p>/I moonlight as ER nurse, and I've done contract work at Chicago Children's, University of Chicago Children's, Fresno Children's and a satellite of Boston Children's.", "parent": 2183002.0, "deleted": null, "dead": null, "descendants": null, "id": 2183898, "ranking": null, "date": 1296936102000, "year": 2011}, {"by": "srean", "score": null, "time": 1298046695, "timestamp": 1298046695000, "title": "", "type": "comment", "url": "", "text": "Wish the code was available to take a peek at. Talking about optimizing transformations, the Stalin scheme compiler is quite freakily good at that.It would have been interesting to run this code through Stalin and see what happens.<p>From the author Je rey Mark Siskind's research statement:<p><pre><code>  It uses the results of flow analysis to perform life-time analysis, \n  escape analysis, points-to analysis, and must-alias analysis. ...\n  It also uses the above analysis to support flow-directed region-based\n  storage management, where run-time garbage collection is replaced\n  with static allocation and deallocation on a per-abstract-value\n  and per-program-point basis. It also performs flow-directed\n  lightweight CPS conversion,.. to support extremely efficient \ffirst-class continuations.\n\n</code></pre>\nIt is quite remarkable that even without any type annotations Stalin can hold its own against a hand written C and often beat it as well.<p><a href=\"http://en.wikipedia.org/wiki/Stalin_(Scheme_implementation)\" rel=\"nofollow\">http://en.wikipedia.org/wiki/Stalin_(Scheme_implementation)</a><p>(Has escaped chrismonsantoization)", "parent": 2235281.0, "deleted": null, "dead": null, "descendants": null, "id": 2236046, "ranking": null, "date": 1298046695000, "year": 2011}, {"by": "silentbicycle", "score": null, "time": 1298119389, "timestamp": 1298119389000, "title": "", "type": "comment", "url": "", "text": "Sure but it's mentioned in-thread already, while Orbit explains the CPS and others well.", "parent": 2238933.0, "deleted": null, "dead": null, "descendants": null, "id": 2238940, "ranking": null, "date": 1298119389000, "year": 2011}, {"by": "IsaacSchlueter", "score": null, "time": 1299058072, "timestamp": 1299058072000, "title": "", "type": "comment", "url": "", "text": "<p><pre><code>    npm install fibers\n</code></pre>\nAlso, node's cb-passing stuff is pretty close to the very canonical examples of CPS in Scheme, so I'm not sure what you mean by it not having continuations.", "parent": 2277443.0, "deleted": null, "dead": null, "descendants": null, "id": 2278976, "ranking": null, "date": 1299058072000, "year": 2011}, {"by": "wallfly", "score": null, "time": 1299513509, "timestamp": 1299513509000, "title": "", "type": "comment", "url": "", "text": "The author mentions CPS...<p>There already exists a powerful cross-environment JavaScript CPS implementation called JooseX.CPS:<p><a href=\"https://github.com/SamuraiJack/JooseX-CPS\" rel=\"nofollow\">https://github.com/SamuraiJack/JooseX-CPS</a><p>Tutorials:<p><a href=\"http://joose.it/blog/2011/02/14/joosex-cps-tutorial-part-i/\" rel=\"nofollow\">http://joose.it/blog/2011/02/14/joosex-cps-tutorial-part-i/</a><p><a href=\"http://joose.it/blog/2011/02/22/joosex-cps-tutorial-part-ii/\" rel=\"nofollow\">http://joose.it/blog/2011/02/22/joosex-cps-tutorial-part-ii/</a><p>If you're not familiar with the Joose object system (works great in browsers and node.js), you should give it a look: <a href=\"http://joose.github.com/Joose/doc/html/Joose.html\" rel=\"nofollow\">http://joose.github.com/Joose/doc/html/Joose.html</a><p>Also, CPS is not the only option for dumping callbacks in browsers / node.js. Another would be the Functional Reactive style. See Flapjax: <a href=\"http://www.flapjax-lang.org/\" rel=\"nofollow\">http://www.flapjax-lang.org/</a><p>I'm working on a reimplementation of Flapjax right now: <a href=\"https://github.com/michaelsbradleyjr/Jolt\" rel=\"nofollow\">https://github.com/michaelsbradleyjr/Jolt</a><p>It's got Joose under the hood and I'm generalizing all the library functions for n-ary EventStreams and Behaviors (Reactive concepts). It's very much a work in progress and the test coverage is non-existant atm, but that's owing to the fact I'm working from an existing, working code base. As soon as I have all the core estream and behavior facilities in place, I'm planning to write some exhaustive tests that use JooseX.CPS together with the Joose3 author's Test.Run library: <a href=\"https://github.com/SamuraiJack/test.run\" rel=\"nofollow\">https://github.com/SamuraiJack/test.run</a>", "parent": 2295813.0, "deleted": null, "dead": null, "descendants": null, "id": 2297487, "ranking": null, "date": 1299513509000, "year": 2011}, {"by": "FixedPoint", "score": null, "time": 1301535057, "timestamp": 1301535057000, "title": "", "type": "comment", "url": "", "text": "I am sorry, but event-based programming is the wrong way to tackle the problem of scaling up blocking I/O code. Event-based programming more or less forces one to write in CPS style, which soon becomes a nightmare to reason about. I speak from the experience of having written several thousand lines of such code.<p>A better solution is to pick a language that has light-weight threads (Haskell, Erlang, ...), and let the language  handle the events (and call-stacks!) under the hood. Cf the caffeine/percolator paper (even though they do end up using heavy-weight Java threads).", "parent": 2388832.0, "deleted": null, "dead": null, "descendants": null, "id": 2390032, "ranking": null, "date": 1301535057000, "year": 2011}, {"by": "SMrF", "score": null, "time": 1301668365, "timestamp": 1301668365000, "title": "", "type": "comment", "url": "", "text": "Salaries are set by CPS and go up on a schedule based on years of experience. How is that a market?<p>Yes, she is willing to work at this salary. But we look at is as a donation to society and to our city. If we have to look at her decision to be a teacher as a donation -- she is not payed enough!", "parent": 2396333.0, "deleted": null, "dead": null, "descendants": null, "id": 2396366, "ranking": null, "date": 1301668365000, "year": 2011}, {"by": "CWuestefeld", "score": null, "time": 1301668877, "timestamp": 1301668877000, "title": "", "type": "comment", "url": "", "text": "<i>Salaries are set by CPS ... How is that a market?</i><p>Education as an industry is broken in many other ways that make it fail as a market. But in the scope of our discussion, she has chosen freely to accept the offer; the school has chosen freely to extend that offer to her. That's all that's necessary to prove my point.<p><i>Yes, she is willing to work at this salary. But we look at is as a donation to society and to our city.</i><p>I intentionally worded my reply so as not to limit my reference to her salary. I said her compensation, or her benefits. This includes the satisfaction that she gets from making \"a donation to society and to our city\". If that makes her feel good, then it's absolutely part of her compensation, part of the package deal that makes her accept the employment contract.<p>You can't say that you want a salary that in a vacuum matches the most mundane or unpleasant job, and then reap the additional job satisfaction yourself.<p>Think of it this way: would you take a job as an astronaut, getting paid nothing but room and board to do it? I, and I expect many other people, probably would. And we'd feel mighty lucky to have had that chance. Considering the satisfaction we got from actually going into space, the entirety of our compensation was enormous.<p>(Really, I'm not just babbling. This is how economics works. Those people who think that economists are only thinking about money couldn't be any farther from the truth. Economics is the study of why people make decisions, why they choose one alternative above another.)", "parent": 2396366.0, "deleted": null, "dead": null, "descendants": null, "id": 2396400, "ranking": null, "date": 1301668877000, "year": 2011}, {"by": "anamax", "score": null, "time": 1301669788, "timestamp": 1301669788000, "title": "", "type": "comment", "url": "", "text": "&#62; Salaries are set by CPS and go up on a schedule based on years of experience. How is that a market?<p>It's a market because she has a choice.<p>&#62; But we look at is as a donation to society and to our city.<p>Fair enough, but that doesn't imply that you're owed more.<p>If she's unhappy with her \"donantion\", she's free to not make it.<p>&#62; If we have to look at her decision to be a teacher as a donation -- she is not payed enough!<p>News flash - almost everyone thinks that s\\he is underpaid.<p>If you don't like the consequences of your choice, make a different one.", "parent": 2396366.0, "deleted": null, "dead": null, "descendants": null, "id": 2396457, "ranking": null, "date": 1301669788000, "year": 2011}, {"by": "gchpaco", "score": null, "time": 1303883240, "timestamp": 1303883240000, "title": "", "type": "comment", "url": "", "text": "I have seen that happen before, but only when the domain was inherently complex.  An example I actually committed; for a variety of reasons I needed a continuation driven LL(1) parser for my PhD thesis, and I needed it to be in Java.  I wrote this as a Scheme program that output Java code.  I tried hard to make things understandable (since I had to debug all of it!) but the Java code was basically incomprehensible and the Scheme program that generated it required some relatively sophisticated understandings of parser theory to understand the notation I was using.<p>A good theoretical example is: imagine trying to understand what a CPS driven compiler is doing with no understanding of CPS.  That would be pretty hard in any language, and it's actually better in Lisp because you can express things closer to the theory.", "parent": 2488210.0, "deleted": null, "dead": null, "descendants": null, "id": 2488540, "ranking": null, "date": 1303883240000, "year": 2011}, {"by": "swannodette", "score": 2.0, "time": 1304027647, "timestamp": 1304027647000, "title": "Optimized Code via CPS and beta-reduction", "type": "story", "url": "http://www.artisancoder.com/2011/04/cps-and-beta-reduction/", "text": "", "parent": null, "deleted": null, "dead": null, "descendants": 0.0, "id": 2495247, "ranking": null, "date": 1304027647000, "year": 2011}, {"by": "sortuniq", "score": 2.0, "time": 1306126204, "timestamp": 1306126204000, "title": "Ask HN: successful career, but want to get an undergrad degree.. what program?", "type": "story", "url": "", "text": "Hi,<p>I have a successful career in IT and not having an undergrad degree has never been an issue for me.<p>However, I'd really like to earn a degree.. it's a goal of mine.<p>I am looking for a program where I will actually learn new things.  Something tech related would be ideal, but I am open to other things if they are interesting to me.<p>I'm in the Boston area, and I'm open to both online courses as well as attending in person.  I'd actually like the ability to be able to take some courses in person, when possible.<p>I did attend Northeastern's CPS program &#60;http://cps.neu.edu&#62; but honestly I didn't find anything challenging or interesting about what they offered.  Truthfully, that is the reason why I never obtained a degree previously.  I always felt that I could learn more myself.  Yet, it is a goal that I want to achieve - but I don't want to achieve it just to do it, I want to actually get something out of it and enjoy it.<p>Any suggestions on programs to look at?  I need something that will allow me to continue working as I take courses.<p>Thanks in advance for your suggestions.", "parent": null, "deleted": null, "dead": null, "descendants": 3.0, "id": 2575003, "ranking": null, "date": 1306126204000, "year": 2011}, {"by": "batterseapower", "score": null, "time": 1307359315, "timestamp": 1307359315000, "title": "", "type": "comment", "url": "", "text": "You can implement \"finally\" as a higher order function in Haskell:<p><pre><code>  finally :: Either err a -&#62; IO () -&#62; (a -&#62; IO (Either err b)) -&#62; IO (Either err b)\n  finally (Left err) cleanup  _k = cleanup &#62;&#62; return (Left err)\n  finally (Right x)  _cleanup k  = k x\n</code></pre>\nYou avoid having to unwind the stack because the user of finally has to manually convert into CPS in order to supply the higher order argument of type \"a -&#62; IO (Either err b)\"", "parent": 2624305.0, "deleted": null, "dead": null, "descendants": null, "id": 2624324, "ranking": null, "date": 1307359315000, "year": 2011}, {"by": "jimwise", "score": null, "time": 1307474135, "timestamp": 1307474135000, "title": "", "type": "comment", "url": "", "text": "I recently read both volumes of \"Artificial Intelligence -- An MIT Perspective\", which is a great view of the high-water mark of the MIT AI Lab.  This two-volume set, put together between 78-81 is a review and collection of papers showing off the current state of the art in the AI Lab's work in five areas:<p>* Computer Learning<p>* Natural Language Processing<p>* Computer Vision<p>* Manipulation Technology<p>* Programming Languages (including short versions of GLS's thesis on CPS compilation for Scheme and Carl Hewitt's ACTORs paper, and a review-and-outlook paper on the development of the MIT Lisp Machine, among others)<p>Along with introductory comments by Patrick Henry Winston and Richard Brown, the set includes papers by Marvin Minsky, Gerald Sussman, BKP Horn, Jon Doyle, Richard Stallman, GLS, Hewitt, and more.<p>Taken in total, the collection shows how the world of AI looked from MIT goint into the eighties, before the boom and the bust which followed.<p>Now, you can get each volume for $1.00 on AbeBooks.  Sic transit gloria mundi...", "parent": 2629202.0, "deleted": null, "dead": null, "descendants": null, "id": 2630465, "ranking": null, "date": 1307474135000, "year": 2011}, {"by": "m0th87", "score": null, "time": 1308008375, "timestamp": 1308008375000, "title": "", "type": "comment", "url": "", "text": "Suggesting Node and Erlang have the same concurrency model is a complete pigeonholing. CPS != Actors.", "parent": 2651026.0, "deleted": null, "dead": null, "descendants": null, "id": 2651179, "ranking": null, "date": 1308008375000, "year": 2011}, {"by": "cwp", "score": null, "time": 1308028516, "timestamp": 1308028516000, "title": "", "type": "comment", "url": "", "text": "Well, that's debatable. I suppose if you squint a bit, you mentally perform a reverse CPS transform on a Node program and end up with a set of tasks that are executing concurrently. In that case, I'll rephrase: Erlang as parallelism (on adequate hardware) but no shared state; Node has shared state but no parallelism.<p>Still, given the way Node forces programmers to manually unravel tasks and write everything as callbacks, I'm not inclined to call it \"concurrency\" even if eg. the processing of a group of web requests overlap in wall-clock time.", "parent": 2651215.0, "deleted": null, "dead": null, "descendants": null, "id": 2651867, "ranking": null, "date": 1308028516000, "year": 2011}, {"by": "chalst", "score": null, "time": 1308122105, "timestamp": 1308122105000, "title": "", "type": "comment", "url": "", "text": "&#62; There are builtin polytypic functions, but you can't define your own.<p>This sounds like a first-release issue: getting type systems right in a way that allows you to grow your language is hard.<p>&#62; Gorountines are just a hack for storing a continuation in a closure in functional languages.<p>No, I don't think this is fair.  Firstly, controlling access to continuations makes sense, since they can be a world of woe.  Second, continuations alone don't give you any parallelism: that CPS helps you understand the goroutines does not mean that the semantics of goroutines can be understood purely in terms of continuations.<p>See Shivers, 1997, Continuations and threads: Expressing machine concurrency directly in advanced languages (postscript), <a href=\"http://www.ccis.neu.edu/home/shivers/papers/cps-threads.ps\" rel=\"nofollow\">http://www.ccis.neu.edu/home/shivers/papers/cps-threads.ps</a>", "parent": 2656283.0, "deleted": null, "dead": null, "descendants": null, "id": 2656287, "ranking": null, "date": 1308122105000, "year": 2011}, {"by": "chalst", "score": null, "time": 1309522623, "timestamp": 1309522623000, "title": "", "type": "comment", "url": "", "text": "You can control the order of execution of pure functions by using CPS (so strict can be represented by lazy or vice versa).  You can't force monadic operations to occur out of order this way: you need to have some concurrency between the pure expansion semantics and the action semantics.<p>Conal Elliot has written some nice things in this vein; he makes a relevant point in <a href=\"http://conal.net/blog/posts/can-functional-programming-be-liberated-from-the-von-neumann-paradigm/\" rel=\"nofollow\">http://conal.net/blog/posts/can-functional-programming-be-li...</a><p>So why can't you interleave the add operations?  Are the atomic arithmetic operations side effects?  Can you not represent CPS faithfully for some reason?  I'd really like to see the expansion phase of Fexl expressed using CPS.<p>BTW, borrow a notation from Haskell and have a dot operator be the transpose of the semicolon operator.", "parent": 2717897.0, "deleted": null, "dead": null, "descendants": null, "id": 2717965, "ranking": null, "date": 1309522623000, "year": 2011}, {"by": "fexl", "score": null, "time": 1309523188, "timestamp": 1309523188000, "title": "", "type": "comment", "url": "", "text": "(Intriguing suggestion about the dot operator by the way.)<p>On this question:  \"Are the atomic arithmetic operations side effects?\"  Not really.  Well, sort of.  I mean, take a look at the reduction code for adding two long values:\n  <a href=\"https://github.com/chkoreff/Fexl/blob/master/src/long_add.c\" rel=\"nofollow\">https://github.com/chkoreff/Fexl/blob/master/src/long_add.c</a><p>In short, when you evaluate (long_add 2 3), that value is <i>replaced</i> with the number 5, right inside the machine data structure.  So in that sense there is a \"side effect\", but it's a purely functional referentially transparent side effect only in the C internals -- nothing mutable going on at the Fexl level.<p>I'm all well-versed with CPS (continuation-passing style), e.g. I've done stuff like this:<p><pre><code>  \\do_stuff = (\\state\\return\n      do_this state \\state\n      do_that state \\state\n      return state)\n</code></pre>\nBut that doesn't in itself help me, yet.<p>By swapping the order of the parameters \"state\" and \"return\" in do_stuff, do_this, and do_that, I can transform that function into a monadic style:<p><pre><code>  \\do_stuff = (\\return\n      do_this;\n      do_that;\n      return)\n</code></pre>\nBut as it turns out that accomplishes nothing <i>essential</i> -- it is merely a syntactic difference.<p>Keep in mind that Fexl is purely combinatorial, and ultimately what's really going on under the hood are the application of these two rules:<p><pre><code>  C x y    =  x\n  S x y z  =  x z; y z\n</code></pre>\nSo maybe that will give you some insight into just how irredeemably lazy this language really is.  :)<p>(Yes there are some other combinators such as I, L, R, and Y, but these are ultimately shorthands for S and C forms.)<p>If by \"interleave the add operations\" you are suggesting a change to the core evaluation strategy used in the interpreter, that is probably out of the question -- I've made my bed there and I have to lie in it.  There's not much I can do at this point about my reliance on combinators, I mean, check out the S combinator:  <a href=\"https://github.com/chkoreff/Fexl/blob/master/src/S.c\" rel=\"nofollow\">https://github.com/chkoreff/Fexl/blob/master/src/S.c</a> .  That's baked in the cake!<p>But if you mean there's something I can do different in my Fexl function itself, that might be something to consider.<p>I tried the full gamut here, using both accumulator and CPS:<p><pre><code>  \\test_big_sum_4 =\n  (\n\n  \\sum == (\\N \\total \\return\n      long_le N 0\n          (return total)\n          (sum (long_sub N 1) (long_add total N) return)\n          )\n\n  # TODO still a problem!!\n  \\N = 100000\n  sum N 0 \\total\n  print \"sum 1 .. \"; print N; print \" is \"; print total;nl;\n  )\n\n  test_big_sum_4\n</code></pre>\nBut to no avail:  it still uses up large amounts of memory.<p>However, I could force the evaluation of (long_sub N 1) and (long_add total N), and that might do the trick.  Then it'll be totally tail recursive with machine integers at every turn, and run in constant memory.", "parent": 2717965.0, "deleted": null, "dead": null, "descendants": null, "id": 2717988, "ranking": null, "date": 1309523188000, "year": 2011}, {"by": "chalst", "score": null, "time": 1309524811, "timestamp": 1309524811000, "title": "", "type": "comment", "url": "", "text": "<i>I'm all well-versed with CPS</i><p>I'm talking about a particular application of CPS, the encoding of CBV lambda-calculus in the CBN calculus.  Checkout Danvy &#38; Filinksi (1992) if you need brushing up on this: look at what happens in your calculus when you code up the CBV version of the foldl, which should force the first atomic operation to happen before unwinding the next application of addition.<p>Danvy &#38; Filinksi, 1992, Representing control: a study of the CPS transformation <a href=\"http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.84\" rel=\"nofollow\">http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.8...</a>", "parent": 2717988.0, "deleted": null, "dead": null, "descendants": null, "id": 2718070, "ranking": null, "date": 1309524811000, "year": 2011}, {"by": "pmjordan", "score": null, "time": 1311008870, "timestamp": 1311008870000, "title": "", "type": "comment", "url": "", "text": "The problem this solves is a serious one, in my experience, even though I find their choice of syntax rather curious. Given that JavaScript 1.7 introduces the <i>yield</i> keyword, it would make sense to add support for that to V8 and implement the infrastructure for concurrent asynchronous I/O around that as a library. The concurrency aspect is, after all, orthogonal to the blocking vs. callback situation, and can easily be done even when using callbacks, with a single callback function called upon completion of all concurrent I/O. I believe the Dojo framework provides such a utility, and I wrote my own simplistic stand-alone mini-library for exactly this a while back. [0]<p>I've run into the problem of endless chained callbacks in C, where it's much worse due to the lack of nested functions, let alone closures or garbage collection.[1] I ended up using the switch block \"coroutine\" hack [2] for the worst cases, along with dynamically allocated \"context\" structs to hold \"local\" variables. A proper macro system would have helped transform blocking code into CPS form. I tried to integrate a SC [3] pass into our build, which could have done it, but ran into all sorts of practical/yak shaving problems, so I ended up with the C preprocessor macro/switch solution for now. In user space, explicit stack-switching with something like <i>swapcontext()</i> is probably preferable, if you can get away with it, but in the kernel this is rather problematic.<p>[0] <a href=\"https://github.com/pmj/MultiAsync-js\" rel=\"nofollow\">https://github.com/pmj/MultiAsync-js</a><p>The reason I wrote my own was because I originally needed it in Rhino, the JVM-based JS implementation, and I couldn't find anything similar that worked there.<p>[1] Yes, there are garbage collectors that work with C, but to my knowledge, none of them can be used in kernel modules. In any case, the other 2 issues are worse and aren't solveable within the language via libraries.<p>[2] <a href=\"http://www.linuxhowtos.org/C_C++/coroutines.htm\" rel=\"nofollow\">http://www.linuxhowtos.org/C_C++/coroutines.htm</a><p>[3] <a href=\"http://super.para.media.kyoto-u.ac.jp/~tasuku/sc/index-e.html\" rel=\"nofollow\">http://super.para.media.kyoto-u.ac.jp/~tasuku/sc/index-e.htm...</a>", "parent": 2776938.0, "deleted": null, "dead": null, "descendants": null, "id": 2777078, "ranking": null, "date": 1311008870000, "year": 2011}, {"by": "jashkenas", "score": null, "time": 1311010152, "timestamp": 1311010152000, "title": "", "type": "comment", "url": "", "text": "I'd be more than happy to explore the addition of Tame.js-style CPS to the CoffeeScript compiler -- but there's a lot of prior work there already:<p><a href=\"https://github.com/jashkenas/coffee-script/issues/241\" rel=\"nofollow\">https://github.com/jashkenas/coffee-script/issues/241</a><p><a href=\"https://github.com/jashkenas/coffee-script/issues/287\" rel=\"nofollow\">https://github.com/jashkenas/coffee-script/issues/287</a><p><a href=\"https://github.com/jashkenas/coffee-script/issues/350\" rel=\"nofollow\">https://github.com/jashkenas/coffee-script/issues/350</a><p><i>Edit</i>:<p>Things look a little less promising after running a simple test. This input JavaScript:<p><pre><code>    while (i--) {\n      twait {\n        fs.readFile(\"one\");\n        fs.readFile(\"two\");\n      }\n    }\n</code></pre>\nGets compiled into this resulting \"tamed\" JavaScript:<p><pre><code>    var tame = require('tamejs').runtime;\n    var __tame_fn_0 = function (__tame_k) {\n        var __tame_k_implicit =  {};\n        var __tame_fn_1 = function (__tame_k) {\n            if (i --) {\n                var __tame_fn_2 = function (__tame_k) {\n                    var __tame_ev = new tame.Event (__tame_k);\n                    var __tame_fn_3 = function (__tame_k) {\n                        fs .readFile ( \"one\" ) ;\n                        fs .readFile ( \"two\" ) ;\n                        tame.callChain([__tame_k]);\n                    };\n                    __tame_fn_3(tame.end);\n                    __tame_ev.trigger();\n                };\n                tame.callChain([__tame_fn_2, __tame_fn_1, __tame_k]);\n            } else {\n                tame.callChain([__tame_k]);\n            }\n        };\n        __tame_k_implicit.k_break = __tame_k;\n        __tame_k_implicit.k_continue = function() { __tame_fn_1(__tame_k); };\n        tame.callChain([__tame_fn_1, __tame_k]);\n    };\n    __tame_fn_0 (tame.end);\n</code></pre>\n... not so nice to work with or debug. The general conclusion of that series of tickets was that the code generation required to make this CPS transformation work with all edge cases is a bit too hairy to be worth it on balance. Depending on how much sequential async you're doing, YMMV.", "parent": 2777091.0, "deleted": null, "dead": null, "descendants": null, "id": 2777196, "ranking": null, "date": 1311010152000, "year": 2011}, {"by": "pmjordan", "score": null, "time": 1311010997, "timestamp": 1311010997000, "title": "", "type": "comment", "url": "", "text": "True, you wouldn't get the syntactic sugar of the result variables - you would have to return them as an array or object with named properties. Lack of V8 support is of course the killer, and when I wrote my original comment, I for some reason assumed you'd modified V8 (at which point you may as well have implemented <i>yield</i>), but it turns out you just do the CPS transform in a preprocessing pass. Nice!", "parent": 2777209.0, "deleted": null, "dead": null, "descendants": null, "id": 2777247, "ranking": null, "date": 1311010997000, "year": 2011}, {"by": "sawyer", "score": null, "time": 1311013591, "timestamp": 1311013591000, "title": "", "type": "comment", "url": "", "text": "I think adding Tame style CPS to CoffeeScript would be amazing; it looks like an incredibly clean way to write the async code necessary for complex Node apps.<p>From my understanding of the prior work the issue with adding defer or &#60;- to CS was that it required too much overhead to get right in all cases. Does TameJS' approach improve that overhead in any way, or is this essentially the same work that's already been explored for CS, broken out into a dedicated compiler?", "parent": 2777091.0, "deleted": null, "dead": null, "descendants": null, "id": 2777469, "ranking": null, "date": 1311013591000, "year": 2011}, {"by": "sjs", "score": null, "time": 1311044288, "timestamp": 1311044288000, "title": "", "type": "comment", "url": "", "text": "Your code is indented less than it might otherwise be indented, and you type fewer literal functions. Oh and there wasn't any mention of error handling so apparently there is nothing to help you when one of the calls in a twait block throws. I wonder how twait interacts with try/catch. If it's purely a CPS transform then yeah, you're just fucked on error handling.<p>mkevent is like creating a Deferred and twait is like creating a DeferredList and calling when/then on it with the remainder of the code after the twait block used as the callback. Conceptually this is a very specific and concrete subset of functionality that promises give you.", "parent": 2777644.0, "deleted": null, "dead": null, "descendants": null, "id": 2779394, "ranking": null, "date": 1311044288000, "year": 2011}, {"by": "yardie", "score": null, "time": 1311168424, "timestamp": 1311168424000, "title": "", "type": "comment", "url": "", "text": "It's a bit like being a celebrity and dealing with papparazzi. After the last bubble (and being a freshly-minted graduate) I couldn't get a job in computers and slid through the tech support back entrance. Now with lines under my eyes and a slight case of CPS I can't even bring up my profession without someone handing me a business card.<p>Conversation goes like this:<p>?: So what do you do?<p>me: I'm a programmer.<p>?: Really?! Hey, I got this great idea for site, doing warble, warble, warble, warble......", "parent": 2785178.0, "deleted": null, "dead": null, "descendants": null, "id": 2785385, "ranking": null, "date": 1311168424000, "year": 2011}, {"by": "teyc", "score": null, "time": 1311300685, "timestamp": 1311300685000, "title": "", "type": "comment", "url": "", "text": "Greece has been in fiscal deficit for so long, a loan which stays on the books but never gets paid off reminds me of CPS where functions never return.", "parent": 2791778.0, "deleted": null, "dead": null, "descendants": null, "id": 2792107, "ranking": null, "date": 1311300685000, "year": 2011}, {"by": "hahainternet", "score": null, "time": 1312071833, "timestamp": 1312071833000, "title": "", "type": "comment", "url": "", "text": "This is a nice little rant, but the UK Government has already been defeated on terrorist detention. That happened years ago.<p>Furthermore, the age of consent applies only to <i>adults</i>. If you are under 18 then not only does the CPS have a strong duty to determine if prosecution is in the public interest, it may not even be a crime at all if your age is close.<p>There are valid things to argue against, like temporary detention with no intention of charging. Given that, please don't add in a bunch of rubbish that dilutes your point.", "parent": 2827179.0, "deleted": null, "dead": null, "descendants": null, "id": 2827195, "ranking": null, "date": 1312071833000, "year": 2011}, {"by": "carbonica", "score": null, "time": 1312091004, "timestamp": 1312091004000, "title": "", "type": "comment", "url": "", "text": "&#62; If you are under 18 then not only does the CPS have a strong duty to determine if prosecution is in the public interest, it may not even be a crime at all if your age is close.<p>I'm not too invested in whatever the heck your parent poster was saying, but you seem to have supported his point that \"age of consent laws exist to easily convict people pimping child prostitutes.\" 17 year olds don't seek out child prostitutes.", "parent": 2827195.0, "deleted": null, "dead": null, "descendants": null, "id": 2827720, "ranking": null, "date": 1312091004000, "year": 2011}, {"by": "sausagefeet", "score": null, "time": 1312550933, "timestamp": 1312550933000, "title": "", "type": "comment", "url": "", "text": "&#62; Is it worth the benefits I've mentioned? For me, yes.<p>This sounds like a tacit admittance that you're willing to deal with it because you don't think you have other options, but you do.  There is at least one CPS compiler for Node (TameJS), and there are other languages that allow for the same result, but more straightforward implementations of concurrent code (Erlang, Ocaml/LWT, Haskell).  I'm not saying you should use though, but we can do better and we should, even if it's just compiling back to JS in the end.", "parent": 2849150.0, "deleted": null, "dead": null, "descendants": null, "id": 2849989, "ranking": null, "date": 1312550933000, "year": 2011}, {"by": "sausagefeet", "score": null, "time": 1312568558, "timestamp": 1312568558000, "title": "", "type": "comment", "url": "", "text": "If you're doing CPS in a language with tail-call optimization then the same stack frame will be used for all your function calls.  I don't know if V8 does this.  In something like Node you don't do full CPS, you have portions of your code in CPS but usually only a few layers deep as you need to give control back to the event loop at some point.", "parent": 2850989.0, "deleted": null, "dead": null, "descendants": null, "id": 2851087, "ranking": null, "date": 1312568558000, "year": 2011}, {"by": "DanWaterworth", "score": null, "time": 1313647449, "timestamp": 1313647449000, "title": "", "type": "comment", "url": "", "text": "Let me start by saying that it's not impossible, I know this for a fact because I did it. I'm 19 years old, I don't have a degree and a few months ago I landed my first job. I'm working as a software engineer.<p>Having said that however, don't for a moment think it will be easy. I've been programming as a hobby since I was nine and, after finishing full-time education, I spent the best part of a year learning and brushing up on my skills. Crucially, this was not something I did in my spare time, but continuously; I was effectively in full-time education.<p>There are two distinct pools of knowledge that it's in your interests to nurture: theoretical knowledge and practical knowledge. You will only be effective when you have a solid grounding in both. I may have made the mistake of focussing to heavily on the theoretical, but by working is possibly the best way to gain practical knowledge, so I'm addressing the imbalance.<p>There are a few topics which I focused on that have proved to be invaluable to me:<p>* Data structures and database design,<p>* The web stack (by which I mean the entire stack, how does TCP work or the OS schedule threads),<p>* Functional programming,<p>* Compiler internals,<p>I would have also greatly benefited if I'd had known more about asynchronous programming. Specifically, how are synchronous programs translated to work asynchronously, ie, how do threads work? How is CPS conversion an alternative to using threads?<p>Good luck.", "parent": 2897905.0, "deleted": null, "dead": null, "descendants": null, "id": 2898171, "ranking": null, "date": 1313647449000, "year": 2011}, {"by": "barrkel", "score": null, "time": 1313874623, "timestamp": 1313874623000, "title": "", "type": "comment", "url": "", "text": "It is a moot point - because CPS transformation is the very process of turning straight-line code into event-style code using closures for callbacks, and it is mechanical. The compiler can do it, and for some languages it does it as a matter of course.<p>The problem with threads is that they are more general than a good implementation of events. You've got a lot more rope to hang yourself with.", "parent": 2907564.0, "deleted": null, "dead": null, "descendants": null, "id": 2907733, "ranking": null, "date": 1313874623000, "year": 2011}, {"by": "dill_day", "score": null, "time": 1314239224, "timestamp": 1314239224000, "title": "", "type": "comment", "url": "", "text": "FWIW, if you follow the link to his compilers class page, you can see that the projects do in fact deal with traditional topics:<p><pre><code>  Lexical analyzer\n  Parser\n  High-level translator\n  Normalizer &#38; CPS converter\n  Low-level translator\n  Register allocator &#38; Assembly code emitter\n</code></pre>\nAnyway, when I took compilers it was similar to yours -- each week we compiled larger subsets of Python to x86.", "parent": 2923419.0, "deleted": null, "dead": null, "descendants": null, "id": 2923500, "ranking": null, "date": 1314239224000, "year": 2011}, {"by": "Peaker", "score": null, "time": 1314298905, "timestamp": 1314298905000, "title": "", "type": "comment", "url": "", "text": "If you can do continuation passing, you can implement any monad instance. You still may not be able to encode the Monad <i>generalization</i> (which indeed, Python cannot).<p>As for continuation passing, Python can do explicit continuation passing, but it has caveats:<p>* No TCO means it doesn't work well in larger cases<p>* Explicit CPS is ugly. yield-based continuation passing is restricted. You can't implement non-determinism via generators.<p>So using yield, you can implement most monad instances in Python (excluding non-determinism).<p>But Haskell can goes beyond a particular/useful monad instance (e.g: Parsing) and has a Monad <i>generalization</i> (basically a type-class that allows lots of libraries to be written such that they work with <i>any</i> monad, not just this parsing monad).<p>Additionally, monad transformers are a technique to compose monad types together to form a new monad that can do the things each of the monads can.<p>For example, I can compose the non-determinism monad with the parsing monad to get a non-determinism parser that yields various possible parse results.", "parent": 2925867.0, "deleted": null, "dead": null, "descendants": null, "id": 2926012, "ranking": null, "date": 1314298905000, "year": 2011}, {"by": "DanWaterworth", "score": null, "time": 1316763989, "timestamp": 1316763989000, "title": "", "type": "comment", "url": "", "text": "This looks like it's going to be a great language. Compiling to LLVM should mean that it does tall call optimization, which is great and also means that integrating with C/C++ should be fairly easy.<p>The only thing it's missing that I'd like to see is support for CPS conversion like streamlinejs does. Even if it supports growable stacks that start at 1KB, with thousands of threads CPS conversion is still more efficient. Having said that, seeing as they are writing browsers, not servers, I can see why it's not a priority to do this.", "parent": 3027777.0, "deleted": null, "dead": null, "descendants": null, "id": 3029198, "ranking": null, "date": 1316763989000, "year": 2011}, {"by": "beagle3", "score": null, "time": 1316783907, "timestamp": 1316783907000, "title": "", "type": "comment", "url": "", "text": "Can you explain how CPS solves the growable stack problem? I haven't heard of this before.", "parent": 3029198.0, "deleted": null, "dead": null, "descendants": null, "id": 3029854, "ranking": null, "date": 1316783907000, "year": 2011}, {"by": "ori_b", "score": null, "time": 1316791663, "timestamp": 1316791663000, "title": "", "type": "comment", "url": "", "text": "That's another option for doing it. However, writing in CPS implies that your calls are all tail calls, and they all take a continuation closure as an argument.", "parent": 3030183.0, "deleted": null, "dead": null, "descendants": null, "id": 3030320, "ranking": null, "date": 1316791663000, "year": 2011}, {"by": "beagle3", "score": null, "time": 1316792393, "timestamp": 1316792393000, "title": "", "type": "comment", "url": "", "text": "I know what CPS is. But Dan states that \"CPS is more efficient than growable stacks\", and I can't see how CPS plays a nontrivial part in the stack size optimization.", "parent": 3030320.0, "deleted": null, "dead": null, "descendants": null, "id": 3030358, "ranking": null, "date": 1316792393000, "year": 2011}, {"by": "thomasz", "score": null, "time": 1317281537, "timestamp": 1317281537000, "title": "", "type": "comment", "url": "", "text": "I don't fully understand why this makes callback hell better just because it is known under a nicer name. CPS has it's use cases, but application code is not one of them.", "parent": 3051482.0, "deleted": null, "dead": null, "descendants": null, "id": 3051511, "ranking": null, "date": 1317281537000, "year": 2011}, {"by": "seabee", "score": null, "time": 1317282957, "timestamp": 1317282957000, "title": "", "type": "comment", "url": "", "text": "Specifically, CPS was intended as a mechanical program transformation to remove the stack, not a style for programmers to actually write their programs in.", "parent": 3051511.0, "deleted": null, "dead": null, "descendants": null, "id": 3051554, "ranking": null, "date": 1317282957000, "year": 2011}, {"by": "m0wfo", "score": null, "time": 1317284255, "timestamp": 1317284255000, "title": "", "type": "comment", "url": "", "text": "And in a lot of other languages writing in CPS incurs a performance penalty (lucky for me it seems to be &#60; 1 order of magnitude in clojure); I assume this is the case in node.js too?", "parent": 3051482.0, "deleted": null, "dead": null, "descendants": null, "id": 3051600, "ranking": null, "date": 1317284255000, "year": 2011}, {"by": "beagle3", "score": null, "time": 1317336297, "timestamp": 1317336297000, "title": "", "type": "comment", "url": "", "text": "&#62; &#62; &#62; So the stack frames aren't allocated on the heap.<p>&#62; &#62; So where exactly are the closures allocated ?<p>&#62; They would be allocated on the heap<p>You're playing a weird game of semantics here. closures and stack frames are the same thing in this case. The fact that the \"call stack\" is implemented via a register called \"the stack register\" and uses a LIFO move-the-mark allocation scheme is an irrelevant implementation detail.<p>Your assertion that CPS conversion is somehow more efficient than growable stacks is not supported by any of the arguments you presented.", "parent": 3048984.0, "deleted": null, "dead": null, "descendants": null, "id": 3054642, "ranking": null, "date": 1317336297000, "year": 2011}, {"by": "DanWaterworth", "score": null, "time": 1317469672, "timestamp": 1317469672000, "title": "", "type": "comment", "url": "", "text": "Closures and stack frames are definitely not the same thing. CPS conversion is used to create continuations; it's not necessary that the continuations are compiled naively using CPS.", "parent": 3054642.0, "deleted": null, "dead": null, "descendants": null, "id": 3059876, "ranking": null, "date": 1317469672000, "year": 2011}, {"by": "larsberg", "score": null, "time": 1317515541, "timestamp": 1317515541000, "title": "", "type": "comment", "url": "", "text": "Thanks for all the details! We're looking at moving from MLRISC to LLVM in Manticore, and some knowledge of the pitfalls in the terrain are definitely helpful. We're most worried about our ridiculously custom calling convention while in-ML, but the optimization limitations are good to hear about.<p>For your point #3 (\"Haskell itself\"), do you do any block coalescing? In Manticore, once we're in our final IR before codegen (basically a first-order CPS language), we have a few tricks to help our code generator out from this:<p>1) If f only calls g and g is only called by f, merge the two blocks. During the merge, add the gc check for g to the top of the entire block. This optimization is extremely effective, but only because of our control-flow analysis results, since so many of our jumps are indirect.<p>2) Don't split blocks or do multiple GC checks in a block where one will do. So, if you allocate multiple small tuples, do a single GC check for all the space you will need in the block.<p>I'm sure John probably mentioned these to the Simons, but just in case...", "parent": 3060306.0, "deleted": null, "dead": null, "descendants": null, "id": 3061620, "ranking": null, "date": 1317515541000, "year": 2011}, {"by": "seanmcq", "score": null, "time": 1317754478, "timestamp": 1317754478000, "title": "", "type": "comment", "url": "", "text": "Yes, not yielding control from a function in any evented framework will block the main event loop.<p>In programming languages that support coroutines, yielding a sleep every few loops will release the event loop.  In languages without coroutines like javascript you will need to write your algorithm in CPS to release the event loop.", "parent": 3072091.0, "deleted": null, "dead": null, "descendants": null, "id": 3072297, "ranking": null, "date": 1317754478000, "year": 2011}, {"by": "sreque", "score": null, "time": 1317760002, "timestamp": 1317760002000, "title": "", "type": "comment", "url": "", "text": "So I've worked on on an older open source project that does exactly what you suggest. The main loop accepts socket requests using non-blocking IO, figures out how to handle that request, and then forks a child process to handle it appropriately.<p>This can work great and can scale very nicely, but it also has some major drawbacks compared to other solutions. The whole point of the original post was that single-threaded non-blocking event loops are very fragile. You can easily end up accidentally freezing the entire application.<p>Other problems with forking event loops include:<p>- Simple Event loops require you to manually CPS-transform your code. This isn't an issue for a simple request-response cycle, but it quickly turns into spaghetti code for anything more complex. For a college class I once wrote a toy non-blocking P2P client in Python using entirely non-blocking IO, while all the other students chose to use threads. My client was very performant, but the code ended up being FAR more complex than everyone else's solutions for the simple reason that I had to code in CPS the complex multi-step interactions that occur between peers.<p>- If any of your tasks are not independent and must interact with each other, you have to start dealing with IPC, which can be very difficult to get right without a good message passing library. Even with one, it can still be more complicated than using threads. Clojure's STM, for instance, is useless without a shared memory model.<p>- Your application is not portable to Windows if you rely on forking.<p>And these are just some of the problems with using a simple non-blocking event loop to drive your entire application. Throw in the fact that you are using javascript, a very unscalable language never designed to do anything more than provide interactivity in the browser and that has incredibly sparse library support, and you've got lots more problems on top of that. Node.js just isn't as useful as its very enthusiastic proponents claim it to be.", "parent": 3071883.0, "deleted": null, "dead": null, "descendants": null, "id": 3072754, "ranking": null, "date": 1317760002000, "year": 2011}, {"by": "nostrademons", "score": null, "time": 1318361864, "timestamp": 1318361864000, "title": "", "type": "comment", "url": "", "text": "I remember reading Dan's blog religiously when I was a college student interested in language design and compiler implementation.  That's where I learned about CPS and register VMs.<p>Anyway, I've seen him recently pop up in a professional context.  I can't find anything on the Internet about where he's working now, so on the off chance he's deliberately protecting his privacy, I won't say where.  But knowing what he's working on, I think he's doing fine.", "parent": 3098729.0, "deleted": null, "dead": null, "descendants": null, "id": 3099991, "ranking": null, "date": 1318361864000, "year": 2011}, {"by": "Fixnum", "score": null, "time": 1319311632, "timestamp": 1319311632000, "title": "", "type": "comment", "url": "", "text": "&#62; tail-call recursion is almost inconsequential---this is a very introductory course, just an overview of CS, so performance isn't important.<p>&#62; What is important are the big ideas.<p>Go back and read section 1.2 (\"Procedures and the processes they generate\") again.  As far as its authors are concerned, this <i>is</i> one of the big ideas.  Basic concepts of time and space complexity and recursive vs. iterative processes are so important that they appear as soon as the basics of Scheme have been introduced.  It's a core theme of the book (Why is this n-queens program slow?  How can we eliminate two extra stack saves in this register machine program?), and the main questions in chapter 5 that the evaluators in chapter 4 don't answer fully (but look closely at the CPS evaluator in section 4.3) are \"how do procedures return values to their callers?\" and the related \"how can we write an evaluator that doesn't grow the stack when executing tail-recursive procedures?\"<p>Ultimately, the beauty of SICP isn't in the paradigms covered but the understanding of how programs execute, and the beauty of Scheme is the simpleness of its control flow .  It's far easier to a understand Scheme program than one written in Python, Haskell, Prolog, or any other high-level language.  Do most people understand (modulo sophisticated optimizations) how the Python interpreter actually handles, say, comprehensions, iterators, generators, or its complex object-oriented features?  Can a first-year student add these features by hand (forgetting completely about macros and first-class continuations) to an interpreter herself?<p>It amazes me that Berkeley professors don't want to teach Scheme (and worries me, as they're much cleverer than me).  The whole magic of the language is that in the end there isn't any magic at all.", "parent": 3142413.0, "deleted": null, "dead": null, "descendants": null, "id": 3144144, "ranking": null, "date": 1319311632000, "year": 2011}, {"by": "lsb", "score": null, "time": 1320354864, "timestamp": 1320354864000, "title": "", "type": "comment", "url": "", "text": "That's why you need to do a CPS transform to transform every call into a tail call, and wrap the continuation up on the heap, so you don't blow out the stack.", "parent": 3193621.0, "deleted": null, "dead": null, "descendants": null, "id": 3193718, "ranking": null, "date": 1320354864000, "year": 2011}, {"by": "amalcon", "score": null, "time": 1321290362, "timestamp": 1321290362000, "title": "", "type": "comment", "url": "", "text": "I think the real problem here is that JavaScript/Node.js is constrained by language choice to a hybrid continuation-passing/call-return style.  As straightforward as exceptions are in call-return, they are even simpler in CPS -- the exception handler is just a second continuation.  It's literally just a standard-form onError parameter.<p>The problem is that you <i>can't</i> write your whole program in continuation-passing style in JavaScript, because its call and exception mechanisms aren't designed for CPS.  There is no tail-call optimization, and you can't configure exception handlers manually.  That's a valid choice under the right circumstances, but it breaks CPS.", "parent": 3234114.0, "deleted": null, "dead": null, "descendants": null, "id": 3234726, "ranking": null, "date": 1321290362000, "year": 2011}, {"by": "exDM69", "score": null, "time": 1321297285, "timestamp": 1321297285000, "title": "", "type": "comment", "url": "", "text": "&#62;&#62; \"This is an interesting point of view, however I'm inclined to disagree on the basis that the async model is representative of how things actually happen; the imperative model is not.\"<p>You're absolutely correct in that many operations are executed asynchronously. However, I think that it shouldn't be the model we use to write programs. Programming is all about abstractions and the imperative model is a good abstraction which can be implemented effectively by a compiler and a runtime system.<p>Sure, a program can be composed by maintaining a state, which changes when events occur. I just feel that it gets really hairy really quickly when you start to have several IO operations in sequence and have to start thinking about multiple error conditions. With exceptions and imperative code, you can write the IO operations one after another and catch the exceptions where they can be handled (e.g. show an error dialog in the GUI). With hand-written CPS async code you have to assign an error handler to each IO call, even if you'd want to have only one handler for several error conditions.<p>&#62;&#62; \"I have to admit that perhaps the nicest way I have seen of handling failure is in the concept of Monads in Haskell\"<p>I think that failures are not handled with the monad failure function any more in Haskell, but exceptions are use these days (a quite recent addition to Haskell language). A catch can only be in IO code but throw can be in either monadic or functional code.", "parent": 3234527.0, "deleted": null, "dead": null, "descendants": null, "id": 3235189, "ranking": null, "date": 1321297285000, "year": 2011}, {"by": "lotharbot", "score": null, "time": 1321689606, "timestamp": 1321689606000, "title": "", "type": "comment", "url": "", "text": "This is particularly true for those who work with children.  Once rumors start circulating that your kid's 4th grade teacher \"got busted for child porn\", there's a high likelihood they'll never be able to teach again, even if the investigation clears them or the charge is thrown out.  Sure, some parents will be understanding, but it only takes a few to cause a frenzy.<p>It's also important for those of us who browse the internet with our children present.  If your first grader tells his friend he saw a naked picture of a little kid on daddy's computer, and an adult overhears, that's probably going to bring child protective services (or SRS or whatever it's called in your area).  Once CPS is involved, your entire life comes under intense scrutiny.<p>Point being: exercise caution.  Use NSFW labels whenever you link to nudity, <i>especially</i> child nudity, even if it's totally non-sexual.", "parent": 3254477.0, "deleted": null, "dead": null, "descendants": null, "id": 3254886, "ranking": null, "date": 1321689606000, "year": 2011}, {"by": "jules", "score": null, "time": 1326104372, "timestamp": 1326104372000, "title": "", "type": "comment", "url": "", "text": "If you want to go further, Matt Mights papers on static analysis are excellent: <a href=\"http://matt.might.net/#papers\" rel=\"nofollow\">http://matt.might.net/#papers</a><p>Older versions of techniques like those described in these papers were the basis of the Stalin scheme compiler by Sisskind. From Sisskind's research statement:<p>Stalin is an optimizing compiler for Scheme that performs whole-program static analysis and uses the results of that analysis to generate extremely e cient code. Stalin utilizes a large collection of static-analysis techniques. It performs a novel form of polyvariant flow analysis that uses iterated monovariant flow analysis to perform flow-directed splitting: cloning of specialized copies of procedures and per-call-site assignment of targets to such clones. It uses the results of flow analysis to perform life-time analysis, escape analysis, points-to analysis, and must-alias analysis. These analyses support a novel form of lightweight\nclosure conversion that eliminates most closure slots, using techniques such as variable globalization and localization, compresses the static backchain, and usually eliminates most closures from programs. It also uses the above analyses to support \nflow-directed region-based storage management, where run-time garbage collection is replaced with static allocation and deallocation on a per-abstract-value and per-program-point basis. It also performs flow-directed lightweight CPS conversion, using extensions of the techniques pioneered with Screamer, to support extremely e cient \frst-class continuations. Finally, it supports \now-directed inlining and low-level representation selection to choose the implementation (or nonimplementation) of tags, tag checking, and tag dispatching on a per-abstract-value and per-program-point basis. This eliminates most run-time tags, tag checking, tagging, tag stripping, tag dispatching, boxing, and unboxing from programs. These analyses and optimizations allow Stalin to generate extremely effi cient code that outperforms all other Scheme compilers by factors ranging between two and one hundred, particularly for numerically intensive code. Stalin often generates code that outperforms handwritten c and Fortran code.<p>-- ftp://ftp.ecn.purdue.edu/qobi/research-statement.pdf<p>Although flow analysis has been extensively published about, I couldn't find much information using the results of it for the stuff he describes. Does anybody have pointers?", "parent": 3441667.0, "deleted": null, "dead": null, "descendants": null, "id": 3442009, "ranking": null, "date": 1326104372000, "year": 2012}, {"by": "jules", "score": null, "time": 1326529002, "timestamp": 1326529002000, "title": "", "type": "comment", "url": "", "text": "Why is it easier? That's just doing the monad transformation by hand instead of letting a compiler take care of that for you (in the case of EitherT and do-notation the compiler takes care of the intraprocedural transformation for you). It's rather in the same category as Node.js programmers doing CPS transform by hand.", "parent": 3463760.0, "deleted": null, "dead": null, "descendants": null, "id": 3463798, "ranking": null, "date": 1326529002000, "year": 2012}, {"by": "ErrantX", "score": null, "time": 1326584194, "timestamp": 1326584194000, "title": "", "type": "comment", "url": "", "text": "The CPS != \"the crown\" (at least not today). The CPS is the UK equivalent of the DA's office. It's a political bureaucracy (I could literally complain for days about how much of a bureaucracy it is, but you'd get bored of me :)).<p>The judge, theoretically, is more of the expert on the law and whether it should be tried - but the CPS have to decide to bring the prosecution to him/her. Which is why you regularly get cases that <i>should</i> be seen in court, but which a suit decides is statistically unlikely to prosecute favourably.", "parent": 3465579.0, "deleted": null, "dead": null, "descendants": null, "id": 3465709, "ranking": null, "date": 1326584194000, "year": 2012}, {"by": "ErrantX", "score": null, "time": 1326588645, "timestamp": 1326588645000, "title": "", "type": "comment", "url": "", "text": "Absolutely. In this case I think it is possible to <i>argue</i> (rather than it being cut and dried) about the legality in the UK - at least to a reasonable degree.<p>If the judge decides it is then, fine, that's what he rules :)<p>I agree; #3 is the most compelling. If anything it's the same reason the CPS declined a UK prosecution (because to do so would be disproportionate).", "parent": 3465727.0, "deleted": null, "dead": null, "descendants": null, "id": 3465890, "ranking": null, "date": 1326588645000, "year": 2012}, {"by": "njs12345", "score": null, "time": 1326630496, "timestamp": 1326630496000, "title": "", "type": "comment", "url": "", "text": "I think it's somewhat unfortunate. IANAL, but I think he can be extradited because the judge thinks an offense has occurred even though the CPS has decided not to prosecute (it's what he seems to be saying here: 'Parliament has made conduct found to be contrary to S.107 (2A) criminal.  No court can change the statutory offence').<p>Unfortunately, there's no clause in the Extradition Act in power at the moment which allows a public interest defense, so it's not the job of the judge to decide such an issue. The forum clause (linked to a bit further down) would change this.", "parent": 3465579.0, "deleted": null, "dead": null, "descendants": null, "id": 3467000, "ranking": null, "date": 1326630496000, "year": 2012}, {"by": "tobylane", "score": null, "time": 1326666678, "timestamp": 1326666678000, "title": "", "type": "comment", "url": "", "text": "The extradition treaty is widely thought to be very biased to the USA, legal wording of [1]. The USA DA's office can withhold evidence, and only need to provide reasonable suspicion, but CPS need to provide probable cause. It's difficult to tell if this law will ever be reversed, maybe it will have to wait for the 'special relationship' to weaken.<p><a href=\"http://en.wikipedia.org/wiki/Extradition_Act_2003\" rel=\"nofollow\">http://en.wikipedia.org/wiki/Extradition_Act_2003</a>", "parent": 3465408.0, "deleted": null, "dead": null, "descendants": null, "id": 3468463, "ranking": null, "date": 1326666678000, "year": 2012}, {"by": "scottdw2", "score": null, "time": 1326766109, "timestamp": 1326766109000, "title": "", "type": "comment", "url": "", "text": "Don't English and Welsh law allow for private prosecution of crimes in cases where the CPS declines to prosecute?<p>Wouldn't that provide an avenue of relief to the copy right holders without removing a UK citizen from the jurisdiction of UK laws?<p>This whole thing seems troubling to me.<p>How many US Internet companies collect VAT from sales to folks in the UK? Would that make founders of a US startup subject to extradition to the UK for tax avoidance? What if it's just a tiny DBA \"company\" with no liability shield?<p>The whole thing smells rotten to me!", "parent": 3465709.0, "deleted": null, "dead": null, "descendants": null, "id": 3473463, "ranking": null, "date": 1326766109000, "year": 2012}, {"by": "ufo", "score": null, "time": 1327026974, "timestamp": 1327026974000, "title": "", "type": "comment", "url": "", "text": "Where is the love for [Deferreds?](<a href=\"http://www.sitepen.com/blog/2010/05/03/robust-promises-with-dojo-deferred-1-5/\" rel=\"nofollow\">http://www.sitepen.com/blog/2010/05/03/robust-promises-with-...</a>)?<p>Deferreds are\n  *  Mostly monadic (creating a deferred is \"return\", the \"then\" method is \"fmap\" and \"bind\").\n  * Can be implemented as a library, without a separate compilation step or having to patch the runtime.\n  * Avoids most of the CPS inversion of control madness. You can return and store promises and you can also add callbacks after the fact so code is much more flwxible. (writing sequential async loops is still annoying though)", "parent": 3485867.0, "deleted": null, "dead": null, "descendants": null, "id": 3488032, "ranking": null, "date": 1327026974000, "year": 2012}, {"by": "jvoorhis", "score": null, "time": 1327518803, "timestamp": 1327518803000, "title": "", "type": "comment", "url": "", "text": "Callback-centric code can be composable if you adhere to the continuation passing style (CPS) discipline. While it can be difficult to write CPS code directly, it's a well-trodden path in computer science.", "parent": 3511058.0, "deleted": null, "dead": null, "descendants": null, "id": 3511198, "ranking": null, "date": 1327518803000, "year": 2012}, {"by": "bascule", "score": null, "time": 1327518907, "timestamp": 1327518907000, "title": "", "type": "comment", "url": "", "text": "CPS is also generally used as an IR in compilers, not something you write by hand", "parent": 3511198.0, "deleted": null, "dead": null, "descendants": null, "id": 3511211, "ranking": null, "date": 1327518907000, "year": 2012}, {"by": "peterhunt", "score": null, "time": 1327519048, "timestamp": 1327519048000, "title": "", "type": "comment", "url": "", "text": "Yeah that's true, but using CPS for everything means you can't really use normal flow control anywhere which IMO makes it inappropriate to use for day-to-day engineering.", "parent": 3511198.0, "deleted": null, "dead": null, "descendants": null, "id": 3511225, "ranking": null, "date": 1327519048000, "year": 2012}, {"by": "dahlia", "score": null, "time": 1327520384, "timestamp": 1327520384000, "title": "", "type": "comment", "url": "", "text": "&#62; Node sucks for general web apps because you have to program everything asynchronously.<p>To be fair, the exact problem is not async itself, but forcing CPS (continuation-passing style) for serial routines.  For example, gevent and eventlet use greenlets (coroutines for Python) to avoid unnecessary callbacks in serial routines.", "parent": 3511255.0, "deleted": null, "dead": null, "descendants": null, "id": 3511333, "ranking": null, "date": 1327520384000, "year": 2012}, {"by": "chc", "score": null, "time": 1327522246, "timestamp": 1327522246000, "title": "", "type": "comment", "url": "", "text": "There's already a branch of CoffeeScript, called Iced CoffeeScript (<a href=\"http://maxtaco.github.com/coffee-script/\" rel=\"nofollow\">http://maxtaco.github.com/coffee-script/</a>), that does this. The example in the post would look like:<p><pre><code>  for blogPostId in recentBlogPostIds\n    await asynchronousDB.getBlogPostById blogPostId, defer(err, post)\n    templating.render post\n</code></pre>\nThough you still can't simply return the result \u2014 you'd have to use a continuation \u2014 but it does make it simple enough to use CPS in general.", "parent": 3510982.0, "deleted": null, "dead": null, "descendants": null, "id": 3511491, "ranking": null, "date": 1327522246000, "year": 2012}, {"by": "ufo", "score": null, "time": 1327526618, "timestamp": 1327526618000, "title": "", "type": "comment", "url": "", "text": "In this sense, I think the approach of extending Javascript with async features and compiling down to CPS (ala <a href=\"http://tamejs.org/\" rel=\"nofollow\">http://tamejs.org/</a>) has a lot of promise.", "parent": 3511247.0, "deleted": null, "dead": null, "descendants": null, "id": 3511799, "ranking": null, "date": 1327526618000, "year": 2012}, {"by": "apgwoz", "score": null, "time": 1327842083, "timestamp": 1327842083000, "title": "", "type": "comment", "url": "", "text": "IcedCoffeeScript works through a CPS transformation, not sure how you could do that as a library in CoffeeScript...?", "parent": 3523727.0, "deleted": null, "dead": null, "descendants": null, "id": 3525149, "ranking": null, "date": 1327842083000, "year": 2012}, {"by": "silentOpen", "score": null, "time": 1328231179, "timestamp": 1328231179000, "title": "", "type": "comment", "url": "", "text": "Lambda expressions implies currying because lambdas take only a single argument unless you think of function application as implicitly constructing a tuple of arguments (but JS lacks tuples and only offers maps and arrays). Javascript has first-class anonymous functions, not lambdas.<p>Closures in JS are broken due to everything being a reference cell by default. This causes closures to be annoying to construct correctly and more expensive than they should be. \"Functional\" languages typically treat mutation as a side-effect and require reference cells to be explicitly declared. This helps enforce function purity and referential transparency -- functional-ness.<p>\"Being careful about recursion\" is like being careful about looping except recursive expressions are a superset of succinct iterative expressions making Javascript weak when it comes to, say, describing state machines. Lack of TCO makes Javascript a terrible compile target as CPS is impossible.<p>Javascript is an ambiguous, unsafe, difficult-to-analyze language. It supports some constructs that look like constructs in functional languages but because it does not enforce any functional or type systemic restrictions, these features are mostly cargo.<p>If you write a recursive algorithm in Javascript, you pay like O(n) for stack frames. The same iterative algorithm costs O(1) for stack frames. Thus, many developers eschew recursion in favor of iteration. This means that the logical code that developers write <i>could</i> be both mathematically sound and run efficiently on the machine but instead developers must either resort to temporal reasoning or perform recursion -&#62; iteration transforms in their heads. This is broken.<p>Just because Javascript is ubiquitous doesn't mean it's good. I don't understand Javascript evangelists -- they seem to be spreading half-truths.", "parent": 3545221.0, "deleted": null, "dead": null, "descendants": null, "id": 3545293, "ranking": null, "date": 1328231179000, "year": 2012}, {"by": "njs12345", "score": null, "time": 1331744608, "timestamp": 1331744608000, "title": "", "type": "comment", "url": "", "text": "If it could be showed that most of the harm had occurred in Saudi Arabia and the conduct was also criminal in the UK, then it would be very similar to this case (such an extradition would be blocked for other reasons, but the question of forum is essentially the same).<p>It's likely that he would be found innocent if tried in the UK, which is why people are quite angry about it. No successful prosecutions have ever been brought in the UK in similar cases and the CPS wasn't going to prosecute him here.", "parent": 3703976.0, "deleted": null, "dead": null, "descendants": null, "id": 3704074, "ranking": null, "date": 1331744608000, "year": 2012}, {"by": "combataircraft", "score": null, "time": 1332442125, "timestamp": 1332442125000, "title": "", "type": "comment", "url": "", "text": "Better solutions are already provided by JavaScript itself. Event-driven programming was the idiomatic solution until CPS became the one everybody follows with the grow of NodeJS. See how NodeJS community deal with async programming.", "parent": 3741258.0, "deleted": null, "dead": null, "descendants": null, "id": 3741324, "ranking": null, "date": 1332442125000, "year": 2012}, {"by": "spamizbad", "score": null, "time": 1332647971, "timestamp": 1332647971000, "title": "", "type": "comment", "url": "", "text": "&#62; They also help, by identifying bad teachers and bad schools.<p>Not really.  Here in Chicago, the Noble charter high schools will often teach directly to the ACT.  This results in some dramatic boosting of ACT scores, with some schools taking kids from the dysfunctional CPS System and getting a school average of 23.  Unfortunately, once they reach college, they  see little academic success despite being straight-A students with 25+ ACT scores.<p>This has a detrimental impact on the curriculum:<p>1) The English program structured heavily around basic reading comprehension, with little to no emphasis on writing composition.  A students understanding of essay composition s roughly: \"Organize the things you want to talk about into paragraphs... then write a conclusion.\"  However, to their credit, they're <i>really</i> good at reading test questions.<p>2) Math is focused on teaching Pre-algebra fundamentals and then layering on test-specific Algebra, Geometric (with that goofy proof system), and basic Trig.  It's a sad, narrow sample of our already sad &#38; narrow HS math curriculum.  It covers few \"advanced\" Algebra and Trig subjects.  This means anyone who has to take \"college math\" will need courses in Trig and Precalc in college, with the possibility of an Algebra refresher course before proceeding.<p>3) Social Studies and Science?  All rote-to-test.  Students are drilled on step-by-step procedures on how to interpret graphs that'll score correctly on tests... without giving them actual knowledge on how to critically think about information - be it historical or scientific.<p>NCLB schools do the same song-and-dance, except with a much less rigorous test.  If you've actually seen the questions on most NCLB tests, you'd be disappointed.  Unfortunately, the composition of such tests is so political and messy it's impossible to provide any measure of quality.<p>You cannot assume testing will provide you accurate information or a better outcome for students.  If you're going to implement a testing regiment, you need to be very mindful of the Observer Effect:  You can very easily change the outcome by measuring it.  This is not an easy problem to solve.", "parent": 3749114.0, "deleted": null, "dead": null, "descendants": null, "id": 3751670, "ranking": null, "date": 1332647971000, "year": 2012}, {"by": "j2labs", "score": null, "time": 1332680919, "timestamp": 1332680919000, "title": "", "type": "comment", "url": "", "text": "&#62; The weakness of callbacks is the lack of multicore support.<p>You suggest that gevent won't work in preemptive environment if it wants to support multiple cores, alas I'm still not convinced as to why.<p>The greenlets are cooperatively scheduled coroutines, as we know, but with proper multicore support I don't see why they couldn't adapted to be preemptively scheduled. If we're imagining that Python now has multicore support, we can also imagine greenlets being updated to work with it. Assuming gevent would receive no modifications to work with such an important update to Python is why I accused you of speculating.<p>&#62; It's because gevent context switches on I/O events, not preemptively, so you have some control over when context switches happen.<p>That's correct. They are cooperatively scheduled coroutines. If someone wants to context switch, they can write code that does it or wait for I/O events. The lack of an explicit yield statement does not prevent coroutines from switching. In fact, greenlets are quite powerful here, more powerful than what's offered by Twisted and Tornado, because they don't have to yield directly to the caller. You <i>could</i> imitate CPS which is impossible with the explicit context switch model.<p>I am not disagreeing with you on this point, btw, just trying to be more explicit for other readers about the <i>cooperatively</i> scheduled nature.<p>Interested readers might want to check this out: <a href=\"http://en.wikipedia.org/wiki/Computer_multitasking#Cooperative_multitasking.2Ftime-sharing\" rel=\"nofollow\">http://en.wikipedia.org/wiki/Computer_multitasking#Cooperati...</a><p>&#62; I'm curious how large gevent code bases are in the wild<p>Well, eventlet itself was written to support Second Life and sits behind multiple big video games.<p>Gevent is in production use for many large companies, most notably Spotify. They are moving to gevent from twisted for performance and cleaner code.<p>&#62; I didn't realize when I started using Erlang I signed a contract saying that. I also write Ocaml, so I guess any criticism I levy against Java is a product of that too, not rational thought.<p>My statement is facetious, but the reality is that Erlang got concurrency right and Python is trying to glue concurrency ideas into the language as an afterthought. If Python didn't have it's lousy GIL we wouldn't have to pull such tricks to work concurrency into a single threaded system. Alas, it has the GIL.<p>Now, to conclude some of my thoughts, I believe gevent is an excellent way to build web systems. The coroutines are short-lived, exist to fetch some data with an easy nonblocking interface and then concat some strings together to produce the web page / API output.<p>If folks were building CPU bound systems it would straight-up be a mistake to use Python for that. Ocaml could be a better choice, alas, as you say, it has the same issue with a GIL though the computations would execute a LOT faster.", "parent": 3752213.0, "deleted": null, "dead": null, "descendants": null, "id": 3752489, "ranking": null, "date": 1332680919000, "year": 2012}, {"by": "bluesnowmonkey", "score": null, "time": 1332691021, "timestamp": 1332691021000, "title": "", "type": "comment", "url": "", "text": "I'm waiting for the day when everybody realizes that callbacks and preemptive threading both suck, relative to automatic CPS transformations.<p><a href=\"http://matt.might.net/articles/cps-conversion/\" rel=\"nofollow\">http://matt.might.net/articles/cps-conversion/</a>", "parent": 3750817.0, "deleted": null, "dead": null, "descendants": null, "id": 3752885, "ranking": null, "date": 1332691021000, "year": 2012}, {"by": "tomjen3", "score": null, "time": 1333737009, "timestamp": 1333737009000, "title": "", "type": "comment", "url": "", "text": "The problem is that the tech industries are nice guys. We aren't prepared to play to win, we won't bribe politicians, blackmail them with pictures of their affairs when they won't take the bribes, have the law firms involved debared, have the CPS take their children. Spread rumors and destroy the friendships, connections and trusts the lobbiests depend on.<p>That we cannot comeup with such ideas are \u00e5roperly a good thing but it is also a pretty large handicap when we are up against people like the MPAA (who, granted may not be playing as dirty as these suggestions).", "parent": 3808177.0, "deleted": null, "dead": null, "descendants": null, "id": 3808298, "ranking": null, "date": 1333737009000, "year": 2012}, {"by": "jashkenas", "score": null, "time": 1334093986, "timestamp": 1334093986000, "title": "", "type": "comment", "url": "", "text": "First, the relevant thread:<p><a href=\"https://github.com/jashkenas/coffee-script/pull/1942\" rel=\"nofollow\">https://github.com/jashkenas/coffee-script/pull/1942</a><p>It's not terribly likely that we'll see an IcedCoffeeScript merge soon, given that the basic needs that a merge would entail haven't been addressed. A few of them:<p>* We don't want to add helper libraries, like \"iced.Rendevous\", \"icedlib.Pipeliner\", or \"icedlib.timeout\" to our generated JS.<p>* Last time I checked, there was a significant slowdown even when compiling code that doesn't use \"iced\" features.<p>* For particulars on the grammar, @devongovett raises a number of worthwhile issues in the thread.<p>* There's still muddiness in the way that errors and exceptions are passed through the CPS transform.<p>* Some (important) edge cases like nested await blocks aren't handled yet, as far as I know.<p>... and so on.", "parent": 3824475.0, "deleted": null, "dead": null, "descendants": null, "id": 3824599, "ranking": null, "date": 1334093986000, "year": 2012}, {"by": "lucian1900", "score": null, "time": 1334834387, "timestamp": 1334834387000, "title": "", "type": "comment", "url": "", "text": "I think the OP refers to the syntax/API for each. If you're already using async APIs, adding a sync one that runs in a separate thread won't change much.<p>On the other hand, you need something like CPS or coroutines to cleanly use an async function in a program mostly using sync APIs.<p>Of course, if you have the right tools (CPS/coroutines) you can make any async API look sync, as you said.", "parent": 3862347.0, "deleted": null, "dead": null, "descendants": null, "id": 3862383, "ranking": null, "date": 1334834387000, "year": 2012}, {"by": "sergimansilla", "score": null, "time": 1334840909, "timestamp": 1334840909000, "title": "", "type": "comment", "url": "", "text": "Well put. It still puzzles me that promises and/or CPS don't have a greater adoption in the JavaScript community. I guess that what happens is that the concept of a callback is a very easy to understand one, but a system becomes more complicated and cumbersome (exponentially, I would say) with every new callback that is added to it. The real problem comes when creating big async applications in JavaScript based entirely in callbacks, as it is the norm now specially in NodeJS projects. Using callbacks to build complex applications is a sure way to un-maintainability.", "parent": 3862137.0, "deleted": null, "dead": null, "descendants": null, "id": 3862760, "ranking": null, "date": 1334840909000, "year": 2012}, {"by": "IsTom", "score": null, "time": 1334862387, "timestamp": 1334862387000, "title": "", "type": "comment", "url": "", "text": "CPS is best suited for intermediate code, it's not something to be written/read by humans as it's basically the same as goto.", "parent": 3862760.0, "deleted": null, "dead": null, "descendants": null, "id": 3864590, "ranking": null, "date": 1334862387000, "year": 2012}, {"by": "TomAnthony", "score": null, "time": 1335804188, "timestamp": 1335804188000, "title": "", "type": "comment", "url": "", "text": "Not in this instance, as the court case wasn't in the US, but in London.<p>In the UK the Crown Prosecution Service decides whether to prosecute, and that involves 'any views expressed by the victim' [1]. If the victim has withdrawn their complaint, then the CPS will decide whether prosecuting is in 'the public interest'.<p>1) <a href=\"http://www.cps.gov.uk/victims_witnesses/reporting_a_crime/decision_to_charge.html\" rel=\"nofollow\">http://www.cps.gov.uk/victims_witnesses/reporting_a_crime/de...</a>", "parent": 3909804.0, "deleted": null, "dead": null, "descendants": null, "id": 3910002, "ranking": null, "date": 1335804188000, "year": 2012}, {"by": "masklinn", "score": null, "time": 1335890632, "timestamp": 1335890632000, "title": "", "type": "comment", "url": "", "text": "&#62; Are you aware of any extra functionality gained by marking methods async?<p>As far as I know there isn't any, the gain is in code readability/simplicity from the POV of an imperative developer: async/await are hints which the compiler transforms into CPS by thunkifying code following an `await`. According to Eric Lippert's series on async/await[0], the compiler also performs complex code generation to try and make try/except blocks behave \"sensibly\" in this imperative-looking code. While necessary for the coding style, I still am not sure whether that's an advantage or a drawback of async/await.<p>&#62; It seems the new markup is more useful for frameworks. Think async action methods on controllers for mvc rather than your own little methods.<p>Technically, from outside the method `async T foo()` is no different from `Task&#60;T&#62; foo()` I believe, it's only the internal detail which change (mostly composing async callees and returning the result of an async chain). On the other hand (again this is something drawn from Eric's post) alongside async/await the framework team will add new APIs the Tasks API set, one of them being \"multiplexing\" of tasks (waiting for all tasks of a set of tasks, or any task of the set, although I'm sure the community has already implemented that separately)<p>[0] <a href=\"http://blogs.msdn.com/b/ericlippert/archive/tags/async/\" rel=\"nofollow\">http://blogs.msdn.com/b/ericlippert/archive/tags/async/</a>", "parent": 3914493.0, "deleted": null, "dead": null, "descendants": null, "id": 3915213, "ranking": null, "date": 1335890632000, "year": 2012}, {"by": "cjfrisz", "score": null, "time": 1336762353, "timestamp": 1336762353000, "title": "", "type": "comment", "url": "", "text": "I've spent a number of months working on using CPS and trampolining to add proper tail calls to Clojure. I have a video presenting my work here: <a href=\"http://www.chrisfrisz.com/blog/?p=220\" rel=\"nofollow\">http://www.chrisfrisz.com/blog/?p=220</a> . You can also take a look at the code here: <a href=\"https://github.com/cjfrisz/clojure-tco\" rel=\"nofollow\">https://github.com/cjfrisz/clojure-tco</a> .<p>The punchline is that there are several things you can do to improve your performance: first, a number of more efficient CPS algorithms have been developed over the last 10+ years. I currently use one presented by Danvy in the 2001 paper \"A First-Order One-Pass CPS algorithm\" linked here: www.brics.dk/RS/01/49/BRICS-RS-01-49.pdf . It's major focus is to distinguish between \"serious\" and \"trivial\" expressions, because the serious ones are the only ones that actually require a new continuation to be generated. This saves a lot of administrative redexes that can kill your performance.<p>Some other CPS-related avenues you may want to look into include \"The Essence of Compiling with Continuations\" (co-authored by one of my heroes, Amr Sabry) which formalizes A-normal form, an alternative to compiling with continuations that was ground-breaking in pointing out the number of unnecessary redexes introduced by traditional CPS algorithms. There's also a more recent paper by Andrew Kennedy at MS Research called \"Compiling with Continuations, Continued\" which I admittedly have not gotten a chance to dig into yet. It's stated goal is to revive some of the ideas of the original \"Compiling with Continuations\" by Andrew Appel.<p>Of course with the method you present, continuation application isn't your only performance hit. If you're using a trampoline, you're undoubtedly thunkifying the code to delimit the bounces on the trampoline. I also need to do some work in this area, but I'm familiar with at least one paper on doing minimal thunkification from 1993 and linked here: <a href=\"http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.158.7919\" rel=\"nofollow\">http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.158....</a> .<p>I'm a big fan of both CPS+trampolining and the work like ClojureScript that's bringing efficient Lisp programming to the JavaScript arena. I'm hoping to get a chance to look over the work that you've done with Outlet and I'd love to chat with you about it. It sounds like we share quite similar interests.", "parent": 3960488.0, "deleted": null, "dead": null, "descendants": null, "id": 3960710, "ranking": null, "date": 1336762353000, "year": 2012}, {"by": "jlongster", "score": null, "time": 1336763056, "timestamp": 1336763056000, "title": "", "type": "comment", "url": "", "text": "I already watched your video! It was one of the things that inspired me to try this. Some of it was over my head (not extremely involved in the academic world), but I'm at a place now where I can dig into clojure-tco and see what you've done.<p>Thanks for the papers, I'll look at them. I'm worried about spending a lot of time on this, only to realize that the performance hit is simply too large. I want this for debugging, and what I really want to try is to write a web-based byte code VM and compile Outlet to it. But the same concern exists there: can I get it fast enough to run sufficiently?<p>I'm leaning more towards the CPS route though. First of all, there's tons of research going into it. Secondly, I lose all the benefits of JIT-ed Javascript if I run it in a VM. There's actually a much higher chance that I'll be able to get CPS-ed code running fast than compiled byte code.<p>I admit that my current implementation is naive, and yes, the trampolines require even more thunks.<p>I'd love to talk, I'm very interested in this as well. How far has clojure-tco come? What's the performance hit, and how do you return code to the trampoline? I will look at your code soon, and be lurking around #clojure as jlongster.", "parent": 3960710.0, "deleted": null, "dead": null, "descendants": null, "id": 3960772, "ranking": null, "date": 1336763056000, "year": 2012}, {"by": "larsberg", "score": null, "time": 1336763524, "timestamp": 1336763524000, "title": "", "type": "comment", "url": "", "text": "1) Using one of the more efficient CPS transformations will help remove many stupid constructs that are harder to statically find later.<p>2) In our CPS-based intermediate representation, we rely heavily on control flow analysis (CFA) to enable many classic compiler optimizations (inlining, untupling, unreachable code elimination, cases where only one member of a datatype is constructed/destructed, etc.).<p>CPS is a great transformation and makes for a wonderful IR, but you have to pay a decent static analysis cost before you will be able to perform many classic optimizations and get great performance. That said, we've done pretty well (<a href=\"http://manticore.cs.uchicago.edu\" rel=\"nofollow\">http://manticore.cs.uchicago.edu</a> ), but it's taken years of development. I'd also like to second cjfrisz's pointer to Appel's green book. It's a fabulous introduction to compiling in a CPS-style IR, though you'll find you still have a fairly large performance gap if you don't implement the CFA-based versions of them.", "parent": 3960488.0, "deleted": null, "dead": null, "descendants": null, "id": 3960808, "ranking": null, "date": 1336763524000, "year": 2012}, {"by": "cjfrisz", "score": null, "time": 1336763772, "timestamp": 1336763772000, "title": "", "type": "comment", "url": "", "text": "I've been finishing up grad school for the past couple of weeks, so Clojure TCO hasn't seen updates for a while. One of the things on my to-do list for it is to do more extensive benchmarking, but I've thrown a lot of ad-hoc tests at it, and I'm getting remarkably close performance to standard Clojure code. Especially with your interest, I want to nail down some numbers to have solid performance comparisons.<p>I noticed that somebody commented about allocation being a big source of slow down. Someone suggested to me that if you have low-level enough access to your implementation, you can reuse the thunk after each invocation. It took me a while to get my head around it, and I'm not even sure it can be done in Clojure TCO. If you can change the contents of a underlying closure data structure, then you only have to allocate one thunk. I suspect that you're taking advantage of JavaScript's closures, so you may not have any more luck with it than me.<p>If you're interested, one of my next goals now that I'm done with school is to start writing about the algorithms that Clojure TCO uses. I want to write something fairly accessible that describes the Danvy CPS algorithm.", "parent": 3960772.0, "deleted": null, "dead": null, "descendants": null, "id": 3960835, "ranking": null, "date": 1336763772000, "year": 2012}, {"by": "jules", "score": null, "time": 1336771266, "timestamp": 1336771266000, "title": "", "type": "comment", "url": "", "text": "Why do you need to transform to CPS? The answer to your question will depend very much on your answer to that question. In the extreme if you are not doing anything with the CPS form, then probably the best optimization of the CPSed form will completely undo the CPS, transforming it back into direct style. Of course if you are actually making use of the CPS form, that's not possible anymore.<p>Depending on why you want CPS, you can apply the following strategy:<p>Keep all code in direct style. For each function, designate a special return token CaptureCont that indicates that the continuation should be captured. The source of this token will be callcc. After each function call you check if it returned a token, and if so, extend it with the continuation for the rest of the computation. Then on the main() function of your program, pass the continuation to the appropriate place. This strategy avoids most overhead in the common case: one if instanceof check plus a branch per function call.<p>For example, take this function:<p><pre><code>    def foo(x,a):\n      y = g(x)\n      return y+a\n</code></pre>\nTransform to:<p><pre><code>    class CaptureCont:\n      member target # the function that we will pass the continuation to once we finish constructing it\n      member partialCont # the part of the continuation captured so far\n      def extend(f):\n        newCC = new CaptureCont()\n        newCC.target = target\n        newCC.partialCont = lambda v: f(partialCont(v))\n      def invoke():\n        target(partialCont)\n\n    def foo(x):\n      y = g(x)\n      if y is CaptureCont:\n        # now y is the part of the continuation captured so far\n        # our job is to extend it with our stack frame\n        # and then return it so that the callee can build it up further\n        return y.extend(lambda y2: y2+a)\n      else:\n        return y+a\n</code></pre>\nInstead of just invoking main(), do this:<p><pre><code>    loop:\n      v = main()\n      if v is CaptureCont: v.invoke()\n      else: exit(v) # well I guess this is not necessary in JS\n</code></pre>\nEventually the CaptureCont will bubble up to main, and at that point main will invoke it so that the continuation is passed to the right target.<p>Callcc:<p><pre><code>    def callcc(f):\n      cc = new CaptureCont()\n      cc.target = f\n      cc.partialCont = lambda x: x\n      return cc\n</code></pre>\nThere are various optimizations that can be applied (like eliding the capture code for functions that you statically know don't call callcc and thus will never return CaptureCont), and this approach also (trivially) works for the more general delimited continuations. As described capturing the continuation is O(n) in the size of the stack. You can make it amortized O(1) with some more trickery by lazily rebuilding the stack, but the current approach is already blazingly fast in the case of no continuation capture. I'm really tired now, so there are probably lots of errors in the above description, so tread with caution. I don't know if this approach is new or not, but it probably isn't given that it's a fairly obvious approach to capture the stack. Does anybody know what it's called? Then the OP can find a better description.", "parent": 3960488.0, "deleted": null, "dead": null, "descendants": null, "id": 3961466, "ranking": null, "date": 1336771266000, "year": 2012}, {"by": "jlongster", "score": null, "time": 1336775319, "timestamp": 1336775319000, "title": "", "type": "comment", "url": "", "text": "That's a smart trick, and it's possible I might be able to do something like that.<p>The reason I want to do CPS is for debugging in the browser. I want to be able to control the stack, so when a breakpoint hits I can pause everything and step through the code. The browser is non-blocking so I need explicit control of the stack.<p>You're method is neat. My language doesn't support continuations, so I don't need them until I hit the debugging mode. You've made me curious if I can compile out both CPS-ed and non-CPS-ed versions of the code and somehow switch between them.", "parent": 3961466.0, "deleted": null, "dead": null, "descendants": null, "id": 3961775, "ranking": null, "date": 1336775319000, "year": 2012}, {"by": "jlongster", "score": null, "time": 1336777670, "timestamp": 1336777670000, "title": "", "type": "comment", "url": "", "text": "Wouldn't that be even slow though? Not only is it CPS code, but it's a program being interpreted by CPS code. I think I see what you're getting at though. Sounds neat; I definitely have a lot of new ideas for implementing CPS in a performant way now.<p>Outlet is a compiler which compiles straight to js, no interpretation.", "parent": 3961873.0, "deleted": null, "dead": null, "descendants": null, "id": 3961924, "ranking": null, "date": 1336777670000, "year": 2012}, {"by": "gliese1337", "score": null, "time": 1336778717, "timestamp": 1336778717000, "title": "", "type": "comment", "url": "", "text": "Not sure; I haven't got anything to benchmark my implementation against. My suspicion is that it would be faster because you get chains of interpreted-continuations-implemented-as-interpreting-closures that call each other normally, rather than trampolining absolutely everything. But I would not be surprised if I turn out to be completely wrong about that.<p>&#62; Outlet is a compiler which compiles straight to js, no interpretation.<p>Right; hence, you would have to include the implementation of the CPSed run time environment in the compiled output, just as you have to include the extra trampoline function when you do the current CPS transform.", "parent": 3961924.0, "deleted": null, "dead": null, "descendants": null, "id": 3961960, "ranking": null, "date": 1336778717000, "year": 2012}, {"by": "ericbb", "score": null, "time": 1336792437, "timestamp": 1336792437000, "title": "", "type": "comment", "url": "", "text": "Personally, I like the VM technique over compilation to JS source. With a VM, you can track the continuation by simple stack operations rather than furiously allocating JS closures. Think about the effect in memory: when you do a return in a VM, you just pop some stuff off the stack(s) and there is no closure left hanging around for the GC to collect.<p>The Dybvig \"Three implementations of scheme\" paper presents a really nice VM and Norvig's PAIP book presents a nice simple compiler for Scheme. Those are the two main sources that I've used for my simple compiler.<p>Edit: Also...<p>&#62; I lose all the benefits of JIT-ed Javascript if I run it in a VM.<p>But if you are using CPS, then your JS functions are going to be really small and the JIT won't have much to work with, right? It's not clear to me that the JIT will be more effective working on CPS JS given that you want to have fine-grained continuations for debugging.", "parent": 3960772.0, "deleted": null, "dead": null, "descendants": null, "id": 3962586, "ranking": null, "date": 1336792437000, "year": 2012}, {"by": "jlongster", "score": 6.0, "time": 1337706562, "timestamp": 1337706562000, "title": "Compiling to CPS Javascript (part 2): stepping debuggers, no callback hell, etc", "type": "story", "url": "http://jlongster.com/2012/05/18/cps-results.html", "text": "", "parent": null, "deleted": null, "dead": null, "descendants": 1.0, "id": 4008747, "ranking": null, "date": 1337706562000, "year": 2012}, {"by": "raganwald", "score": null, "time": 1337887174, "timestamp": 1337887174000, "title": "", "type": "comment", "url": "", "text": "My suggestion:<p>For some language X where Y \u201ccompiles to \u201c X, Y is a new language if it introduces <i>new semantics</i>. For example, pure functional semantics, or object-orientation, or pattern matching, or method flavours, or static typing.<p>One easy test for this is to ask whether compiling Y to X can be done in small chunks or whether it requires \u201cWhole program rewriting.\u201d For example, transforming a program with continuations into CPS requires whole-program rewriting. I would call any language that adds continuations to JavaScript a new language on that basis alone.<p>CoffeeScript is almost entirely local transformations. I think of it as JavaScript.", "parent": 4019922.0, "deleted": null, "dead": null, "descendants": null, "id": 4020073, "ranking": null, "date": 1337887174000, "year": 2012}, {"by": "cromwellian", "score": null, "time": 1338519339, "timestamp": 1338519339000, "title": "", "type": "comment", "url": "", "text": "Maybe you shouldn't comment on GWT if you don't know anything about it. Pretty much everything you state about GWT is wrong.<p>1) GWT does not emulate synchronous APIs. That would incredibly expensive to do, requiring the implementation of continuation emulation or CPS transformation of the entire program.<p>2) GWT does not advocate \"shielding\" the developer from DOM or CSS. You are free to use the widgets, or not, just as you are free to use JS libraries with widgets, or not.  The purpose of GWT isn't to hide the browser.<p>3) Most GWT programmers know how to interface with JS. I have not encountered any non-trivial GWT app that does not contain at least some portion that makes calls to JS.<p>4) On Javascript evolution. Sorry, Javascript has moved glacially slow. What has moved fast is the HTML5 API bindings. When ES6 arrives and GWT doesn't support it, then you have a point.<p>5) GWT is open source. It doesn't matter how big the GWT team is, it only matters how big the community is.<p>6) GWT UIs don't \"crash the browser\". Google derives the majority of its revenue from AdWords and AdSense, which are GWT, and if they were crashing customer's browsers like you say, I'm pretty sure Google would be in trouble.<p>GWT is a compiler. You can write bad code, or you can write good code.  In 2009 I ported jQuery to GWT. The resulting code was smaller than jQuery, and faster than all other competing libraries at the time. See the result here: <a href=\"http://www.youtube.com/watch?v=sl5em1UPuoI\" rel=\"nofollow\">http://www.youtube.com/watch?v=sl5em1UPuoI</a><p>I don't have anything against JS, and I don't think GWT is the right tool for every project, but I don't think you should respond to threads like this and make what appear to be authoritative statements which are obviously and completely false (synchronous calls)", "parent": 4051416.0, "deleted": null, "dead": null, "descendants": null, "id": 4051710, "ranking": null, "date": 1338519339000, "year": 2012}, {"by": "apgwoz", "score": null, "time": 1340020050, "timestamp": 1340020050000, "title": "", "type": "comment", "url": "", "text": "Does this provide a sane way to deal with callbacks? Obviously, in JavaScript you're writing callbacks all the time, and nested defs (think callbacks which call something that requires a callback... repeat) in Python are ugly and annoying. For example, try writing factorial in CPS style sometime in Python.", "parent": 4125376.0, "deleted": null, "dead": null, "descendants": null, "id": 4125948, "ranking": null, "date": 1340020050000, "year": 2012}, {"by": "gouranga", "score": null, "time": 1340621356, "timestamp": 1340621356000, "title": "", "type": "comment", "url": "", "text": "That is when you are questioned, not when you are arrested. You can keep quiet as long as you want. Technically the simpler your questioning and therefore statement is, the more ambiguity is available in court which goes in your favor whether guilty or innocent. During cross examination, any error you make ruins your credibility. No information = less errors. Choosing not to answer a question does not imply guilt - it's in the CPS prosecution guidelines.<p>With respect to solicitors, get a private one as well (preferably one who knowingly hates the police) rather than a duty solicitor as they are in the pockets of the police in the UK. They are one and the same - they eat, drink, socialise and funny handshake in the same locations.", "parent": 4155905.0, "deleted": null, "dead": null, "descendants": null, "id": 4155933, "ranking": null, "date": 1340621356000, "year": 2012}, {"by": "aes256", "score": null, "time": 1340626030, "timestamp": 1340626030000, "title": "", "type": "comment", "url": "", "text": "<i>&#62; Then he should be tried in the UK.</i><p>As it stands, the Crown Prosecution Service (CPS) in the UK have shown no interest in prosecuting O'Dwyer, but US authorities have.<p>Perhaps O'Dwyer should be begging the CPS to prosecute him...", "parent": 4156080.0, "deleted": null, "dead": null, "descendants": null, "id": 4156092, "ranking": null, "date": 1340626030000, "year": 2012}, {"by": "ashconnor", "score": null, "time": 1340626641, "timestamp": 1340626641000, "title": "", "type": "comment", "url": "", "text": "The CPS has the discretion to prosecute a case if they deem it within the public interest, so how is this case not now within the public interest? Even if it is only to halt the extradition process.", "parent": 4156092.0, "deleted": null, "dead": null, "descendants": null, "id": 4156119, "ranking": null, "date": 1340626641000, "year": 2012}, {"by": "gouranga", "score": null, "time": 1340632378, "timestamp": 1340632378000, "title": "", "type": "comment", "url": "", "text": "The magistrate said that the CPS and police had made a mockery of the legal system and that he was striking the case off. CPS solicitor was reprimanded verbally. I was awarded costs of 300 pounds. Lasted about 5 mins after that.", "parent": 4156391.0, "deleted": null, "dead": null, "descendants": null, "id": 4156472, "ranking": null, "date": 1340632378000, "year": 2012}, {"by": "cabalamat", "score": null, "time": 1340642499, "timestamp": 1340642499000, "title": "", "type": "comment", "url": "", "text": "&#62; A UK judge has also ruled the allegations, if true, would also constitute an offence under UK law<p>A questionable assertion, given that:<p>1. in the only BitTorrent tracker case to have come to court, Oink, the defendant was found not guilty <a href=\"http://www.telegraph.co.uk/news/uknews/crime/6998784/Oink-music-sharing-website-creator-cleared-of-fraud.html\" rel=\"nofollow\">http://www.telegraph.co.uk/news/uknews/crime/6998784/Oink-mu...</a><p>2. the CPS (UK prosecuting authority) regard running a BitTorrent tracker to be \"a civil rather than a criminal matter\" <a href=\"http://www.telegraph.co.uk/technology/news/8345801/Prosecutors-drop-piracy-case-against-film-sharing-website.html\" rel=\"nofollow\">http://www.telegraph.co.uk/technology/news/8345801/Prosecuto...</a>", "parent": 4156053.0, "deleted": null, "dead": null, "descendants": null, "id": 4157294, "ranking": null, "date": 1340642499000, "year": 2012}, {"by": "bad_user", "score": null, "time": 1340647628, "timestamp": 1340647628000, "title": "", "type": "comment", "url": "", "text": "<p><pre><code>      That makes the CLR far more pleasant to use as a \n      compiler backend than the JVM (the reason why \n      JVM-based languages use the JVM primarily is probably \n      to hook into the JVM ecosystem, not because they love\n      devising workarounds to implement closures or value \n      types somewhat efficiently).\n</code></pre>\nThat's not true.<p>The JVM has inherent advantages that the CLR does not have ...<p>(1) the JVM can inline virtual method calls and with some machinery attached (bytecode manipulation) you can get pretty close to zero overhead when invoking functions dynamically (the reason for why dynamic languages on top of the JVM have been pretty awesome)<p>On implementing closures efficiently ... you should check your facts, because delegate invocation on top of .NET always has overhead compared to plain method invocation, while on top of the JVM you can make it so that those invocations will be inlined at runtime (in server mode the JVM even inlines method calls made through plain reflection, which is considered extremely expensive).<p>Implementations such as JRuby successfully do this, but because of JRuby's nature, the call-stack sometimes gets too tall, beyond the capabilities of the JVM to inline, however this is addressed with the InvokeDynamic support from JDK 7, which will make dynamic method calls as efficient as normal calls.<p>Because the CLR is not capable of such optimizations, compiler authors have to do a lot of optimizations ahead-of-time, while on the JVM even a dumb compiler can produce good results ... for proof, compile 2 binaries from the same source-code, one with the Mono compiler, the other one with the official compiler, then run on the same platform and compare.<p>(2) compiler writers love the Jar/.class formats, being really easy to produce binaries for Java, coupled with the maturity of libraries such as ASM ... contrast this with the CLR .dll format, for which the .pdb format for attaching debugging symbols is proprietary and NOT documented, which pushed the people working on Mono to come up with their own format (.mdb). Of course, through reverse engineering and through some code that Microsoft published, the interoperability of Mono with .pdb has improved lately, but it's still painful.<p>(3) there are many tools available for the JVM that complement compiler authors, tools like ObjectWeb's ASM, which have poor substitutes for .NET. And if you want a good parser generator, there are plenty to choose from for Java, while for .NET the only reasonable choice being Antlr, which is primarily a Java tool that also supports .NET -- on the other hand if you wanted to express your grammar with PEGs I personally couldn't find an option for .NET, while there are several available for the JVM.<p>(4) the features in .NET that are not used in C# have received poor support. For instance <i>tail calls</i> were NOT guaranteed to be eliminated, even if you specified this behavior in the compiled bytecode. But more than this, tail-calls have severe overhead over plain method calls. And did I mention that tail-call optimizations, as produced by the F# compiler, simply won't work reliably on Mono?<p>On value types, this is not such a huge issue as many people think. In Scala there's the proposal SIP 15 (value classes) which are implemented in the latest Scala 2.10 milestone release. This will open the door to much needed primitives, like unsigned ints: <a href=\"http://docs.scala-lang.org/sips/pending/value-classes.html\" rel=\"nofollow\">http://docs.scala-lang.org/sips/pending/value-classes.html</a><p>Also, you're making a mistake if you think the CLR type system doesn't have flaws. For instance the CLR lacks a Union type, which makes it a bitch to implement lazy languages, such as Haskell.<p>The CLR also lacks anything that would aid in implementing continuation-passing-style. The JVM doesn't have anything for it either, however for the JVM exceptions can be used for unwinding the call-stack efficiently and compared with the CLR, exceptions on the JVM are very, very cheap.<p>This coupled with bytecode manipulation and library authors have been able to build libraries that make use of CPS efficiently.<p>(5) P/Invoke is basically JNA ... <a href=\"https://github.com/twall/jna\" rel=\"nofollow\">https://github.com/twall/jna</a><p>C# does make it easier because it has a couple of primitives that make the marshaling of data easier.", "parent": 4156381.0, "deleted": null, "dead": null, "descendants": null, "id": 4157730, "ranking": null, "date": 1340647628000, "year": 2012}, {"by": "tikhonj", "score": null, "time": 1341259200, "timestamp": 1341259200000, "title": "", "type": "comment", "url": "", "text": "The problem is that the tutorial was transliterated from Haskell. So while it's useful for understanding the idea behind monads, the examples are not very motivating in a language like JavaScript. The one interesting example in the article for actual JavaScript use is probably the list monad which lets you compose functions returning an arbitrary number of results rather than just one (these functions are often called \"nondeterministic\").<p>However, it's possible to imagine other useful monads for JavaScript use. For example, I think we can abstract over CPS (continuation-passing style, like asynchronous functions in Node.js) functions using a monad.<p>This will involve changing our idea of CPS a little bit: instead of having a function f(x, k) where x is the argument and k is the callback, let's have a function f(x) which returns a function g(k) with x and k being the argument and callback respectively. Now we have to define the basic monad functions on it.<p>First, let's start with unit (which is called \"return\" in Haskell). The idea is simple: we want to go from some value to a function accepting a callback. What is a reasonable way to do this? Let's define it in a trivial way: we go from x to a function that, given a callback, immediately calls it with x. So:<p><pre><code>    CPS.unit = function (x) {\n      return function (k) {\n        k(x);\n      };\n    };\n</code></pre>\nNext, we want to define bind. Now, what will bind do? The core idea is this: given a wrapped value m x and a function f: x \u2192 m y, we need to apply f to the wrapped value. Now, in this context, the \"wrapped value\" is a function accepting a callback. Essentially, this wrapped value is a promise to provide x at some point in the future. So we want to take this \"promise\" and get a new promise for the result of calling <i>another</i> CPS function on it. Here is a way to do this:<p><pre><code>    CPS.bind = function (f, x) { // f: x \u2192 m y, x: m x\n      return function (k) {\n        x(function (x_val) {\n          f(x_val)(k);\n        });\n      };\n    }; \n</code></pre>\nAdmittedly, this code is a little confusing; I will try to explain it. The basic idea is simple: we create a <i>new</i> promise (the outermost returned function) that will trigger <i>after</i> x triggers and will then pass both the result of x (x_val) and the given callback (k) into f. That is, we get a promise of the result of f called with the eventual value of x.<p>This lets us bind together all these asynchronous values so that the result is still asynchronous. This makes managing \"callback hell\" simpler: instead of having a ton of nested callbacks, we can have a string of calls to bind. We also get a bunch of functions for free. For example, let's say you have a deferred x and want to apply a function to the result. This is essentially mapping the function over the deferred value. You could write it like this:<p><pre><code>    CPS.map = function (f, x) {\n      return CPS.bind(compose(CPS.unit, f), x);\n    }\n</code></pre>\nHowever, the true power of monads is that this map function works exactly the same way on <i>every</i> monad. So you could rewrite it like this:<p><pre><code>    Monad.prototype.map = function (f, x) {\n      return this.bind(compose(this.unit, f), x);\n    }\n</code></pre>\nthen make all your monad \"types\" (for lack of a better word) inherit from Monad. So the CPS type I showed here would get map for free, but so would an analogous List type.<p>Moreover, this is true for a whole <i>bunch</i> of useful functions. For example, you would be able to generalize reduce to accept a reducer function that behaves like a monad instead of like a normal function (you could call it reduceM). So you would then be able to reduce using an asynchronous function! I think that's pretty cool.<p>Note that it isn't enough just to write unit and bind to get a monad--the functions also have to follow some laws. If these laws aren't followed, you get all sorts of weird behavior with your monad. I <i>think</i> my CPS instance follows these laws, but I'm too lazy to check just this moment. I'll leave it as an exercise to the reader (I've always wanted to say that).<p>The reason we have to do some extra legwork (like creating the CPS object) is that JavaScript is not good at differentiating between types. Particularly, there is no way to consider <i>only</i> CPS functions. Additionally, there is a valid monad instance for <i>all</i> functions which behaves differently from the CPS one, and there would be no way to differentiate between the two without making it explicit. Now, I'm sure there is a neat way to make bind and unit methods of appropriate types, but that would make the examples even more complicated and I don't want to think about it right now :P.<p>In summary: monads let you generalize over a bunch of different concepts, not just IO. In particular, you can use monads to write code that works generically over CPS functions and nondeterministic functions and a bunch of others.<p>EDIT: I forgot to note: promises already have a well-known meaning in JavaScript. I don't actually know that meaning because I've never used them. The only reason I use the word is because I couldn't think of anything better to call them. It's likely the semantics of existing promises and the semantics of the objects I described are actually different, but they do serve the same purpose.", "parent": 4189272.0, "deleted": null, "dead": null, "descendants": null, "id": 4190656, "ranking": null, "date": 1341259200000, "year": 2012}, {"by": "tikhonj", "score": null, "time": 1341259453, "timestamp": 1341259453000, "title": "", "type": "comment", "url": "", "text": "If you like this sort of thing, check out the Arrowlets[1] library for JavaScript. It uses \"arrows\", an abstraction in a similar vein to monads, to make CPS functions and event handling neater (among other things).<p>[1]: <a href=\"http://www.cs.umd.edu/projects/PL/arrowlets/\" rel=\"nofollow\">http://www.cs.umd.edu/projects/PL/arrowlets/</a><p>From playing around with it, I think the arrows from that library are more useful to practical JavaScript programming than monads.", "parent": 4189082.0, "deleted": null, "dead": null, "descendants": null, "id": 4190676, "ranking": null, "date": 1341259453000, "year": 2012}, {"by": "georgespencer", "score": null, "time": 1341311428, "timestamp": 1341311428000, "title": "", "type": "comment", "url": "", "text": "I thought that the CPS said he could have been prosecuted in the UK, but that they weren't interested in doing it (I might be wrong on that).", "parent": 4193376.0, "deleted": null, "dead": null, "descendants": null, "id": 4193399, "ranking": null, "date": 1341311428000, "year": 2012}, {"by": "IsaacSchlueter", "score": null, "time": 1342114841, "timestamp": 1342114841000, "title": "", "type": "comment", "url": "", "text": "&#62; It feels like coding directly against system calls in C.<p>I disagree.  Coding directly against system calls is much harder in C, because you don't have the advantage of closures and flexible typing.  But, that aside, node <i>is</i> intended to be a very low-level library that facilitates higher-level extensions and abstractions in userland.  It is more like C than it is like Python, and that is by design.<p>Node is JavaScript on the server.  It is not JavaScript-like, or Compiles-to-JavaScript, or Erlang-with-semicolons-and-braces on the server.  We don't mess around with the language runtime, we take it mostly as-is, and there is a huge benefit to doing that.<p>When and if V8 implements generators (as they are likely to do somewhat soon), then I expect we'll see a lot of experimentation in this area in userland modules.  They'll have to be run with a --harmony_generators flag, most likely, but they won't need to be compiled or do scary bad-touch things with threads and stacks.<p>When the area has been explored a bit in those userland modules, and one or a few of them are popular and good and intuitive to use, and V8 moves generators out from behind a flag, and they're fast enough to be used in node without introducing performance regressions, then we'll investigate adding something like this to node-core.<p>Part of the reason why you meet such backlash from people in the Node community when you complain about \"callback hell\" is that the model <i>is</i> very simple, and it really is not as bad as it looks at first.  JavaScript's bulky \"function\" keyword does make CPS quite a bit uglier than it is in Scheme, but it's a very reasonable approach to the problem which is extremely extensible.<p>The crappiest part in my opinion is doing `if (er) return cb(er)` all the damn time.  Domains make that a little bit easier, but you're just trading one bit of boilerplate for another, so I don't know.  Generators are probably the ideal approach to that problem, but I'm personally not sure they're worth the complexity cost they introduce.  I am often wrong, and try to be quick to admit it.  We'll see how they change the shape of things once they're a real thing and not just an idea.<p>In the meantime, use named functions.  Use the \"async\" utility.  Use Stream interfaces and .pip() them to one another.  And most of all, <i>Don't write big apps!  Write small modules that each do one thing, and assemble them into other modules that do a bigger thing</i>.  You can't get into callback hell if you don't go there.", "parent": 4234679.0, "deleted": null, "dead": null, "descendants": null, "id": 4235630, "ranking": null, "date": 1342114841000, "year": 2012}, {"by": "drostie", "score": null, "time": 1342518139, "timestamp": 1342518139000, "title": "", "type": "comment", "url": "", "text": "I had read this story a couple years back and the way Steven Pete remembers Child Protective Services is a bit different from how his mum remembers it:<p><pre><code>    &#62; Once, CPS told the Petes they wanted to remove Steven, then a toddler,\n    &#62; for two months of observation at a Seattle hospital.\n    &#62;\n    &#62; \"I said to them, 'OK, but will somebody be watching him 24 hours a\n    &#62; day?' They said, 'Oh yes.' \"\n    &#62;\n    &#62; In the hospital, \"He broke his foot, and they didn't discover it until\n    &#62; a day and half later. They had no idea when or how it happened. Child\n    &#62; Services said they realized what we were going through. They worked\n    &#62; with us on it. They were really nice.\"\n</code></pre>\nThere's other stuff -- another sufferer and a lot more details -- in the article I'd read: <a href=\"http://tdn.com/lifestyles/article_e230b156-b22e-11df-93d9-001cc4c002e0.html\" rel=\"nofollow\">http://tdn.com/lifestyles/article_e230b156-b22e-11df-93d9-00...</a><p>Anyway, this community, I think, cares a lot about pushing yourself to succeed, but knows the price of burnout that can be associated with that. These people just have this physically: rather than some sort of abstract 'laziness' we normally have 'pain' which slows us down, and while pushing past a little pain is usually good -- it gets you running and developing muscle -- there is serious pain which tells you 'something is wrong, you're about to injure yourself' which you fortunately can't easily push past. Well, these guys can, and it leads to real injury. There's a deep connection here somewhere between the mental fatigue and physical fatigues.", "parent": 4254075.0, "deleted": null, "dead": null, "descendants": null, "id": 4254944, "ranking": null, "date": 1342518139000, "year": 2012}, {"by": "kposehn", "score": null, "time": 1343341682, "timestamp": 1343341682000, "title": "", "type": "comment", "url": "", "text": "&#62; Facebook now has independent ROI data from more than 60 advertising campaigns using a variety of third-party methodologies like panels and marketing mix models. The results show that 70% of campaigns resulted in a return on ad spend of 3x or better, and 49% of campaigns showed a return on ad spend of 5x or better.<p>This has pretty much been my experience in CPA and CPS on FB for 3+ years (in the 5x bracket most of the time). I'm glad to see this data finally backed up by Facebook.", "parent": 4298416.0, "deleted": null, "dead": null, "descendants": null, "id": 4299076, "ranking": null, "date": 1343341682000, "year": 2012}, {"by": "Mordor", "score": null, "time": 1343388224, "timestamp": 1343388224000, "title": "", "type": "comment", "url": "", "text": "Can this guy sue the CPS for the damage they've caused him?", "parent": 4300635.0, "deleted": null, "dead": null, "descendants": null, "id": 4300884, "ranking": null, "date": 1343388224000, "year": 2012}, {"by": "jgrahamc", "score": null, "time": 1343397954, "timestamp": 1343397954000, "title": "", "type": "comment", "url": "", "text": "Her actual tweets read:<p>CPS owe my constituent @pauljchambers and the country a huge apology for a shameful prosecution that should never have been brought<p>Two years of a man's life, stress and massive public costs wasted over an obvious joke. It is for Parliament to investigate actions here.<p>Whether it is the Justice or Home Affairs Select Cttee, the CPS and this decision should be investigated on Parlt return #twitterjoketrial<p>I think she's asking that parliament look into why the CPS ever brought this to trial in the first place.", "parent": 4300847.0, "deleted": null, "dead": true, "descendants": null, "id": 4301442, "ranking": null, "date": 1343397954000, "year": 2012}, {"by": "andyking", "score": null, "time": 1343399743, "timestamp": 1343399743000, "title": "", "type": "comment", "url": "", "text": "Comment by jgrahamc that has been inexplicably dead-ed:<p><i>Her actual tweets read:<p>CPS owe my constituent @pauljchambers and the country a huge apology for a shameful prosecution that should never have been brought<p>Two years of a man's life, stress and massive public costs wasted over an obvious joke. It is for Parliament to investigate actions here.<p>Whether it is the Justice or Home Affairs Select Cttee, the CPS and this decision should be investigated on Parlt return #twitterjoketrial<p>I think she's asking that parliament look into why the CPS ever brought this to trial in the first place.</i>", "parent": 4300847.0, "deleted": null, "dead": null, "descendants": null, "id": 4301597, "ranking": null, "date": 1343399743000, "year": 2012}, {"by": "uberalex", "score": null, "time": 1343404722, "timestamp": 1343404722000, "title": "", "type": "comment", "url": "", "text": "For me, the blame lies principally with the CPS and the Police, who should have exercised their judgment and not prosecuted.", "parent": 4301295.0, "deleted": null, "dead": null, "descendants": null, "id": 4302020, "ranking": null, "date": 1343404722000, "year": 2012}, {"by": "coob", "score": null, "time": 1343404825, "timestamp": 1343404825000, "title": "", "type": "comment", "url": "", "text": "CPS has nothing to do with Parliament.", "parent": 4301998.0, "deleted": null, "dead": null, "descendants": null, "id": 4302027, "ranking": null, "date": 1343404825000, "year": 2012}, {"by": "daredevildave", "score": null, "time": 1343406434, "timestamp": 1343406434000, "title": "", "type": "comment", "url": "", "text": "I believe the police recommended that no charges be pressed but the CPS went ahead anyway.", "parent": 4302020.0, "deleted": null, "dead": null, "descendants": null, "id": 4302163, "ranking": null, "date": 1343406434000, "year": 2012}, {"by": "tikhonj", "score": null, "time": 1343679650, "timestamp": 1343679650000, "title": "", "type": "comment", "url": "", "text": "I actually had a very similar revelation in JavaScript. Using Haskell-style arrows to abstract over things like events and CPS functions is really great for that sort of code.<p>The real beauty of these concepts is that they are <i>not</i> tied to just one logical thing. They're applicable to callbacks and networking, but then they translate effortlessly to handling errors or early termination or non-determinism.", "parent": 4314368.0, "deleted": null, "dead": null, "descendants": null, "id": 4314471, "ranking": null, "date": 1343679650000, "year": 2012}, {"by": "Daniel_Newby", "score": null, "time": 1343831189, "timestamp": 1343831189000, "title": "", "type": "comment", "url": "", "text": "&#62; They should come out and say we don't care how much weed you smoke, we're not going to drug test you now or ever, we just don't care what you do in your free time.<p>The threat is that a foreign nation will take over a DEA field office and blackmail you. \"We can overlook the pot this time if you cooperate and wear this wire. Don't cooperate and we'll do an asset forfeiture on your house and report your kids to CPS for being homeless.\" In a few months you'll be doing dead drops for a Chinese handler and thinking you are doing the right thing for family and country.<p>It is not about drugs but the abject corruption of the War on Drugs.<p>Polygraph interviews are not anout ferreting out all secrets, they are about finding how hard it is to get secrets out of you.", "parent": 4322192.0, "deleted": null, "dead": null, "descendants": null, "id": 4323023, "ranking": null, "date": 1343831189000, "year": 2012}, {"by": "amasad", "score": 1.0, "time": 1344280955, "timestamp": 1344280955000, "title": "Writing Interpreters in JavaScript using CPS and Trampolining to avoid blocking", "type": "story", "url": "http://blog.amasad.me/2012/07/17/on-vms-in-javascript/", "text": "", "parent": null, "deleted": null, "dead": null, "descendants": 0.0, "id": 4346781, "ranking": null, "date": 1344280955000, "year": 2012}, {"by": "admg", "score": null, "time": 1345207694, "timestamp": 1345207694000, "title": "", "type": "comment", "url": "", "text": "I can't believe what I've just read. A civil case yeah why not but criminal charges and imprisonment from a private entity after the CPS have basically said its not worth it? Scary.", "parent": 4395771.0, "deleted": null, "dead": null, "descendants": null, "id": 4396076, "ranking": null, "date": 1345207694000, "year": 2012}, {"by": "_delirium", "score": null, "time": 1345213688, "timestamp": 1345213688000, "title": "", "type": "comment", "url": "", "text": "English law has only partly transitioned to public prosecutions. Private prosecutions are still legally the norm, but CPS prosecuting a case is de-facto the norm, as they have the right to take over a private prosecution. In most cases, CPS either takes over a case and prosecutes it, or takes over a case and drops the charges (if evidence is wholly insufficient, or continuing prosecution is against public policy). But this leaves the awkward vestigial category: cases that CPS chooses neither to intervene to prosecute <i>nor</i> to intervene to drop, which can go forward at a private party's own expense.<p>(Note: Only true of English/Welsh law; Scots law makes it much harder to bring a private prosecution.)", "parent": 4396076.0, "deleted": null, "dead": null, "descendants": null, "id": 4396491, "ranking": null, "date": 1345213688000, "year": 2012}, {"by": "waqf", "score": null, "time": 1345215769, "timestamp": 1345215769000, "title": "", "type": "comment", "url": "", "text": "Yes, that's right.  For example the RSPCA, a private charity, brings its own prosecutions against alleged animal abusers, something that the CPS (government prosecutors) might not want to spend time and money on.", "parent": 4396610.0, "deleted": null, "dead": null, "descendants": null, "id": 4396678, "ranking": null, "date": 1345215769000, "year": 2012}, {"by": "lmacvittie", "score": 1.0, "time": 1345476783, "timestamp": 1345476783000, "title": "Architecting Scalable Infrastructures: CPS versus DPS", "type": "story", "url": "https://devcentral.f5.com/weblogs/macvittie/archive/2012/08/20/architecting-scalable-infrastructures-cps-versus-dps.aspx", "text": "", "parent": null, "deleted": null, "dead": true, "descendants": -1.0, "id": 4408034, "ranking": null, "date": 1345476783000, "year": 2012}, {"by": "ryanmolden", "score": null, "time": 1345610179, "timestamp": 1345610179000, "title": "", "type": "comment", "url": "", "text": "Did you mean CPS instead of CSP? Not trying to be snarky/pedantic, just making sure there isn't some acronym in this space I am unfamiliar with (not entirely unlikely :)).<p>Edit: nope, you probably meant CSPs (<a href=\"http://en.wikipedia.org/wiki/Communicating_sequential_processes\" rel=\"nofollow\">http://en.wikipedia.org/wiki/Communicating_sequential_proces...</a>), sorry.", "parent": 4416041.0, "deleted": null, "dead": null, "descendants": null, "id": 4416057, "ranking": null, "date": 1345610179000, "year": 2012}, {"by": "eckyptang", "score": null, "time": 1346615358, "timestamp": 1346615358000, "title": "", "type": "comment", "url": "", "text": "Indeed. I've recently had an issue along those lines albeit on a lesser scale as a witness. The police were more interested in securing a good case for the CPS than actually fairly evaluating the situation. I was actually advised that my statement should only refer to the facts which were likely to aid a conviction rather than be a fair and balanced account of what happened. The moment a conviction was not obviously going to happen, they recommended that I withdraw my statement before they submit the case to the CPS.<p>I wrote an addendum sheet for the statement instead stating that they'd asked me to do that. That didn't go down well so I better move to another area if I want any policing or assistance in the future...<p>For ref, no-one was hurt other than insurance companies in this case. Two idiots bounced a car off each other at 20mph - neither need prosecuting.", "parent": 4467760.0, "deleted": null, "dead": null, "descendants": null, "id": 4467904, "ranking": null, "date": 1346615358000, "year": 2012}, {"by": "marshray", "score": null, "time": 1347176403, "timestamp": 1347176403000, "title": "", "type": "comment", "url": "", "text": "<i>Of course assembly isn't going away, but other than the Kernel and device drivers, there's not much reason to use it else where.</i><p>Assembly largely has gone away. It used to be that <i>all</i> serious PC apps were written in asm. Eventually though, C compilers and RAM improved enough to not require that. Today the only things written in asm tend to the absolute lowest-level system routines and a few hand-tuned loops.<p>But you might also be interested to know that MS embeds the web server in the kernel using async IO (http.sys) and that the WinHTTP client library runs async as well.<p><i>Coroutines are a much better way to write performant network services.</i><p>I agree native coroutines or CPS would better. There are better choices of development language than Javascript, too.<p>But it's not the tool, it's the hand and the attitude that wields the tool that determines the quality of the result.", "parent": 4495203.0, "deleted": null, "dead": null, "descendants": null, "id": 4495241, "ranking": null, "date": 1347176403000, "year": 2012}, {"by": "marshray", "score": null, "time": 1347177650, "timestamp": 1347177650000, "title": "", "type": "comment", "url": "", "text": "I agree that FP, Lisp, and CPS are rewarding. I find async IO very appealing because so very often I've had to implement imperfect workarounds when it wasn't available.<p>But I still feel <i>really</i> conflicted about Javascript.", "parent": 4495246.0, "deleted": null, "dead": null, "descendants": null, "id": 4495279, "ranking": null, "date": 1347177650000, "year": 2012}, {"by": "jlouis", "score": null, "time": 1347194095, "timestamp": 1347194095000, "title": "", "type": "comment", "url": "", "text": "I agree that the Node.js model of concurrency is one of the weakest models out there. CPS is for the compiler writer, not for the programmer.<p>The underlying problem is that sequential languages do bad when you \"bolt on\" concurrency to them - unless said language is expressive enough to make it bearable (Haskell and some MLs come to mind). For all other language, you are just frankensteining your system.<p>The reactor-model, of which Twisted, Node.js and a couple of like systems are built around has one advantage: It is fairly easy to get going. It is by far the simplest model you can get bolted onto a system with relative ease. The crux of the problem is that we have a lot of sequentially oriented programmers who suddenly need to do full concurrency. This is the first attempt.<p>To a professional Erlang programmer like me, it does look rather odd that one would hail a reactor model as being anything decent to work with. There are other concurrent calculi out there, which may be better than what Erlang provides, but none of them worries about callbacks in the style of Node.<p>I have a hunch the kid must be dragged screaming into the concurrency shop.", "parent": 4495305.0, "deleted": null, "dead": null, "descendants": null, "id": 4495635, "ranking": null, "date": 1347194095000, "year": 2012}, {"by": "adrianhoward", "score": null, "time": 1350302505, "timestamp": 1350302505000, "title": "", "type": "comment", "url": "", "text": "Of course in the UK we don't have a right to free speech. It's defined by the gaps between laws that limit speech in some contexts. In theory we do have Article 10 of the European Convention on Human Rights, but that has so many riders that it's not of huge use.<p>Most of the set of current prosecutions in the UK are happening under section 127 of the Communication Act of 2003 - <a href=\"http://www.cps.gov.uk/legal/a_to_c/communications_offences/#an11\" rel=\"nofollow\">http://www.cps.gov.uk/legal/a_to_c/communications_offences/#...</a>.<p>There's a nice dissection of the reasons behind the problems with this bit of legalisation over here <a href=\"http://blogscript.blogspot.co.uk/2012/09/section-127-communications-act-2003.html\" rel=\"nofollow\">http://blogscript.blogspot.co.uk/2012/09/section-127-communi...</a><p>The legislation almost certainly won't last in it's current state. The CPS are already running round tables to discuss the problems <a href=\"http://blog.cps.gov.uk/2012/10/points-for-discussion-for-social-media-roundtables.html\" rel=\"nofollow\">http://blog.cps.gov.uk/2012/10/points-for-discussion-for-soc...</a> and the case-law with won appeals by folk like the airport guy will help too.", "parent": 4654278.0, "deleted": null, "dead": null, "descendants": null, "id": 4654692, "ranking": null, "date": 1350302505000, "year": 2012}, {"by": "barrkel", "score": null, "time": 1351878037, "timestamp": 1351878037000, "title": "", "type": "comment", "url": "", "text": "Along with a trampoline, callbacks can be used to implement continuation passing style (CPS), which is more or less a fully generalized goto - not just static goto, but computed goto. CPS is sometimes called \"goto with parameters\".", "parent": 4733363.0, "deleted": null, "dead": null, "descendants": null, "id": 4733811, "ranking": null, "date": 1351878037000, "year": 2012}, {"by": "chubbard", "score": null, "time": 1351892308, "timestamp": 1351892308000, "title": "", "type": "comment", "url": "", "text": "Two observations.  First, great how do we debug it?  How can we see our signals between each step?  How about beyond simple print/logging?<p>And two, I like his contrast between async vs synchronous flows, and recognizing synchronous style programming has many benefits that CPS doesn't.  However, I think even this style still hasn't solved the bigger problem with asynchronous style programming.  The ability to reuse it easily.  In synchronous style programming I can reuse code and add to that block by calling the method, then after that method is done add my code.<p><pre><code>   ... my code before ...\n   var result = someMethod()\n   ... my code after ...\n</code></pre>\nIt's just that simple with synchronous style.  With async style the author has to provide you a hook to hook onto the end or beginning of this flow (adding a callback param, returning a promise, etc).  I think even with using signals you have the same issue.  Without explicit hooks you can't hook more code onto it like you can with good old fashion synchronous programming.  Not to mention error control flow is turned upside down too.<p>I'm intrigued by the ideas of signals over callbacks, but I don't know if they fix enough problems with callbacks yet.", "parent": 4732924.0, "deleted": null, "dead": null, "descendants": null, "id": 4734886, "ranking": null, "date": 1351892308000, "year": 2012}, {"by": "grogs", "score": null, "time": 1351905128, "timestamp": 1351905128000, "title": "", "type": "comment", "url": "", "text": "Another approach to async IO is CPS (continuations passing style), in which you write imperative style code. This imperative style code is then compiled such that the blocking IO operations are called with callbacks, which are the remainder of that block of code (the continuation) - allowing the calling thread to be re-used while blocking for IO. Relies on the continuation having access to the outer/parent/previous-part function via closures.<p>It'll be interesting to see if people start doing this. Requires people to understand continuations and closures (which more people have exposure to now via JavaScript), and library support.", "parent": 4732924.0, "deleted": null, "dead": null, "descendants": null, "id": 4735561, "ranking": null, "date": 1351905128000, "year": 2012}, {"by": "doublerebel", "score": null, "time": 1353623026, "timestamp": 1353623026000, "title": "", "type": "comment", "url": "", "text": "Well, I suppose downvotes are what I get for commenting at 6 in the morning at 35,000 ft.  Correct, as the article mentions Harmony takes many cues from Python, as does Coffee, and Coffee cannot magically create features that aren't supported by the underlying JS.<p><i>However</i>, it is possible to get a near-equivalent of generators (albeit with more overhead) using Continuation Passing Style and Iced CoffeeScript await/defer or another CPS lib.  There are many who have explored this concept before myself, and I am now inspired to create an example to demonstrate IcedCS's ability with such a concept once I'm through the holiday.", "parent": 4819579.0, "deleted": null, "dead": null, "descendants": null, "id": 4820231, "ranking": null, "date": 1353623026000, "year": 2012}, {"by": "yuchi", "score": null, "time": 1353663786, "timestamp": 1353663786000, "title": "", "type": "comment", "url": "", "text": "Actually, using ICS and CPS to build generators forces a reversed approach. With generators is the called function to own the process, in await/defer is the calling context which knows about the \"generator like\" functionality.<p>And you're completely right about Coffee not able to implement ES6 generators.", "parent": 4820231.0, "deleted": null, "dead": null, "descendants": null, "id": 4821589, "ranking": null, "date": 1353663786000, "year": 2012}, {"by": "spacemanaki", "score": null, "time": 1355543257, "timestamp": 1355543257000, "title": "", "type": "comment", "url": "", "text": "I did a little homework before posting the comment you're replying to, and found a few sources stating that Clojure lacks general tail call optimization due to limitations in the JVM. I'll share what I dug up with you, although to be honest I'm almost just making an appeal to authority (actually to several authorities!), because I haven't actually read the JVM spec.<p>Rich Hickey wrote:<p>\"No language that uses the JVM stack and calling convention (e.g. Clojure and Scala) can do TCO since it would require either stack manipulation capabilities not offered in the bytecode spec or direct support in the JVM. The latter is the best hope for functional languages on the JVM, but I'm not sure is a priority for Sun as tail-calls are not idiomatic for JRuby/Jython/ Groovy.\" [0]<p>I thought that there are implementations of Scheme and other languages on the JVM that do tail call optimization, but I assumed they utilised some kind of virtual stack. J\u00f6rg W Mittag on StackOverflow confirmed this:<p>\"Nah, TCO [on the JVM] is easy. Seph does it, Erjang does it, Kawa and all the other Scheme implementations on the JVM do it. The JVM has Exceptions, which are basically the same as GOTO, which can be used to implement TCO. Or you use trampolines. Or you don't use the JVM call stack at all and just implement your own. The reason why Clojure and Scala only provide limited TCO (basically, only tail recursion is optimized) is because they want to use the JVM call stack for interoperability and performance reasons. As Rich Hickey, Clojure's designer said: Interop, speed, TCO -- Pick two.\" [1]<p>James Iry wrote the following on LtU, which explains why even though \"Real instruction sets (or C) don't 'support' proper tail recursion either\", the fact that the JVM doesn't is an issue for Clojure (and Scala):<p>\"Native instruction sets often let you do whatever you want with the stack. C doesn't in the ANSI standard, but you can do it with a bit of assembly. .NET IL has an explicit instruction for tail calls. The JVM, on the other hand, is very strict about how you use its stack and has no tail call instruction.\" [2]<p>During my Googling, I also found this[3], which is pretty interesting!<p>\"CTCO works by applying a first-order one-pass CPS algorithm (via Danvy 2007), then transforming the code to return thunks, and finally creating a custom trampoline to be used when the code is executed. Thanks to the properties of the CPS transformation, CTCO will make all function calls into tail calls, thereby even making non-tail code compiled by CTCO use constant space.\"<p>This actually sounds not far from what you suggested! Although it does seem to be a bit more than \"just an AST transformation\". I haven't read through it, or read the referenced paper [4] it's a bit over my head. You should check it out and report back! I've bookmarked it for now.<p>Finally, you wrote:<p>\"And I don't think it's a trade-off in the least. If so, what are Clojure programmers winning now? The glorious overhead of thousands of function calls? Those tasty 'stack overflow' back-traces, with thousands of calls to the same function?\"<p>Do you still think it's not a trade-off? Unless that last link I found is a magic bullet that makes TCO fast without interfering with Java interop (or the performance of Java interop) then I really don't think it's fair to say that it's not a design trade-off. Rich Hickey (and Martin Odersky) obviously made a conscious decision about this, and you're welcome to disagree with them, but it's not clear cut.<p>What Clojure programmers are winning now (by being hosted on the JVM) is a lot, I think. Easy interop is one of the pillars of Clojure that has contributed heavily to it picking up steam. I think the same applies to Scala. I said earlier that I don't have an opinion, and I guess it's only true that I don't have a <i>strong</i> opinion. If I had to pick, I think I'd pick interop.<p>Sorry for the long comment but I'd already done the research, I figured I might as well share it, although there really already has been a great deal said about this.<p>[0] <a href=\"https://groups.google.com/forum/?fromgroups=#!msg/clojure/Oi2mpxoiE74/l2SKuOWYbZQJ\" rel=\"nofollow\">https://groups.google.com/forum/?fromgroups=#!msg/clojure/Oi...</a><p>[1] <a href=\"http://stackoverflow.com/questions/7261039/haskell-on-jvm\" rel=\"nofollow\">http://stackoverflow.com/questions/7261039/haskell-on-jvm</a><p>[2] <a href=\"http://lambda-the-ultimate.org/node/3106\" rel=\"nofollow\">http://lambda-the-ultimate.org/node/3106</a><p>[3] <a href=\"https://github.com/cjfrisz/clojure-tco\" rel=\"nofollow\">https://github.com/cjfrisz/clojure-tco</a><p>[4] <a href=\"http://www.brics.dk/RS/07/Abs/BRICS-RS-07-Abs/BRICS-RS-07-Abs.html#BRICS-RS-07-6\" rel=\"nofollow\">http://www.brics.dk/RS/07/Abs/BRICS-RS-07-Abs/BRICS-RS-07-Ab...</a>", "parent": 4922848.0, "deleted": null, "dead": null, "descendants": null, "id": 4924538, "ranking": null, "date": 1355543257000, "year": 2012}, {"by": "SEMW", "score": null, "time": 1357989023, "timestamp": 1357989023000, "title": "", "type": "comment", "url": "", "text": "&#62; What I was trying to say above is that a prosecutor's goal is to prosecute as many cases as fully as possible. They do not consider whether it is meritorious to pursue a case according to some outside moral standard, that's not their job.<p>I have no idea what the situation is in the US. But here in England that's just not true.<p>The CPS (Crown Prosecution Service)'s job is not to bring all the prosecutions that it believes it can win. It's to bring all prosecutions that it believes it can win that it's in the public interest to be brought. (<a href=\"http://www.cps.gov.uk/publications/code_for_crown_prosecutors/\" rel=\"nofollow\">http://www.cps.gov.uk/publications/code_for_crown_prosecutor...</a>)<p>The result is that CPS discretion is an important part of the system. And has the side-effect that the legislature has less incentive to narrow the scope of offences, since they believe (rightly or wrongly) they can rely on the CPS to not bring prosecutions where it wouldn't make sense to do so.<p>(Hence e.g. there's little pressure to amend the Sexual Offences Act with US-style 'romeo and juliet' laws to protect teenage couples who are technically both sexually assaulting each other, since the CPS guidelines (<a href=\"http://www.cps.gov.uk/legal/p_to_r/rape_and_sexual_offences/youths/\" rel=\"nofollow\">http://www.cps.gov.uk/legal/p_to_r/rape_and_sexual_offences/...</a>) in practice have the same effect).<p>Whether this system is better or worse than one where the prosecutor doesn't use discretion, but offences are defined more strictly, is an interesting discussion.", "parent": 5047322.0, "deleted": null, "dead": null, "descendants": null, "id": 5047454, "ranking": null, "date": 1357989023000, "year": 2013}, {"by": "madaxe", "score": null, "time": 1358083314, "timestamp": 1358083314000, "title": "", "type": "comment", "url": "", "text": "Yes. I know a few dozen criminal barristers in the UK.<p>They measure their success purely in terms of won cases, unsurprisingly - if you go to certain bars around the temples in London, you <i>will</i> overhear conversations along the lines of \"got this guy sent down for 20 years today, don't know if he did it, but who gives a shit, and I'll be a QC in 5 years! Crack open the champagne!\". They're not even in it for the money, as the CPS pays abysmally. They'd rather defend, as <i>that</i> pays - and again, on that side of the table, they have absolutely no interest in the innocence or guilt of their client, just in avoiding a conviction.<p>It's purely mercenary, and their stance is that it's just business as usual and impartiality - but it's a business that can cost innocent people their lives, and let the guilty walk free.<p>I believe your prosecutors in the US are rather better paid, which sets the incentives for conviction roughly on a par with acquittal.", "parent": 5050026.0, "deleted": null, "dead": null, "descendants": null, "id": 5050691, "ranking": null, "date": 1358083314000, "year": 2013}, {"by": "gsnedders", "score": null, "time": 1358259515, "timestamp": 1358259515000, "title": "", "type": "comment", "url": "", "text": "This is very English-centric, for what it's worth. Plea bargains are an oddity under English law (they don't exist elsewhere in the UK), and the CPS is equally English.<p>Apart from that about plea bargains, it does mostly hold true in Scotland/NI.", "parent": 5059720.0, "deleted": null, "dead": null, "descendants": null, "id": 5060169, "ranking": null, "date": 1358259515000, "year": 2013}, {"by": "ufo", "score": null, "time": 1359470962, "timestamp": 1359470962000, "title": "", "type": "comment", "url": "", "text": "The basic idea of having a framework full of nonblocking async calls for stuff and using simple cooperative threading is a reasonable design decision depending on what you want to do. The problem is that Node forces you to write code in continuation passing style and that is a very \"low level\" way to write things, missing many of the niceties languages tend to have right now.<p>* If you want an async value you need to give it a name and put it in a callback argument. Instead of `f() + g()` you end up doing `f(function(a){ g(function(b){ ballback(a+b) } ) })`<p>* You need to explicitly tell the order of execution of everything (as shown in the previous example)<p>* It can very laborious to refactor a non-CPS subroutine if part of it needs to become async, specially if you have many loops or call other subroutines. Ideally you shouldn't have to do large \"boilerplate\" rewrites of your code just because of a small local change.<p>If you are curious what the better alternative for to CPS style is, my opinion is that the way to have the language do the work of breaking the code into the callbacks for you, either via dialects that compile to JS or via features such as generators. While you can get away with many of the very nice async programming libraries out there, they still can't solve all the problems with CPS style (specially the refactoring one)", "parent": 5134025.0, "deleted": null, "dead": null, "descendants": null, "id": 5134224, "ranking": null, "date": 1359470962000, "year": 2013}, {"by": "ufo", "score": null, "time": 1359509319, "timestamp": 1359509319000, "title": "", "type": "comment", "url": "", "text": "I hate the async pyramid because explicit continuation passing ought to be a low-level representation generated exclusively by machines, instead of by programmers.<p>For example, one of the great things about high level programming languages is that you can write <i>composable</i> expressions such as<p><pre><code>    f(g() + h())\n</code></pre>\nbut you can't do that if f and g are written in CPS style, since then you need to give an explicit names to all the  intermediate \"registers\" used in the computation as well as baking down an specific order of evaluation for things<p><pre><code>    g(function(a){\n        return h(function(b){\n            return f(a + b)\n        })\n     })\n</code></pre>\n&#62; Also, if your pyramid is too deep, chances are you need to extract some of it into functions.<p>This sounds like that \"if your method is more then 15 lines you should split it into subfunctions\". I never liked this line of reasoning because the complexity (number of possible interactions) in a module increases quadratically with the number of functions in it. You fight this complexity by only breaking down a function on \"natural\" boundaries dictated by encapsulation and reuse, rather then by code size.", "parent": 5136971.0, "deleted": null, "dead": null, "descendants": null, "id": 5137559, "ranking": null, "date": 1359509319000, "year": 2013}, {"by": "eaxitect", "score": 1.0, "time": 1360582660, "timestamp": 1360582660000, "title": "Presidential Innovation Fellows: Cyber-Physical Systems | The White House", "type": "story", "url": "http://www.whitehouse.gov/innovationfellows/cyber-physical-systems", "text": "", "parent": null, "deleted": null, "dead": null, "descendants": 0.0, "id": 5200334, "ranking": null, "date": 1360582660000, "year": 2013}, {"by": "digisth", "score": null, "time": 1362268674, "timestamp": 1362268674000, "title": "", "type": "comment", "url": "", "text": "A great library for structuring your callbacks is \"async\":<p><a href=\"https://github.com/caolan/async\" rel=\"nofollow\">https://github.com/caolan/async</a><p>I've only used it with node.js, but it's supposed to work in web browsers as well.<p>It allows you to think a little more procedurally (\"waterfall\" is especially handy here) while writing CPS code. Very good.", "parent": 5311361.0, "deleted": null, "dead": null, "descendants": null, "id": 5311728, "ranking": null, "date": 1362268674000, "year": 2013}, {"by": "lucian1900", "score": null, "time": 1362309894, "timestamp": 1362309894000, "title": "", "type": "comment", "url": "", "text": "It seems odd that so many people defend callback nested chains. You end up writing in continuation passing style, when many compilers can do CPS transform for you (Scheme, C#, things like IcedCoffeeScript.", "parent": 5311361.0, "deleted": null, "dead": null, "descendants": null, "id": 5313385, "ranking": null, "date": 1362309894000, "year": 2013}, {"by": "jj2", "score": null, "time": 1362314910, "timestamp": 1362314910000, "title": "", "type": "comment", "url": "", "text": "If you have to deal with lots of nested callbacks, it's probably worth to use a CPS transformation like Streamline.js. It makes your code a lot cleaner. As if it was written synchronously.<p><a href=\"https://github.com/Sage/streamlinejs\" rel=\"nofollow\">https://github.com/Sage/streamlinejs</a>\n<a href=\"http://en.wikipedia.org/wiki/Continuation-passing_style\" rel=\"nofollow\">http://en.wikipedia.org/wiki/Continuation-passing_style</a>", "parent": 5311361.0, "deleted": null, "dead": null, "descendants": null, "id": 5313548, "ranking": null, "date": 1362314910000, "year": 2013}, {"by": "ufo", "score": null, "time": 1362329363, "timestamp": 1362329363000, "title": "", "type": "comment", "url": "", "text": "Fair enough. It might be a breaking change but wouldn't it be nice if instead of having to rewrite everything into continuation passing style (a boring and error prone process!) you could just do something simple like<p><pre><code>    var a = await someBigFunc()\n</code></pre>\nor<p><pre><code>    do\n      a &#60;- someBigFunc()\n</code></pre>\nJavascript in its current state is not built for supporting CPS programming very well. You often end up needing to reimplement control flow primitives like while loops, break statements and exception handling since those don't play nice with async stuff.", "parent": 5313031.0, "deleted": null, "dead": null, "descendants": null, "id": 5314289, "ranking": null, "date": 1362329363000, "year": 2013}, {"by": "ufo", "score": null, "time": 1362329765, "timestamp": 1362329765000, "title": "", "type": "comment", "url": "", "text": "I have heard about tamejs. What I find weird is that 1) the original tamejs website is offline and 2) I never seem to find nice comparisons between the different CPS compilers (I have this problem where I have a hard time using something unless I can know beforehand what sort of \"pros and cons\" to expect)", "parent": 5314079.0, "deleted": null, "dead": null, "descendants": null, "id": 5314309, "ranking": null, "date": 1362329765000, "year": 2013}, {"by": "mmastrac", "score": null, "time": 1362778819, "timestamp": 1362778819000, "title": "", "type": "comment", "url": "", "text": "Note that these free certificates are considered non-commercial-use only.<p>\"The \"StartCom Certificate Policy &#38; Practice Statements\" document \u00a73.1.2.1 is explicit that the Class 1 (free) certificates are for non-commercial uses only.[3] The previous version of the CPS did not include this restriction.[4]\"<p>You can, however, pay $60 for a personal validation (and potentially an extra $60 for company validation) to use the certs commercially. Actually, this validation lets you generate <i>any number</i> of SSL certificates for sites you own, for two years. This also includes <i>wildcard</i> certs, which you pay through the nose for from everyone else.<p>These guys are so much cheaper than the rest of the SSL vendors it's not funny. I've got my wildcard StartSSL certificate up on codano.com, and I've generated a few more for internal use. The validation literally took about two hours from start to finish, and most of that was just waiting for an email response/validation phone call and me scanning my passport and business documentation.<p>Can't recommend them enough.", "parent": 5344605.0, "deleted": null, "dead": null, "descendants": null, "id": 5345896, "ranking": null, "date": 1362778819000, "year": 2013}, {"by": "brudgers", "score": 2.0, "time": 1362798877, "timestamp": 1362798877000, "title": "CPS Recursive Ascent Parsing", "type": "story", "url": "http://www.cs.rit.edu/~anh/RecurAscentPaper.pdf", "text": "", "parent": null, "deleted": null, "dead": null, "descendants": 0.0, "id": 5347154, "ranking": null, "date": 1362798877000, "year": 2013}, {"by": "gngeal", "score": null, "time": 1363019283, "timestamp": 1363019283000, "title": "", "type": "comment", "url": "", "text": "\"And I've found that learning a lot of languages is a waste of time.\"<p>I'd say that your time would be much better spent learning language concepts and learning to implement them yourself in some sane environment, like OMeta, for example. This way, you could 1) do the incremental changes you want (instead of throwing away one language wholesale and learning another from scratch), 2) recycle the execution environment you <i>have</i> to use (e.g., at work, instead of being forced to switch), 3) broaden your horizons in a fundamental way (learn about type systems, implementation techniques etc.).<p>\"But it's so much more efficient to just become better at the languages and frameworks you use at work and then use that experience to become good at new technologies for that area.\"<p>That's exactly in line in what I'm suggesting. Also, wait until Javascript gets tail calls (coming in EcmaScript 6), and you'll be able to implement a vastly increased range of additional language features yourself, in an elegant way (think CPS transforms).", "parent": 5357687.0, "deleted": null, "dead": null, "descendants": null, "id": 5357756, "ranking": null, "date": 1363019283000, "year": 2013}, {"by": "xb95", "score": null, "time": 1363630369, "timestamp": 1363630369000, "title": "", "type": "comment", "url": "", "text": "It wasn't just being mean.<p>First-hand experience in my case. He and his GNAA attacked my volunteer-run open source project and did many things, including calling Child Protective Services (CPS) and making false complaints -- leading one of my volunteers and his children to have to undergo interviews with CPS to suss everything out.<p>They emailed one person's professors at university and made false, damaging claims. Bosses were tracked down and jobs were contacted. Parents were found and harassed. Our web site was attacked and taken offline. Our business associates were contacted and they concocted a fictitious business persona to file spurious complaints with our payment processors, leading to us being dropped from two providers.<p>weev was not just \"being mean\", he transcended that to stalking, bullying, and harassment. He caused emotional harm to my volunteers and staff and fiscal harm to my business. All in the name of \"trolling\".<p>And yes: we pursued the legal route. The FBI is just not super interested in tracking down some random dude on the Internet for harassing a small business. They were happy to talk to us and very compassionate and gave us some advice, but that was the extent of it.", "parent": 5395435.0, "deleted": null, "dead": null, "descendants": null, "id": 5396036, "ranking": null, "date": 1363630369000, "year": 2013}, {"by": "cgag", "score": null, "time": 1363647784, "timestamp": 1363647784000, "title": "", "type": "comment", "url": "", "text": "Isn't that the whole problem though, that the CFAA is being used to put assholes and activists in jail?  If he got arrested for fake calls to CPS or something, I could agree with it perhaps, but I'm not at all comfortable with him going to jail for bullshit reasons.", "parent": 5396155.0, "deleted": null, "dead": null, "descendants": null, "id": 5397754, "ranking": null, "date": 1363647784000, "year": 2013}, {"by": "lbarrow", "score": null, "time": 1364086792, "timestamp": 1364086792000, "title": "", "type": "comment", "url": "", "text": "I graduated from one of those Minnesotan miracle school districts in 2007. I think I got a reasonable education -- it wasn't great compared to what people in private schools got, but it set me up to succeed in college.<p>I now live in Chicago, which is the third largest school district in the United States. It's completely broken.<p>* The schools are massively segregated -- both by income and by race. The wealthy leadership of the city clearly decided a long time ago to give up on the public school system and send their children to private school. Even in middle class neighborhoods like Hyde Park, the divide is clear: if you're poor or black, you go to the local public school. If you can afford it, you don't.<p>* The school district is trying to close down 50 odd elementary schools, almost all of them in the ghettos. Why? Because population loss has eroded the tax income from those areas to the point where they can barely operate anymore.<p>* The entire teachers union went on strike for a few days earlier this year to protest salary and benefit cuts, increased testing, and the city's neglect for the school system. They didn't really win -- the salary cuts were mostly averted, but the tests keep rolling in.<p>* For every 100 students who enters CPS as a freshman in high school, only 6 ever get a bachelors degree.<p>The schools back home in Minnesota aren't perfect or even particularly good. They're mediocre. They're ok. But they're so much better than in Chicago (and many other parts of the country) that I will seriously consider moving back to Minneapolis when I start having kids.", "parent": 5430234.0, "deleted": null, "dead": null, "descendants": null, "id": 5430560, "ranking": null, "date": 1364086792000, "year": 2013}, {"by": "rayiner", "score": null, "time": 1364088699, "timestamp": 1364088699000, "title": "", "type": "comment", "url": "", "text": "The link you cited is highly misleading. The Chicago metro area is a census tract of 10 million people. The City of Chicago is 2.7 million people. The Chicago school system and the Chicago teachers union disagree about how to compute the number, but CTU cites $71k and CPS cites $76k: <a href=\"http://chicago.cbslocal.com/2012/06/12/how-much-do-chicago-public-school-teachers-make/\" rel=\"nofollow\">http://chicago.cbslocal.com/2012/06/12/how-much-do-chicago-p...</a><p>Also misleading from that link: Chicago's cost of living is right around the US average: <a href=\"http://www.bestplaces.net/cost_of_living/city/illinois/chicago\" rel=\"nofollow\">http://www.bestplaces.net/cost_of_living/city/illinois/chica...</a>", "parent": 5430621.0, "deleted": null, "dead": null, "descendants": null, "id": 5430666, "ranking": null, "date": 1364088699000, "year": 2013}, {"by": "thecombjelly", "score": null, "time": 1364406718, "timestamp": 1364406718000, "title": "", "type": "comment", "url": "", "text": "The inclusion of lambdas is great, but not supporting full closures severely hampers their usefulness. Instead of using lambdas to use patterns like CPS (continuation passing style) or alternative object interfaces, lambdas just save you from typing extra characters.<p>It is always fun to watch other languages continue to implement features that bring them closer to lisp. I wonder how much longer it will be until every language is just a lisp dialect.<p>They are moving in the right direction but very slowly. It is impressive though that they have been able to still innovate without breaking backwards compatibility.", "parent": 5449525.0, "deleted": null, "dead": null, "descendants": null, "id": 5450916, "ranking": null, "date": 1364406718000, "year": 2013}, {"by": "quatrevingts", "score": null, "time": 1364441109, "timestamp": 1364441109000, "title": "", "type": "comment", "url": "", "text": "I'm not sure what you're getting at with CPS. How do Java's lambda's inhibit CPS? And what do you hope to accomplish with CPS, anyway? I could see you wanting tail-call optimization in order to make CPS useful, but that's a VM limitation, not a language limitation, and you could always trampoline anyway..", "parent": 5450916.0, "deleted": null, "dead": null, "descendants": null, "id": 5453216, "ranking": null, "date": 1364441109000, "year": 2013}, {"by": "lysium", "score": null, "time": 1364673899, "timestamp": 1364673899000, "title": "", "type": "comment", "url": "", "text": "Thanks for the clarification.<p>If I read you correctly, you say, the JVM 'supports tail calls', because it can call other methods. I think, the phrase 'supports tail calls' is as meaningful as 'supports function calls' then.<p>In any case, I don't think this is a question of optimization. I don't see how, for example, an F# program written in CPS can ever run on the JVM.", "parent": 5466289.0, "deleted": null, "dead": null, "descendants": null, "id": 5466487, "ranking": null, "date": 1364673899000, "year": 2013}, {"by": "lucian1900", "score": null, "time": 1364675065, "timestamp": 1364675065000, "title": "", "type": "comment", "url": "", "text": "Scheme implementations will compile any tail calls into jumps, even if they're mutually recursive. This is easy to understand by doing CPS transformation by hand on such calls.", "parent": 5466119.0, "deleted": null, "dead": null, "descendants": null, "id": 5466556, "ranking": null, "date": 1364675065000, "year": 2013}, {"by": "mappu", "score": null, "time": 1364982678, "timestamp": 1364982678000, "title": "", "type": "comment", "url": "", "text": "Maybe i haven't seen the insides of enough large companies - but watching their demo video, this sort of product seems to glimpse past what LtU call the 'middle-ages' of programming. Like seeing map, fold and CPS for the first time. I spend <i>how</i> much time writing graphs, charts, filters, sql, password reset interfaces by hand for my SaaS with my web stack?<p>The coolest part for me is someone here has what seems like a quite pure software gig, writing interfaces with no real need to care for the underlying business, only for the data adapters. Mostly if you're working with business software the result would be polluted by some specific business logic or domain knowledge.<p>(Excuse the gushing, that video blew me away slightly.)", "parent": 5484263.0, "deleted": null, "dead": null, "descendants": null, "id": 5485115, "ranking": null, "date": 1364982678000, "year": 2013}, {"by": "Rickasaurus", "score": null, "time": 1365623925, "timestamp": 1365623925000, "title": "", "type": "comment", "url": "", "text": "I never thought tail calls were hard to debug, but can you can keep text offsets to the original tokens through the CPS transform?  Usually with typed languages that's enough information to figure out what went wrong or at least what to log.<p>Also, I'm not sure why the entire library needs the same calling convention when it's such bad form to expose all of your functions anyway.", "parent": 5527538.0, "deleted": null, "dead": null, "descendants": null, "id": 5527692, "ranking": null, "date": 1365623925000, "year": 2013}, {"by": "cwzwarich", "score": null, "time": 1365627704, "timestamp": 1365627704000, "title": "", "type": "comment", "url": "", "text": "If you don't have any interesting control operators like call/cc, prompt/control, etc. then it should be possible to track stack-like control patterns after CPS conversion through the compiler and through DWARF (or a custom debugging format). Unless I am missing something it seems that the control operators are the problem, not CPS.", "parent": 5527538.0, "deleted": null, "dead": null, "descendants": null, "id": 5528144, "ranking": null, "date": 1365627704000, "year": 2013}, {"by": "larsberg", "score": null, "time": 1365627960, "timestamp": 1365627960000, "title": "", "type": "comment", "url": "", "text": "You can keep the original tokens. The challenge with debugging such programs is really the integration with the rest of the optimizations. CPS transformation turns your program into a ton of tiny functions. Then, any reasonable optimizer will do a <i>huge</i> amount of inlining. Attempting to do trace-based debugging bounces you from one subexpression in one function to another and so forth. Especially when you consider that Manticore (like MLton) is a whole-program optimizing compiler, you also get little chunks of library functions we've duplicated like map, foldr, etc.<p>Worse, we liberally remove dead code, including unused arguments, branches of conditionals we can guarantee are never called, etc. And since it's a research compiler, there isn't really a \"-O0\". You can turn off individual optimization passes, but guessing what combination lead to something getting inlined or not requires some careful study.<p>As to why they've chosen what they have with LLVM, I don't know enough to judge. Doing something like ML compilers do with a custom calling convention internally and then a C convention externally is pretty expensive, and ends up putting a massive penalty on C calls (oh, you want to call C? let me move the GC pointer out of the way, set up a fake stack frame for you, etc.). Further, doing it makes register allocation more of a challenge. Many ML compilers like to \"pin\" certain registers with their own values (e.g., the GC local heap limit pointer) so that we can write custom little blobs of assembly that get emitted in the right places without worrying about substituting in what the _real_ heap limit pointer is, etc. That pinning interacts badly with LLVM, as you can see from the Haskell/LLVM master's paper - they basically had to give up on it and just add their pinned values as extra arguments and then stop emitting code that relied on it being in a sane, typical place.<p>Hope that helps! I've been thinking about these problems and talking only with other people who do the same for so many years I'm starting to forget which parts are and aren't obvious (or even published/documented).", "parent": 5527692.0, "deleted": null, "dead": null, "descendants": null, "id": 5528172, "ranking": null, "date": 1365627960000, "year": 2013}, {"by": "larsberg", "score": null, "time": 1365633067, "timestamp": 1365633067000, "title": "", "type": "comment", "url": "", "text": "Certainly, that's true! As I mentioned in my other far-too-wordy response, though, if you just CPS convert and run a program, it will be far too slow (5x the funcalls != 5x the fun...). So, it's the combination of CPS conversion and later optimizations --- paired with whole-program compilation --- that make it so hard to debug.", "parent": 5528144.0, "deleted": null, "dead": null, "descendants": null, "id": 5528656, "ranking": null, "date": 1365633067000, "year": 2013}, {"by": "catwell", "score": null, "time": 1366123052, "timestamp": 1366123052000, "title": "", "type": "comment", "url": "", "text": "Warning: I am far from being knowledgeable about compilers. That being said...<p>SSA is actually more appropriate for imperative languages. Compilers for functional languages tend to use other intermediate representations such as CPS / ANF. They are \"equivalent\" though: <a href=\"http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.34.3282&#38;rep=rep1&#38;type=pdf\" rel=\"nofollow\">http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.34....</a>", "parent": 5558114.0, "deleted": null, "dead": null, "descendants": null, "id": 5558311, "ranking": null, "date": 1366123052000, "year": 2013}, {"by": "cwzwarich", "score": null, "time": 1366126209, "timestamp": 1366126209000, "title": "", "type": "comment", "url": "", "text": "In practice, working with them can be quite different. In a lexically scoped representation (either ANF or CPS) you have to preserve lexical scoping after each transformation, which can be pretty annoying if you want to do optimizations in their full generality. With SSA, you have to preserve dominance, but you don't have to update the dominator tree (the equivalent of the information encoded in the lexical scoping of ANF / CPS) if you don't want to; you can simply recompute it.<p>Of course, the advantage that ANF / CPS have is that they can naturally represent higher-order programs, but for first-order programs they don't really have any advantage over SSA.", "parent": 5558311.0, "deleted": null, "dead": null, "descendants": null, "id": 5558692, "ranking": null, "date": 1366126209000, "year": 2013}, {"by": "toolslive", "score": null, "time": 1366183430, "timestamp": 1366183430000, "title": "", "type": "comment", "url": "", "text": "I always considered CPS and SSA to be duals. \n(Just like FST and Lambda-calculus are duals)", "parent": 5558311.0, "deleted": null, "dead": null, "descendants": null, "id": 5563190, "ranking": null, "date": 1366183430000, "year": 2013}, {"by": "abecedarius", "score": null, "time": 1366303796, "timestamp": 1366303796000, "title": "", "type": "comment", "url": "", "text": "Ah, thanks. I thought the comment had some precise dualities in mind, but I guess not? (There is such a correspondence for CPS and SSA, cf Appel's paper.)", "parent": 5570425.0, "deleted": null, "dead": null, "descendants": null, "id": 5571639, "ranking": null, "date": 1366303796000, "year": 2013}, {"by": "shinolajla1234", "score": null, "time": 1367530059, "timestamp": 1367530059000, "title": "", "type": "comment", "url": "", "text": "Selective Receive sounds great. Any idea how to handle messages that continue to pile up behind your actor when they're never handled? Do they get culled somehow after a period of time? If not, how do you handle the inherent memory leaking where every actor piles up messages that were never handled, and wastes processing time by replaying them every time you do handle a message?  Works okay when you have lightweight processes that are completely independent, like in Erlang - on a monolithic process like the JVM, not so much.<p>Also, with the lightweight threads using CPS - how do you prevent the kernel from deciding to do some housekeeping tasks on your core?  Using APIC or something in Linux to assign the JVM process exclusively to cores so you're guaranteed no interruptions?  User-level hardware affinity is not exactly the JVM's strong point.", "parent": 5645787.0, "deleted": null, "dead": null, "descendants": null, "id": 5647310, "ranking": null, "date": 1367530059000, "year": 2013}, {"by": "coolsunglasses", "score": null, "time": 1368832362, "timestamp": 1368832362000, "title": "", "type": "comment", "url": "", "text": "httpkit / aleph if you're using Clojure and want high-scalability async.<p>No CPS pyramid of doom garbage though. To get that, Node.js is your one-stop-shop.", "parent": 5727014.0, "deleted": null, "dead": null, "descendants": null, "id": 5727154, "ranking": null, "date": 1368832362000, "year": 2013}, {"by": "danso", "score": null, "time": 1370438762, "timestamp": 1370438762000, "title": "", "type": "comment", "url": "", "text": "This reminds me of what David Simon called the thesis of \"The Wire\", that institutions inevitably corrupt and destroy the individuals within them. It's possible that just about everyone in the system (except the original person who makes the accusation, though he/she may just have been made overly paranoid by the system) is a very decent person who, at any point, could've looked at the photos and called bullshit on it. But that opportunity doesn't arrive once the momentum of bureaucracy is involved.<p>Of course there's the poor grandfather here within our institution of justice. But his arraignment was the result of a chain of bumbling actions. At some point, someone in authority made a terrible decision. But the decision involved something that generally, almost no one wants to be on the defending side of (\"Oh, but are you <i>sure</i> it's child pornography?\")...and soon, you have the momentum of one bull-headed decision just propagating to other agencies and departments until anyone with the decency to stand up in the bureaucracy and say \"Wait a minute\" will already have been deterred by the mountain of echo chamber-derived evidence.<p>The incident as described here is abhorrent. But I can see why most of the actors here did what they did...certainly, no one at CPS wants to be the one who says, \"Let me see those pornographic pictures just to double check\"...And no one in law enforcement wants to be on the hook when a <i>real</i> child pornographer is caught, and it's learned that police had investigated him months/years before and did nothing about it.", "parent": 5825087.0, "deleted": null, "dead": null, "descendants": null, "id": 5825366, "ranking": null, "date": 1370438762000, "year": 2013}, {"by": "DanBC", "score": null, "time": 1370442250, "timestamp": 1370442250000, "title": "", "type": "comment", "url": "", "text": "Technicians don't have any context.<p>They have no idea if these are his grandchildren and they're happy, or if these are his grandchildren and he's abusing them, or if these are his grandchildren and he's on the sex offender's register and prohibited from being anywhere near them.<p>So, when they call police they're not saying \"This guy is a paedophile, lock him up\" they are saying \"There <i>might</i> be a problem here, but we're not child protection experts and we don't have access to all the information, so please could you take a look?\"<p>It's very annoying that police totally overplayed this case, and that CPS didn't look at the images before taking it to court.<p>But still, in general, you want people to report early and report often.  The fight isn't against them, it's against overworked underfunded poorly trained social workers (many of whom are fucking idiots) and overly aggressive police forces.<p>What is totally baffling to me is to contrast this case (naked children on a drive; arrest and prosecution) and the child grooming gang cases (14 year old girls telling police that they were being gang raped, drugged, forced into prostitution, and police not doing anything and child protection social services telling the family that a child working as a prostitute was a \"lifestyle choice\".  We must do something to stop abuses of the system like that, but we must also make sure innocent people don't end up in court  needlessly.  Especially because, as the blog says, access to legal aid is getting tricky and barristers are expensive.", "parent": 5825617.0, "deleted": null, "dead": null, "descendants": null, "id": 5825750, "ranking": null, "date": 1370442250000, "year": 2013}, {"by": "ErrantX", "score": null, "time": 1370448039, "timestamp": 1370448039000, "title": "", "type": "comment", "url": "", "text": "All true.<p>But. In my time as a computer forensics investigator in the UK I never saw a case like this. That's not to say errors were made (don't get me started) but I am <i>very</i> cautious about this particular tale.<p>For example, there is no way that the computer would not have been subjected to a full analysis, by experts. The CPS simply will not prosecute without this, period.<p>Any competent analyst would have seen the obvious truth, and the report would have reflected that. The CPS actually is very very cautious in charging for CP cases when there is only a little or dubious evidence - without supporting evidence of the user searching for and downloading material stuff graded level 1 will not make it to court.<p>I guess some critical process failed (I'm assuming the story is entirely true as told), which I think is horrific, but I don't think it reflects what happens all the time. I guess \"Exhibit A\" at no point said \"I only have images of my grandchildren on there, from holiday\", or similar, and the police assumed (totally understandable!) denial mean't the images were dodgy - that's a horrible failing.<p>What does need to be exposed is how any reasonable claim of CP possession (e.g. by a relative or whatever) will mean an automatic investigation, suspicion, and often seizure of your computers. The number of cases I worked through which were total negatives is depressing (although not a massive percentage, maybe 3-5%, it still feels we could do better).", "parent": 5825750.0, "deleted": null, "dead": null, "descendants": null, "id": 5826441, "ranking": null, "date": 1370448039000, "year": 2013}, {"by": "ErrantX", "score": null, "time": 1370458436, "timestamp": 1370458436000, "title": "", "type": "comment", "url": "", "text": "In practice the law <i>is</i> interpreted though. Not just for CP!<p>When an analyst looks through some images they have to make a subjective judgement because it is very hard to judge age in many cases.<p>To be clear; striking a suggestive pose is very very rarely illegal in itself. It may be <i>classified</i> on a relevant scale as part of the investigation (e.g. COPINE) but that is only because it is of obvious relevance to the charge/conviction.<p>If someone was caught with \"suggestive\" images on their computer in the UK, for example, the CPS wouldn't prosecute (because it's not actually illegal).", "parent": 5827034.0, "deleted": null, "dead": null, "descendants": null, "id": 5827737, "ranking": null, "date": 1370458436000, "year": 2013}, {"by": "ErrantX", "score": null, "time": 1370476955, "timestamp": 1370476955000, "title": "", "type": "comment", "url": "", "text": "&#62; Do you think there are limits to what young people will do in front of a webcam?<p>You misunderstand; by borderline I mean that the observed age of the participant is subjective. And it relates back to the age old issue; at 17 years 364 days it's illegal, the next it's legal.<p>As an expert analyst you have to give it some degree of leeway because it's very hard to judge the difference.<p>&#62; Or do you believe only older teens perform such acts?<p>Well, yes, to a certain extent. It's getting worse because younger generations are more sexualised, but for younger teens on-webcam activities are more often related to coercion (MSN is still a favourite avenue for grooming).<p>&#62; As you admitted to yourself, there have been plenty of cases in which teens using webcams have been convicted for producing and distributing child porn.<p>Plenty amongst.. millions (by your count). I never saw a case (out of the hundreds I worked on and many more I saw) of that sort, but when they happen they make the media (because, rightfully, it is ridiculous).<p>The guidance may have changed in recent months, as I am not 100% current, but not very long ago CPS feedback was that prosecutions were targeted at those seeking younger pornography, particularly of the \"commercial\" variety, or those actively grooming youngsters.", "parent": 5827980.0, "deleted": null, "dead": null, "descendants": null, "id": 5829521, "ranking": null, "date": 1370476955000, "year": 2013}, {"by": "andybak", "score": null, "time": 1371646329, "timestamp": 1371646329000, "title": "", "type": "comment", "url": "", "text": "EDIT - as a balance to the above statement - even with cgroups the compartmentalisation is weaker than a CPS and I do have the occasional &#x27;bad neighbour&#x27; problem.", "parent": 5905179.0, "deleted": null, "dead": null, "descendants": null, "id": 5905183, "ranking": null, "date": 1371646329000, "year": 2013}, {"by": "potatolicious", "score": null, "time": 1371649382, "timestamp": 1371649382000, "title": "", "type": "comment", "url": "", "text": "Indeed:<p><a href=\"http:&#x2F;&#x2F;www.cps.usa.canon.com&#x2F;about_cps&#x2F;about.shtml\" rel=\"nofollow\">http:&#x2F;&#x2F;www.cps.usa.canon.com&#x2F;about_cps&#x2F;about.shtml</a><p>Summary: you only get loaners and and such once you&#x27;ve purchased &quot;20 CPS points&quot; worth of stuff, which seems to roughly amount to $12-15K worth of gear.", "parent": 5905268.0, "deleted": null, "dead": null, "descendants": null, "id": 5905454, "ranking": null, "date": 1371649382000, "year": 2013}, {"by": "ufo", "score": null, "time": 1373333942, "timestamp": 1373333942000, "title": "", "type": "comment", "url": "", "text": "But callbacks also don&#x27;t have any concept of paralelism and its trivially easy to code all() yourself once and then forget about it.<p>The hard problem that promises solve are<p>1. Its more similar to regular code versus explicit CPS (no pyramid of doom, use &quot;return&quot; to return values, can store promises in data structures or pass them around to other functions)<p>2. Error handling. Regular Javascript has try-catch blocks for exception handling but those don&#x27;t work with async code. Promises let you use exceptions in async code without having to worry about error callbacks.", "parent": 6009663.0, "deleted": null, "dead": null, "descendants": null, "id": 6010574, "ranking": null, "date": 1373333942000, "year": 2013}, {"by": "hahainternet", "score": null, "time": 1374504446, "timestamp": 1374504446000, "title": "", "type": "comment", "url": "", "text": "No, acting as if a law which is currently not even in draft form will stop rapes being reported due to some minor technicality is a ridiculous assumption.<p>For a start, <i></i>even if<i></i> this was the case, the CPS could not possibly bring forward a prosecution in the public interest. It&#x27;s absurd on its face. Black and white thinking is usually fallacious and especially so here.", "parent": 6083909.0, "deleted": null, "dead": null, "descendants": null, "id": 6083972, "ranking": null, "date": 1374504446000, "year": 2013}, {"by": "anonymoushn", "score": null, "time": 1375109289, "timestamp": 1375109289000, "title": "", "type": "comment", "url": "", "text": "This, and your replies below, read like trolling written by someone who hasn&#x27;t used the features he is claiming are unnecessary.  They repeatedly fail to address the point: you actually can&#x27;t begin in Scala with no notion of lightweight threads, coroutines, or continuations, and simply make a library that does one of those things.<p><pre><code>  &quot;The style one can program in and the style it is implemented isn&#x27;t connected the way you think it is.&quot;\n</code></pre>\nThe above might be alluding to techniques for pretending to have these language features when one does not.  You can write CPS manually, and you might even be able to make a machine apply the CPS transformation automatically to your procedural code.  Neither of these things sound particularly fun, compared to the alternative of writing procedural code and then debugging the code that you&#x27;ve actually written.  It&#x27;s little help that you have to return every once in a while to avoid a StackOverflow due to the language&#x27;s embarrassing lack of TCO.<p>Edit: Apparently if you use Squawk you can have green threads.  Can you have OS threads as well?", "parent": 6118714.0, "deleted": null, "dead": null, "descendants": null, "id": 6121397, "ranking": null, "date": 1375109289000, "year": 2013}, {"by": "stass", "score": null, "time": 1375322919, "timestamp": 1375322919000, "title": "", "type": "comment", "url": "", "text": "Yes, CPS is essentially that and available in any modern language, or can be emuated by setcontext(2)&#x2F;getcontext(2).  However, it can become a mess very quickly.<p>Another option is monadic style, which will pass error checking along.  I believe it will work well for this example, and can be implemented in Go, most likely (I don&#x27;t know Go, bur it seems so).<p>Of course, the real problem with this code is that it is not decomposed properly.  Nested error checking is the first sign of it, as somebody else already rightfully noted in the thread.", "parent": 6138085.0, "deleted": null, "dead": null, "descendants": null, "id": 6138189, "ranking": null, "date": 1375322919000, "year": 2013}, {"by": "briandear", "score": null, "time": 1375725511, "timestamp": 1375725511000, "title": "", "type": "comment", "url": "", "text": "Canon Professional Services (and Nikon Professional Services) does a similar thing, however to get into CPS, it took me quit a bit of work back in the day (tearsheets, credential letters, etc.) However by looking at using this site as an analog for CPS, but for &quot;normal&quot; people, you might have a hit on your hands, especially with the serious amateurs who don&#x27;t have the credits to get into CPS (or similar programs.)<p>Manufacturer partnerships would be the key to blowing this up. The straight peer-to-peer might work, but most pros with decent gear are going to take some serious convincing to loan their gear out. Things like lens alignment for example, are pretty hard to detect, so it isn&#x27;t as easy as AirBnB to determine &quot;damage.&quot; I also suspect the insurance requirements might be pretty difficult.<p>Good luck! Great idea.", "parent": 6161530.0, "deleted": null, "dead": null, "descendants": null, "id": 6161676, "ranking": null, "date": 1375725511000, "year": 2013}, {"by": "rbehrends", "score": null, "time": 1375844735, "timestamp": 1375844735000, "title": "", "type": "comment", "url": "", "text": "England and Wales. While the CPS has moved towards having more permanently employed barristers, it still regularly hires barristers in private practice to represent the Crown in the lower courts as so-called &quot;agents&quot; that are &quot;instructed&quot; by the CPS [1].<p>This has largely historical reasons; until not so long ago, England did not have designated prosecutors (in fact, well into the 19th century it often fell to private citizens to initiate prosecution, until the police started to take over that role).<p>That said, the CPS will likely still have more resources at its disposal than public defenders.<p>[1] <a href=\"http://www.euro-justice.com/member_states/england_wales/country_report/451/\" rel=\"nofollow\">http:&#x2F;&#x2F;www.euro-justice.com&#x2F;member_states&#x2F;england_wales&#x2F;coun...</a>", "parent": 6170185.0, "deleted": null, "dead": null, "descendants": null, "id": 6170572, "ranking": null, "date": 1375844735000, "year": 2013}, {"by": "Spooky23", "score": null, "time": 1375892884, "timestamp": 1375892884000, "title": "", "type": "comment", "url": "", "text": "If you dig into it, you&#x27;re probably looking at a relatively small subset of District Attorney&#x2F;State Attorneys whose offices handle a high volume of cases.<p>Look at anyone like a cop, nurse, teacher, CPS worker, etc that works in a highly dysfunctional community, you&#x27;ll find that some folks get really jaded and start to see things that don&#x27;t really exist. The things that these people see are horrible and some folks can&#x27;t cut it. It&#x27;s hard to unsee the 30-40 active child abuse cases that a Chicago CPS worker deals with every week, and the support structures in the organizations are often nonexistent, which allows bad behavior to take place.<p>They stop thinking of the people in the community as people and see them as perps. Potentially exonerating evidence is perceived as a speed-bump or excuse.", "parent": 6172822.0, "deleted": null, "dead": null, "descendants": null, "id": 6173824, "ranking": null, "date": 1375892884000, "year": 2013}, {"by": "silentOpen", "score": null, "time": 1376142916, "timestamp": 1376142916000, "title": "", "type": "comment", "url": "", "text": "Could you elaborate on Scala&#x27;s TCO support? I was under the impression that only self-tail calls are eliminated and only if the stack trace would be provably unused. Doesn&#x27;t the JVM require stack traces? Can you use CPS in Scala?<p>I see now that Scala can encode GADTs in case classes. What mechanism is available to encode polymorphic variants? Particularly, I am interested in writing matches over unions of polymorphic variant types.<p>I disagree that 2 and 3 are the same (structural module subtyping, nesting, inclusion differs from applicative functors). I believe you can achieve mixins with OCaml through the object system but it&#x27;s not clear to me that this addresses functor signature checking.<p>Another Scala bonus:\n5. Objects can implicitly be null.", "parent": 6191024.0, "deleted": null, "dead": null, "descendants": null, "id": 6191082, "ranking": null, "date": 1376142916000, "year": 2013}, {"by": "seanmcdirmid", "score": null, "time": 1376144179, "timestamp": 1376144179000, "title": "", "type": "comment", "url": "", "text": "Scala has TCO support, but maybe not as advanced as Ocaml, being limited by the JVM and all. CPS is heavily used in scala these days, as far as I can tell by reading Ingo Meir&#x27;s work.<p>I was confused about polymorphic variants. Scala doesn&#x27;t seem to have that.<p>I did a lot of work with units (dr. scheme-style functors) before, and when I moved to scala for my postdoc, I found all my patterns expressible using mixins and nominal types...I didn&#x27;t miss the modules (1st class or otherwise).<p>Scala has a non-null-ability option, but most programmers I think would find null damn convenient.", "parent": 6191082.0, "deleted": null, "dead": null, "descendants": null, "id": 6191136, "ranking": null, "date": 1376144179000, "year": 2013}, {"by": "harrytuttle", "score": null, "time": 1376575018, "timestamp": 1376575018000, "title": "", "type": "comment", "url": "", "text": "So am I! The moment the knife came out I was out of there like I was riding the last 1k of the Tour De France through the narrowest gap I could find.<p>To be fair, the police came and took a statement and tried to get the CPS to take it on but they wouldn&#x27;t as apparently there was no evidence (why they didn&#x27;t find the fucker and arrest him and search his car I don&#x27;t know).", "parent": 6217069.0, "deleted": null, "dead": null, "descendants": null, "id": 6217754, "ranking": null, "date": 1376575018000, "year": 2013}, {"by": "seanmcdirmid", "score": null, "time": 1376618705, "timestamp": 1376618705000, "title": "", "type": "comment", "url": "", "text": "I was expecting to read something about FRP or other naturally reactive programming models that dealt with the semantic complexity of callbacks, not just their syntactic complexity. I don&#x27;t think async constructs and others that depend on CPS techniques are really going to save us from complex programs that we barely understand.", "parent": 6220820.0, "deleted": null, "dead": null, "descendants": null, "id": 6221805, "ranking": null, "date": 1376618705000, "year": 2013}, {"by": "barrkel", "score": null, "time": 1376643160, "timestamp": 1376643160000, "title": "", "type": "comment", "url": "", "text": "I wrote about this very problem some time ago:<p><a href=\"http://blog.barrkel.com/2006/07/fun-with-asynchronous-methods-and.html\" rel=\"nofollow\">http:&#x2F;&#x2F;blog.barrkel.com&#x2F;2006&#x2F;07&#x2F;fun-with-asynchronous-method...</a><p>Await is basically a continuation-passing style transform that puts the continuation in the continue handler of the task. The exception handling is also no more or less syntax sugar than the CPS rewrite - it&#x27;s an error continuation that needs to be routed by querying the underlying Task&#x27;s properties.<p>But the really great thing is that you can finally just thread the async keyword through your call stack to get the CPS effect across multiple method call boundaries, <i>even your case of a sorting function</i>. It&#x27;s not just applicable for a single callback; the second half, the implementation half, is also implemented, so you&#x27;re not just limited to using the pattern, but creating new instances easily too.", "parent": 6221095.0, "deleted": null, "dead": null, "descendants": null, "id": 6222878, "ranking": null, "date": 1376643160000, "year": 2013}, {"by": "ufo", "score": null, "time": 1376692908, "timestamp": 1376692908000, "title": "", "type": "comment", "url": "", "text": "I dont think its a matter of functional vs imperative. In fact, functional languages give some of the best tools to avoid having to write callbacks by hand. For example, in LISPs the language tends to have explicit support for converting non callback code to CPS (call&#x2F;cc and thigns like that) and in Haskell you have do-notation to get rid of the nesting and hide the callbacks behind some syntax sugar.", "parent": 6225254.0, "deleted": null, "dead": null, "descendants": null, "id": 6227139, "ranking": null, "date": 1376692908000, "year": 2013}, {"by": "ezy", "score": null, "time": 1376726271, "timestamp": 1376726271000, "title": "", "type": "comment", "url": "", "text": "If you remember the (gnu, ossp) pth library or any of the various cooperative multitasking equivalents for C, this is all the people raised on javascript, who started writing callback APIs for C#&#x2F;ObjC discovering the same idea.<p>await is equivalent to &quot;yield&quot; or &quot;wait&quot; in most of those systems.  The idea is to pause execution and jump back to the cooperative scheduler, which will eventually execute the function call in question.  Once that call ends up with a result, the scheduler will then (eventually) resume your function with the result at the point you yielded.  In the midst of all that, various other threads of control will be scheduled briefly -- for instance, the ones servicing sockets and whatnot.  It&#x27;s all single threaded and cooperative -- typically with an event system embedded.<p>Part of the callback &quot;mess&quot; is the result of the short memory of our industry.  I was working with these kinds of systems in C code years and years ago.  It didn&#x27;t take long for most people to realize that you wanted to abstract the callbacks to the scheduler so you were writing your code instead fucking with the state machine mechanism used to implement the cooperative framework in question.  No references to abstract CSP (or CPS :-)) ideas needed, really -- it&#x27;s basic practical knowledge that seems to have been ignored over time.", "parent": 6221807.0, "deleted": null, "dead": null, "descendants": null, "id": 6228499, "ranking": null, "date": 1376726271000, "year": 2013}, {"by": "Nitramp", "score": null, "time": 1376743501, "timestamp": 1376743501000, "title": "", "type": "comment", "url": "", "text": "Well, Q allows you to attach an error handler with catch:<p><pre><code>    bla().\n        then(something).\n        then(someOther).\n        catch(ohNoes);\n</code></pre>\nFirst, this gives you really bad stack traces, essentially you have no chance to figure out what happened before your error handler got called. You can get slightly less bizarre stack traces with `Q.longStackSupport = true;`, but that has a serious performance impact (creating a new throwable per invocation).<p>Second, if you try to get better code structure by breaking up your program into named functions (&#x27;something&#x27;, &#x27;someOther&#x27; above), you loose locality, i.e. your error handler does not share a scope with its causing code. You can fix that by passing the entire promise to a processing function, but this again obscures things.<p>Compared to a program that just does:<p><pre><code>    x := bla();\n    var y;\n    try {\n      y = something(x);\n    } catch(...) { ... }\n    return someOther(y);\n</code></pre>\nThe promise code is still a lot more complicated. I agree with Miguel de Icaza, continuation passing style&#x2F;callbacks do destroy &#x27;natural&#x27; program structure, and make it much harder to use the regular programming language&#x27;s idioms (loops, returns, ...).<p>I&#x27;d be hugely in favour of go&#x27;s approach with very cheap goroutines, so you don&#x27;t actually have to use CPS just because your runtime isn&#x27;t clever enough to use more than one thread (<i>ahem</i> node). OTOH go&#x27;s lack of exceptions kills the whole argument by bringing back the error handling of the 80s :-(", "parent": 6228706.0, "deleted": null, "dead": null, "descendants": null, "id": 6228943, "ranking": null, "date": 1376743501000, "year": 2013}, {"by": "shabble", "score": null, "time": 1376954387, "timestamp": 1376954387000, "title": "", "type": "comment", "url": "", "text": "There are, I believe (IANAL) quite specific rules around the use of &#x27;adverse inference&#x27;[1], which is the way in which your lack of answers can be used.<p>On reading through the CPS guidance linked, the sheer complexity and number of potentially critical missteps someone unaware of the details could make is enlightening.<p>Say Nothing. Get a Lawyer. (Cue &quot;Never talk to the police&quot; youtube link... I wonder if there is a comprehensive UK equivalent?)<p>[1] <a href=\"http://www.cps.gov.uk/legal/a_to_c/adverse_inferences/\" rel=\"nofollow\">http:&#x2F;&#x2F;www.cps.gov.uk&#x2F;legal&#x2F;a_to_c&#x2F;adverse_inferences&#x2F;</a>", "parent": 6240435.0, "deleted": null, "dead": null, "descendants": null, "id": 6240564, "ranking": null, "date": 1376954387000, "year": 2013}, {"by": "anonymoushn", "score": null, "time": 1377024122, "timestamp": 1377024122000, "title": "", "type": "comment", "url": "", "text": "Some people think that async code phrased as though it was blocking code is easier to read, write, and modify.  This is because the workflow for writing async code with callbacks is basically<p><pre><code>  1. Imagine the control flow you actually want.\n  2. Manually perform some subset of a CPS transform around the parts that would block.\n  3. Write the result of 2 and check it in.\n</code></pre>\nAnd then the workflow for updating it is<p><pre><code>  a. Read the code.\n  b. Attempt to reconstruct a mental model of the originally-desired control flow from the mess.\n  c. goto 1.\n</code></pre>\nIf you have some simulation&#x2F;game in which many entities need to interact, you can use coroutines and write each entity&#x27;s routine(s) imperatively.  For example, BulletML lets you do this by embedding a suspendable domain-specific language in your project.  If you check out <a href=\"http://www.youtube.com/watch?v=uK_YTyhj7T4\" rel=\"nofollow\">http:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=uK_YTyhj7T4</a>, every bullet that either fires other bullets or changes velocity has one or more functions attached to it, and they are all running concurrently.  It might be even better to do this without using an extra language, though.", "parent": 6244459.0, "deleted": null, "dead": null, "descendants": null, "id": 6245708, "ranking": null, "date": 1377024122000, "year": 2013}, {"by": "VladRussian2", "score": null, "time": 1378248776, "timestamp": 1378248776000, "title": "", "type": "comment", "url": "", "text": "sounds like negligent parents waiting for a CPS visit to happen to enforce those social mores :) Fortunately, you seems to live among similarly &quot;negligent neighbors&quot;.<p>Once, we picked up an obviously lost dog on a mountain road and dropped it at the first fire station after the phone on its collar resulted in a voicemail. It was during our 1st year in the US and the thing &quot;what if the dog was stolen and we stopped by police while the dog is in our car&quot; didn&#x27;t even cross our mind. Now after 13 years here, i&#x27;m wondering what i&#x27;d do if it was say a child (and there is no collar with the phone to leave voicemail) ...", "parent": 6324191.0, "deleted": null, "dead": null, "descendants": null, "id": 6324405, "ranking": null, "date": 1378248776000, "year": 2013}, {"by": "zaphar", "score": null, "time": 1378308509, "timestamp": 1378308509000, "title": "", "type": "comment", "url": "", "text": "We got visited once. Turns out the CPS for the most part isn&#x27;t really interested in Parents who love their kids enough to let them experience a little pain. They were there less than 30 minutes.", "parent": 6324405.0, "deleted": null, "dead": null, "descendants": null, "id": 6328210, "ranking": null, "date": 1378308509000, "year": 2013}, {"by": "VladRussian2", "score": null, "time": 1378320129, "timestamp": 1378320129000, "title": "", "type": "comment", "url": "", "text": "i knew that! :) you&#x27;re just lucky to have negligent CPS as well :) Sounds like you&#x27;re living in Negligent State of America ... err ... scrap that, as it is from another opera", "parent": 6328210.0, "deleted": null, "dead": null, "descendants": null, "id": 6329541, "ranking": null, "date": 1378320129000, "year": 2013}, {"by": "purplelobster", "score": null, "time": 1378357386, "timestamp": 1378357386000, "title": "", "type": "comment", "url": "", "text": "You seriously had CPS called on you? By neighbors?", "parent": 6328210.0, "deleted": null, "dead": null, "descendants": null, "id": 6332281, "ranking": null, "date": 1378357386000, "year": 2013}, {"by": "drdaeman", "score": null, "time": 1378401165, "timestamp": 1378401165000, "title": "", "type": "comment", "url": "", "text": "Any reason <i>large number</i> of libraries should even know about they&#x27;re using evented&#x2F;async IO? I believe most of them consist of purely sequential actions (say, &quot;connect <i>then</i> send <i>then</i> receive <i>then</i> process <i>then</i> return&quot;) and gain no benefit from non-blocking (function-wise, not program-wise) IO. If the core is smart enough to run them as coroutines (for example see Python&#x27;s gevent.monkey) that yield back to event loop on waiting for IO, they&#x27;ll automagically do the right thing without being infested with CPS callback ladder hell.", "parent": 6335062.0, "deleted": null, "dead": null, "descendants": null, "id": 6335393, "ranking": null, "date": 1378401165000, "year": 2013}, {"by": "vwinsyee", "score": null, "time": 1379113489, "timestamp": 1379113489000, "title": "", "type": "comment", "url": "", "text": "Overall teen employment is very, very slightly affected by a minimum wage, after adjusting for spatial and temporal inhomogeneity. At least that&#x27;s the consensus from most recent articles I&#x27;ve seen on the topic.<p>The consensus <i>is</i> less conclusive on specific effects on minority groups. I&#x27;ve seen at least one paper showing short-term unemployment increase in minority groups. I&#x27;ve also seen at least one paper showing increased employment&#x2F;earnings in younger, more affluent teens.<p>Some of the recent well-cited studies:<p><a href=\"http://www.irle.berkeley.edu/workingpapers/166-08.pdf\" rel=\"nofollow\">http:&#x2F;&#x2F;www.irle.berkeley.edu&#x2F;workingpapers&#x2F;166-08.pdf</a> (2011)\nLooking at 1990-2009 CPS data: &quot;Including controls for long-term growth differences among states and for heterogeneous economic shocks renders the employment and hours elasticities indistinguishable from zero and rules out any but very small disemployment effects. Dynamic evidence further shows the nature of bias in traditional estimates, and it also rules out all but very small negative long-run effects.&quot;<p><a href=\"http://onlinelibrary.wiley.com/doi/10.1111/j.1467-8543.2009.00723.x/full\" rel=\"nofollow\">http:&#x2F;&#x2F;onlinelibrary.wiley.com&#x2F;doi&#x2F;10.1111&#x2F;j.1467-8543.2009....</a> (2009) \n&quot;A 10 per cent increase in the minimum wage reduces employment by about 0.10 per cent (see column 4 of Table 3). But even if this adverse employment effect were true, it would be of no practical relevance. An elasticity of \u22120.01 has no meaningful policy implications. If correct, the minimum wage could be doubled and cause only a 1 per cent decrease in teenage employment.&quot;", "parent": 6383566.0, "deleted": null, "dead": null, "descendants": null, "id": 6383754, "ranking": null, "date": 1379113489000, "year": 2013}, {"by": "natural219", "score": null, "time": 1379182111, "timestamp": 1379182111000, "title": "", "type": "comment", "url": "", "text": "A couple of years ago I did a research project using the current population survey (CPS) from the BLS and I was surprised about how much interesting data there is.<p>I&#x27;m not sure if they&#x27;ve improved since 2011, but at the time it was very hard to parse and order the public data sets since the headers have changed so much over time and the data is not harmonized.  I can&#x27;t tell if BLS has done much data consolidation through this API, but if you&#x27;re looking to consume this data I recommend just downloading it and parsing it yourself.<p>The IPUMS project from the University of Minnesota[1] is an excellent resource for anyone actually wanting to look at BLS &#x2F; CPS data over time.  They do a lot of the gruntwork for gathering CPS results across the years and synthesizing the various codes, field names, and standards into a coherent data set.<p>For anyone interested in actually using CPS data, a colleague and I wrote a (rather shitty) Java program to parse IPUMS data into a local longitudinal dataset.  The code was written by sophomores in college, so I can&#x27;t promise that this code is any good, but it&#x27;s probably a good place to get started if you&#x27;re interested[2].<p>[1] <a href=\"http://www.ipums.org/\" rel=\"nofollow\">http:&#x2F;&#x2F;www.ipums.org&#x2F;</a>\n[2] <a href=\"https://github.com/c-johnson/CPSMatcher\" rel=\"nofollow\">https:&#x2F;&#x2F;github.com&#x2F;c-johnson&#x2F;CPSMatcher</a>", "parent": 6385445.0, "deleted": null, "dead": null, "descendants": null, "id": 6386479, "ranking": null, "date": 1379182111000, "year": 2013}, {"by": "Peaker", "score": null, "time": 1379419093, "timestamp": 1379419093000, "title": "", "type": "comment", "url": "", "text": "&gt; It appears that in the presence of mutable state, a lot of the advantages of monads become moot.<p>In the simpler cases where use of monads can be replaced by simple mutable state -- you still lose out on the explicit types of the mutating vs. pure code.<p>For example, STM is possible because mutating effects are typed, and so can be ruled out of STM transactions.<p>And in the more complex monads (e.g: transformer stacks), mutable state is just not good enough. You can compose transformers to build things that mutable state simply cannot express, and you&#x27;d have to CPS transform your code and avoid mutable state to express those things.<p>For example, these two monads:<p><pre><code>  ListT (ParsecT m)\n  ParsecT (ListT m)\n</code></pre>\nHave no corresponding &quot;mutable state&quot; representations.", "parent": 6398393.0, "deleted": null, "dead": null, "descendants": null, "id": 6398725, "ranking": null, "date": 1379419093000, "year": 2013}, {"by": "tel", "score": null, "time": 1379426633, "timestamp": 1379426633000, "title": "", "type": "comment", "url": "", "text": "That&#x27;s a really great point that I rarely see come up. Yes, Haskell makes you &quot;recreate&quot; the RWST monad stack that imitates impure languages... but the same tools also let you build other &quot;language domains&quot; which are fiendishly difficult to implement in non-pure settings (on par with CPS transforming yourself into the mother monad and then working backwards from there).<p>On Lisp has a chapter devoted to making a leaky macro-based CPS transformer for Common List. ContT adds CPS to any monad stack as quickly as<p><pre><code>    newtype ContT r m a = ContT { runContT :: (a -&gt; m r) -&gt; m r }</code></pre>", "parent": 6398725.0, "deleted": null, "dead": null, "descendants": null, "id": 6399298, "ranking": null, "date": 1379426633000, "year": 2013}, {"by": "zamalek", "score": null, "time": 1382525322, "timestamp": 1382525322000, "title": "", "type": "comment", "url": "", "text": "This is similar to my asyncscript pet project[1] (that was met with much resistance on the Node.js mailing list as it was Yet Another CPS Framework). It drew inspiration from the way that C# creates the state machines for &quot;yield&quot; and &quot;await&quot;. The project is dead (it only dealt with async calls and I never got round to &quot;enumeration generators&quot;), but if you are wondering how regenerator works I have a nice explanation at the bottom of readme.md.<p>[1]: <a href=\"https://github.com/jcdickinson/asyncscript\" rel=\"nofollow\">https:&#x2F;&#x2F;github.com&#x2F;jcdickinson&#x2F;asyncscript</a>", "parent": 6594207.0, "deleted": null, "dead": null, "descendants": null, "id": 6597973, "ranking": null, "date": 1382525322000, "year": 2013}, {"by": "barrkel", "score": null, "time": 1382795598, "timestamp": 1382795598000, "title": "", "type": "comment", "url": "", "text": "It looks like a CPS transform, which can be  very useful; but I think it&#x27;s something you&#x27;d rather opt in to rather than apply everywhere.", "parent": 6616865.0, "deleted": null, "dead": null, "descendants": null, "id": 6617378, "ranking": null, "date": 1382795598000, "year": 2013}, {"by": "djjaxe", "score": null, "time": 1383231746, "timestamp": 1383231746000, "title": "", "type": "comment", "url": "", "text": "&quot;Engineer? of software?&quot; I know he is an engineer of software I was not disputing that. If you read my first comment I knew that I was disputing that he had any right to comment on hardware as he did which would put him into the electrical or mechanical engineering. As for getting hired with a CPS as a software engineer, uh yeah it&#x27;s not identical but that&#x27;s the same area as I mentioned in my later posts.", "parent": 6645943.0, "deleted": null, "dead": null, "descendants": null, "id": 6647172, "ranking": null, "date": 1383231746000, "year": 2013}, {"by": "implicit_cast", "score": null, "time": 1383589869, "timestamp": 1383589869000, "title": "", "type": "comment", "url": "", "text": "It&#x27;s not just you.<p>Haskell is worth the effort, but I don&#x27;t think the article&#x27;s author did a great job of articulating why.<p>Some things I&#x27;ve noticed:<p>Haskell does not automatically admit an extra &quot;null&quot; value to every type, so you can ordinarily ignore NullPointerExceptions and the like.  When you do need a nullable bit of data, you have to do some extra work: You must rename the type from &quot;Foo&quot; to &quot;Maybe Foo&quot; and change all the callsites.  These callsites must test for null and specify what happens. (there exists a non-terminating explode() function if you really want it) The build will fail until every last case is covered.  This is <i>great</i> for reliability.<p>Most data in Haskell is immutable.  This encourages good programming practice, sure, but it really pays off when you start writing parallel code.  Parallel Haskell is by far the easiest way I know to write fast concurrent stuff.  On that note, Haskell&#x27;s concurrency primitives are very well-designed.<p>Haskell&#x27;s solution to callback hell is more general and powerful than anything I know.  The &quot;do&quot; block is really just super elegant syntax sugar for a CPS chain.<p>Our unit test suite does not intermittently fail.  We restrict side effects such that our build will fail if a test tries to do non-faked I&#x2F;O.  It took a bit of effort to build, but normal use is effortless.", "parent": 6669844.0, "deleted": null, "dead": null, "descendants": null, "id": 6670227, "ranking": null, "date": 1383589869000, "year": 2013}, {"by": "stuhood", "score": null, "time": 1383838937, "timestamp": 1383838937000, "title": "", "type": "comment", "url": "", "text": "The section on forkIO vs forkOS is interesting because the author does not mention implementing green threads atop the JVM. It would be feasible for Frege and its core libraries to use an implementation of &quot;green threads&quot; based on Promises or CPS under the covers in order to implement a concurrency model indistinguishable from Haskell&#x27;s.<p>While it is true that the vast majority of JVM code you interact with is blocking and expects to own whatever OS thread it is running on, that <i>could</i> be treated as a concern of FFI, where untrusted&#x2F;blocking code in Java land gets dedicated OS threads (similar to FuturePools&#x2F;execution-contexts for scala Futures, or how you would manually isolate blocking code for Erlang or Go FFI.)<p>Additionally, the comment dismissing STM seems like an afterthought, because there are at least three JVM implementations (Clojure&#x27;s, Scala&#x27;s, and Multiverse)<p>But the main comment I was referring to was:<p><pre><code>  To do serious concurrent work in an JVM environment is\n  different and it will thus require different knowledge\n</code></pre>\n... which suggests that the author isn&#x27;t interested in supporting Haskell&#x27;s idiomatic concurrency model atop the JVM, and is instead fine with the status quo of blocking code.", "parent": 6689434.0, "deleted": null, "dead": null, "descendants": null, "id": 6689937, "ranking": null, "date": 1383838937000, "year": 2013}, {"by": "glenra", "score": null, "time": 1384049736, "timestamp": 1384049736000, "title": "", "type": "comment", "url": "", "text": "&gt; <i>it also reminds me of people who complain about CPS, but that&#x27;s just me</i><p>I give up; what does CPS stand for in this context?", "parent": 6704677.0, "deleted": null, "dead": null, "descendants": null, "id": 6704791, "ranking": null, "date": 1384049736000, "year": 2013}, {"by": "lobotryas", "score": null, "time": 1384056414, "timestamp": 1384056414000, "title": "", "type": "comment", "url": "", "text": "You make it sound like CPS is the innocent underdog trying to do good.  How do you reconcile that with the long list of criticism the organization has drawn over the years? <a href=\"http://en.wikipedia.org/wiki/Child_Protective_Services#Criticism\" rel=\"nofollow\">http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Child_Protective_Services#Criti...</a> ?", "parent": 6704815.0, "deleted": null, "dead": null, "descendants": null, "id": 6705139, "ranking": null, "date": 1384056414000, "year": 2013}, {"by": "skrishnamurthi", "score": null, "time": 1384145711, "timestamp": 1384145711000, "title": "", "type": "comment", "url": "", "text": "No doubt. Things with optional arguments, keyword arguments, all sorts of contraptions like that. That&#x27;s why we&#x27;ve studiously avoided such things.<p>Still, there&#x27;s an asymmetry, at least to our minds, between calls and returns, so the argument put forth for multiple values (&quot;a function can take multiple arguments, why can&#x27;t it return multiple answers?&quot; -- made especially compelling in a CPS context, because returns turn into calls) doesn&#x27;t quite play out in practice.<p>Ergo, no multiple return values.", "parent": 6709721.0, "deleted": null, "dead": null, "descendants": null, "id": 6710019, "ranking": null, "date": 1384145711000, "year": 2013}, {"by": "Peaker", "score": null, "time": 1384455009, "timestamp": 1384455009000, "title": "", "type": "comment", "url": "", "text": "Concepts and good ideas being repeated and stolen is great!<p>However, the problem is repeating <i>mistakes</i>.  Go&#x27;s nullability, lack of generics, ...  Node doing manual CPS where past work (e.g: Haskell) does non-blocking IO without forcing manual CPS on the programmer.<p>It would be nice if we learned not to repeat past mistakes...", "parent": 6732139.0, "deleted": null, "dead": null, "descendants": null, "id": 6734490, "ranking": null, "date": 1384455009000, "year": 2013}, {"by": "jaegerpicker", "score": null, "time": 1384456473, "timestamp": 1384456473000, "title": "", "type": "comment", "url": "", "text": "The problem lies in that not everyone agrees on what are mistakes and what isn&#x27;t. I know a lot of go programmers who do  not want generics. Many also disagree that manual CPS is a mistake.", "parent": 6734490.0, "deleted": null, "dead": null, "descendants": null, "id": 6734718, "ranking": null, "date": 1384456473000, "year": 2013}, {"by": "reirob", "score": null, "time": 1385119655, "timestamp": 1385119655000, "title": "", "type": "comment", "url": "", "text": "Fascinating read.<p>&quot;[..] I had never been to California before, so I was discovering San\nFrancisco, my favorite city in the US and second-favorite city in the world.\n[..]&quot;<p>Out of curiosity does somebody know what is PG&#x27;s first-favorite city in the\nworld?<p>&quot;[..] It was also a massive validation of a thesis Steele had argued for his\nMaster&#x27;s, which was that CPS was a great intermediate representation for a\ncompiler [..]&quot;<p>What does CPS mean? Further down in the article<p>&quot;[..] Richard Kelsey took his front end, which was a very aggressive CPS-based\noptimiser, and extended it all the way down to the ground to produce a\ncomplete, second compiler, which he called &quot;TC&quot; for the &quot;Transformational\nCompiler.&quot; His approach was simply to keep transforming the program from one\nsimple, CPS, lambda language to an even simpler one, until the language was so\nsimple it only had 16 variables... r1 through r15, at which time you could\njust kill the lambdas and call it assembler. [..]&quot;<p>So I guess CPS means Continuation-Passing-Style? But then I wonder what PG\nmeans by &quot;CPS was a great intermediate representation for a compiler&quot;?<p>Even further down we can see PG&#x27;s own opinion:<p>&quot;[..] So the lineage of the CPS-as-compiler-IR thesis goes from Steele&#x27;s\nRabbit compiler through T&#x27;s Orbit to SML&#x2F;NJ. At which point Sabry &amp; Felleisen\nat Rice published a series of very heavy-duty papers dumping on CPS as a\nrepresentation and proposing an alternate called A-Normal Form. ANF has been\nthe fashionable representation for about ten years now; CPS is out of favor.\nThis thread then sort of jumps tracks over to the CMU ML community, where it\npicks up the important typed-intermediate-language track and heads to Cornell,\nand Yale, but I&#x27;m not going to follow that now. However, just to tell you\nwhere I am on this issue, I think the whole movement from CPS to ANF is a bad\nidea (though Sabry &amp; Felleisen&#x27;s technical observations and math are as rock solid as one would expect from people of their caliber). [..]<p>Fascinating stuff, though I do not what IRs are used by the\nmodern compilers like LLVM, GHC, Java, .Net?<p>&quot;[..] Jim Philbin, like Kelsey, also went to NEC, where he built an operating\nsystem tuned for functional programming languages, STING (or perhaps it was\nspelled &quot;STNG&quot; -- in any event it was pronounced &quot;sting&quot;). He built it in T,\nof course, and one could see that it had its roots in his work on T3.\n(Implementing the runtime for a functional language, in some sense, requires\nyou to implement a little virtual OS on top of the real, underlying OS.) [..]&quot;\n- Does anybody know what happened to this OS? The only link that I found is \n<a href=\"http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.11.4692\" rel=\"nofollow\">http:&#x2F;&#x2F;citeseerx.ist.psu.edu&#x2F;viewdoc&#x2F;summary?doi=10.1.1.11.4...</a><p>The summary of this article then goes to say &quot;[..] Sting is currently a\nprototype implemented on an eight processor Silicon Graphics PowerSeries 480\nrunning Unix. The next step is to integrate Sting into the micro-kernel of an\noperating system such as Mac [..]&quot; - Would be interesting if this fruited in\nsome new works for VMs for functional languages.", "parent": 6778754.0, "deleted": null, "dead": null, "descendants": null, "id": 6780244, "ranking": null, "date": 1385119655000, "year": 2013}, {"by": "mzl", "score": null, "time": 1385120231, "timestamp": 1385120231000, "title": "", "type": "comment", "url": "", "text": "CPS is short for continuation passing style (<a href=\"http://en.wikipedia.org/wiki/Continuation-passing_style\" rel=\"nofollow\">http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Continuation-passing_style</a>).", "parent": 6780244.0, "deleted": null, "dead": null, "descendants": null, "id": 6780268, "ranking": null, "date": 1385120231000, "year": 2013}, {"by": "larsberg", "score": null, "time": 1385121907, "timestamp": 1385121907000, "title": "", "type": "comment", "url": "", "text": "&gt; Fascinating stuff, though I do not what IRs are used by the modern \n&gt; compilers like LLVM, GHC, Java, .Net?<p>There are a couple of things going on with CPS as implemented in this style of compilers that make it particularly nice for writing optimization passes:<p>1) There are only function calls (&quot;throws&quot;) and no returns. Though there&#x27;s no theoretical reduction in the stuff you have to track (since what is a direct-style return is now a throw to the rest of the program starting at the return point), there&#x27;s a huge reduction in in the complexity of your optimizations because you&#x27;re not tracking the extra thing. For some examples, you can look in the Manticore codebase where even simple optimizations like contraction and let-floating are implemented in both our early direct-style IR (BOM) and our CPS-style IR (CPS). The latter is gobs more readable, and there&#x27;s no way at all I&#x27;d be willing to port most of the harder optimizations like reflow-informed higher-order inlining or useless variable elimination to BOM.<p>2) IRs are cheap in languages like lisp and ML. So you write optimizations as a tree-to-tree transformation (micro-optimization passes). This style makes it much easier to enforce invariants. If you look at the internals of most compilers written in C++, you&#x27;ll see far fewer copies of the IR made and a whole bunch of staged state in the object that&#x27;s only valid at certain points in the compilation process (e.g., symbols fully resolved only after phase 2b, but possibly invalid for a short time during optimization 3d unless you call function F3d_resolve_symbol...). Just CPS&#x27;ing the representation of a C++ compiler without also making it easy to write your optimization passes as efficient tree-to-tree transformations will not buy you much, IMO.", "parent": 6780244.0, "deleted": null, "dead": null, "descendants": null, "id": 6780322, "ranking": null, "date": 1385121907000, "year": 2013}, {"by": "barrkel", "score": null, "time": 1385633147, "timestamp": 1385633147000, "title": "", "type": "comment", "url": "", "text": "Most languages don&#x27;t have reliable enough tail call elimination to implement CPS without trampoline techniques to get rid of the excess stack frames, which in turn has a fairly hefty performance impact unless you&#x27;re using it for something high-level like async callbacks.", "parent": 6813760.0, "deleted": null, "dead": null, "descendants": null, "id": 6813880, "ranking": null, "date": 1385633147000, "year": 2013}, {"by": "icegreentea", "score": null, "time": 1388102516, "timestamp": 1388102516000, "title": "", "type": "comment", "url": "", "text": "Ugh, had to go scurrying around to find this info (really wish they linked it directly), but here&#x27;s the actual proposal (and its press release):<p>1) In the next three years, every high school will offer a foundational \u201cExploring Computer Science\u201d course. (This is a survey course - my note)<p>2) In the next five years, at least half of all high schools will also offer an AP Computer Science course. (My note: AP CS is a Java based course that looks roughly comparable to first year computer engineering courses, including algorithms and data structure... I&#x27;ve never taken AP CS, but I bet lots of people here have, and they can probably elaborate on its usefulness)<p>3) Chicago will also be the first US urban district to offer a K-8 computer science pathway, reaching one in four elementary schools in the next five years.<p>4) Within five years, CPS will allow computer science to count as a graduation requirement (e.g. possibly as a math, science, or foreign language credit). Only thirteen other states have elevated computer science to a core subject instead of an elective.<p><a href=\"http://www.cityofchicago.org/city/en/depts/mayor/press_room/press_releases/2013/december_2013/mayor-emanuel-and-cps-ceo-barbara-byrd-bennett-announce-comprehe.html\" rel=\"nofollow\">http:&#x2F;&#x2F;www.cityofchicago.org&#x2F;city&#x2F;en&#x2F;depts&#x2F;mayor&#x2F;press_room&#x2F;...</a><p>And for reference, here is CPS&#x27; current requirements for highscool graduation:\n<a href=\"http://www.cps.edu/SiteCollectionDocuments/PromotionPolicy/HSGraduationReq_English.pdf\" rel=\"nofollow\">http:&#x2F;&#x2F;www.cps.edu&#x2F;SiteCollectionDocuments&#x2F;PromotionPolicy&#x2F;H...</a>", "parent": 6968425.0, "deleted": null, "dead": null, "descendants": null, "id": 6968737, "ranking": null, "date": 1388102516000, "year": 2013}, {"by": "SEMW", "score": null, "time": 1388503381, "timestamp": 1388503381000, "title": "", "type": "comment", "url": "", "text": "&gt; I wonder how can he be violating any law with respect to distribution of copyrighted content when he is not distributing anything<p>Anton Vickerman didn&#x27;t host anything either. His site (surfthechannel) was also just a collection of links.<p>And, sure enough, he was held not to have committed any copyright-related offence.<p>So they got him on conspiracy to defraud [the record companies] instead. He&#x27;s now serving a four year prison term after a private prosecution by FACT, a copyright industry trade organisation - an extraordinary move, initiated after the CPS (state prosecutors) refused to prosecute him.  (Note: this is in the UK, not the US).<p><a href=\"http://en.wikipedia.org/wiki/Anton_Vickerman\" rel=\"nofollow\">http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Anton_Vickerman</a><p><a href=\"http://arstechnica.com/tech-policy/2012/08/private-justice-how-hollywood-money-put-a-brit-behind-bars/\" rel=\"nofollow\">http:&#x2F;&#x2F;arstechnica.com&#x2F;tech-policy&#x2F;2012&#x2F;08&#x2F;private-justice-h...</a>", "parent": 6990633.0, "deleted": null, "dead": null, "descendants": null, "id": 6990862, "ranking": null, "date": 1388503381000, "year": 2013}, {"by": "goggles99", "score": null, "time": 1388795968, "timestamp": 1388795968000, "title": "", "type": "comment", "url": "", "text": "&gt;<i>Should the British government forcibly prevent you from drinking Coca-Cola because it&#x27;s bad for you?</i><p>Your example is bad. These two things are clearly not the same. Porn (even in a small dose) for young children is almost universally accepted to cause long term psychological damage. Cola in a small dose is universally accepted to cause zero long tern harm. I think that if you gave your kid enough Cola to where it was universally accepted to cause major long term harm to them - CPS would come take that kid from you and you would likely be arrested for child endangerment (thus it is against the law).<p>Secondly the govt is not forcibly preventing you from uncensored internet. It is the ISPs, and not forcibly, all you have to do is acknowledge that you want it (this could hardly be considered forcible)<p>If a 4 year old kid drinks a bottle of soda, how will that affect them for the rest of their life? If a 4 year old kid watches a (simulated) hardcore porn rape scene, is that more likely to affect them negatively for the rest of his or her life?<p>How does that kid get at the soda? usually their parents or caretaker gives it to them right? Is that how they usually run across porn randomly on the web too? Maybe parents should watch kids every second they are online, but that is hardly possible with the ubiquity of internet devices today. At least if a kid sneaks a Cola at 2am whilst his parents are asleep - it is clearly missing the next day. Not so obvious if they were sneaking out and surfing the web incognito.", "parent": 7006677.0, "deleted": null, "dead": null, "descendants": null, "id": 7009269, "ranking": null, "date": 1388795968000, "year": 2014}, {"by": "agumonkey", "score": null, "time": 1388821974, "timestamp": 1388821974000, "title": "", "type": "comment", "url": "", "text": "I learned about CPS in Lisps but never in &quot;pure&quot; C, making [3] a very interesting read.", "parent": 7009805.0, "deleted": null, "dead": null, "descendants": null, "id": 7010413, "ranking": null, "date": 1388821974000, "year": 2014}, {"by": "carterschonwald", "score": null, "time": 1388822369, "timestamp": 1388822369000, "title": "", "type": "comment", "url": "", "text": "neat! (relatedly: GHC actually does a CPS transform towards the end of compilation phases)", "parent": 7009805.0, "deleted": null, "dead": null, "descendants": null, "id": 7010421, "ranking": null, "date": 1388822369000, "year": 2014}, {"by": "whatevsbro", "score": null, "time": 1388883070, "timestamp": 1388883070000, "title": "", "type": "comment", "url": "", "text": "&gt; I think that if you gave your kid enough Cola to where it was universally accepted to cause major long term harm to them - CPS would come take that kid from you and you would likely be arrested for child endangerment (thus it is against the law).<p>Oh? Well, what if you spank your child? -That certainly causes psychological harm. Does CPS take people&#x27;s children away for clearly causing long term harm to them in that way?<p>&gt; Secondly the govt is not forcibly preventing you from uncensored internet. It is the ISPs, and not forcibly, all you have to do is acknowledge that you want it (this could hardly be considered forcible)<p>This has been covered elsewhere. But you do realize that it&#x27;s the government that runs those block lists, and that they can put whatever they want in there, don&#x27;t you? For example, I don&#x27;t think China approves of Chinese people reading naughty anti-government material. You see, people need to be protected from something so disconcerting and potentially harmful (to the government itself).<p>&gt; How does that kid get at the soda? usually their parents or caretaker gives it to them right? Is that how they usually run across porn randomly on the web too? Maybe parents should watch kids every second they are online, but that is hardly possible with the ubiquity of internet devices today. At least if a kid sneaks a Cola at 2am whilst his parents are asleep - it is clearly missing the next day. Not so obvious if they were sneaking out and surfing the web incognito.<p>They&#x27;re going to be exposed to porn and even actively seek it out eventually anyway. I&#x27;m not saying little kids should be watching porn, but I&#x27;m not sure it would harm them either. Recently, my sister&#x27;s 3-year-old daughter happened to witness a sex scene in some soap opera that was running in the background while we had dinner. She just completely disregarded it.", "parent": 7009269.0, "deleted": null, "dead": null, "descendants": null, "id": 7013838, "ranking": null, "date": 1388883070000, "year": 2014}, {"by": "eldude", "score": null, "time": 1389141733, "timestamp": 1389141733000, "title": "", "type": "comment", "url": "", "text": "You&#x27;re talking about the core&#x2F;userland boundary beyond the origin tick, and we&#x27;re both right. Promises coerce caught exceptions occurring on the origin tick to errors (bad), while allowing non-caught async errors to be handled in a custom manner as you point out.<p>The comments following your linked comment address this nuance. I agree with Raynos that the core of the issue is as I point out here, 2 divergent incompatible error handling mechanisms, with both of them fundamentally broken:<p>* error passing fails because we don&#x27;t have CPS due to lack of Proper Tail Calls<p>* throwing fails because we lack async try&#x2F;catch or at least with async generators we lack a performant try&#x2F;catch or with bluebird-like optimizations (hacks) we lack typed catch and Error.create<p>The latter is far closer to a consistent error handling pattern than the former, which promises implement (poorly and verbosely IMO). Additionally, async generators also nicely address the issue of slicing your userland stack away from core, so you get a two for one.", "parent": 7020872.0, "deleted": null, "dead": null, "descendants": null, "id": 7021010, "ranking": null, "date": 1389141733000, "year": 2014}, {"by": "goggles99", "score": null, "time": 1389147206, "timestamp": 1389147206000, "title": "", "type": "comment", "url": "", "text": "&gt;<i>Oh? Well, what if you spank your child? -That certainly causes psychological harm. Does CPS take people&#x27;s children away for clearly causing long term harm to them in that way?</i><p>There is no conclusive proof that spanking children causes psy harm. Nor is there a consensus of people who think is is. Every large study about psy effects by spanking is split one way or the other. A study of these study organizers found that the study results were always slanted in the favor of their original opinion. Your statement is (thus far) non deterministic and thus factually and even consensually incorrect.<p>&gt;<i>This has been covered elsewhere. But you do realize that it&#x27;s the government that runs those block lists, and that they can put whatever they want in there, don&#x27;t you? For example, I don&#x27;t think China approves of Chinese people reading naughty anti-government material. You see, people need to be protected from something so disconcerting and potentially harmful (to the government itself).</i><p>China? I thought we were talking about England here... No, the govt there does not maintain the lists there. That is one of the issues that some here are taking. There is no centralized list.<p>&gt;<i>They&#x27;re going to be exposed to porn and even actively seek it out eventually anyway. I&#x27;m not saying little kids should be watching porn, but I&#x27;m not sure it would harm them either. Recently, my sister&#x27;s 3-year-old daughter happened to witness a sex scene in some soap opera that was running in the background while we had dinner. She just completely disregarded it.</i><p>A soap opera is a far stretch from rape pornography. And how do you really know how your niece was affected deep down? Perhaps she is even desensitized to seeing things like this since apparently her parents just let her see it.<p>Since you are <i>not sure</i> it would harm kids to watch porn I guess it is all right then huh? How is this even an argument? <i>I&#x27;m not sure it would harm them</i> Are you kidding me? I certainly hope you don&#x27;t have kids anytime soon. BTW, the consensus of physiologists, studies and general public conclude that it IS rather harmful to kids.", "parent": 7013838.0, "deleted": null, "dead": null, "descendants": null, "id": 7021251, "ranking": null, "date": 1389147206000, "year": 2014}, {"by": "ufo", "score": null, "time": 1390932026, "timestamp": 1390932026000, "title": "", "type": "comment", "url": "", "text": "I don&#x27;t mind those explicit set calls as much. I prefer when `obj.foo = 10` is a side-effect-free operation that only affects `obj` instead of something that triggers bunch of layout updates and got knows what other changes as well.<p>I do agree on the callback thing though and I find it kind of sad that not many people use CPS compilers for JS even though things like Cofeescript and SASS are pretty common.", "parent": 7138236.0, "deleted": null, "dead": null, "descendants": null, "id": 7138564, "ranking": null, "date": 1390932026000, "year": 2014}, {"by": "wingo", "score": null, "time": 1391093958, "timestamp": 1391093958000, "title": "", "type": "comment", "url": "", "text": "I recommend Andrew Kennedy&#x27;s &quot;Compiling with Continuations, Continued&quot; article if you are actually interested in using continuations in a production compiler.  Might&#x27;s formulation of CPS is good for analysis but not actually that great for code generation in my opinion.  My take on the topic is here: <a href=\"http://wingolog.org/archives/2014/01/12/a-continuation-passing-style-intermediate-language-for-guile\" rel=\"nofollow\">http:&#x2F;&#x2F;wingolog.org&#x2F;archives&#x2F;2014&#x2F;01&#x2F;12&#x2F;a-continuation-passi...</a>", "parent": 7150095.0, "deleted": null, "dead": null, "descendants": null, "id": 7150951, "ranking": null, "date": 1391093958000, "year": 2014}, {"by": "wingo", "score": null, "time": 1391094936, "timestamp": 1391094936000, "title": "", "type": "comment", "url": "", "text": "That&#x27;s certainly the case for full CPS, but using a CPS intermediate language does not imply call&#x2F;cc.  Indeed Kennedy targeted the .Net CIL; a direct-style VM.  The important thing to note is that continuations and functions can be statically distinguished.  The article conflates the two, which is why I don&#x27;t find it very useful.", "parent": 7150997.0, "deleted": null, "dead": null, "descendants": null, "id": 7151033, "ranking": null, "date": 1391094936000, "year": 2014}, {"by": "larsberg", "score": null, "time": 1391098036, "timestamp": 1391098036000, "title": "", "type": "comment", "url": "", "text": "For those who are curious why CPS is such a great compiler representation for implementing optimizations, it&#x27;s because the passes require less analysis complexity. You only have to handle the &quot;call&quot; portion and don&#x27;t have to worry separately about &quot;return&quot; points (though you&#x27;ve really just converted returns into a call to a new function!).<p>It sounds trivial, but in practice it dramatically reduces the size of not only optimization passes such as inlining, but it makes analyses that drive optimizations simpler as well (e.g., control-flow analysis). For an example from my experience (Manticore - <a href=\"http://manticore.cs.uchicago.edu/\" rel=\"nofollow\">http:&#x2F;&#x2F;manticore.cs.uchicago.edu&#x2F;</a>), my pretty coarse CFA analysis on our direct-style IR is about 750 lines of SML code whereas an optimized CFA with three different variants and extra support for environment analysis is only 700 lines of SML.", "parent": 7150095.0, "deleted": null, "dead": null, "descendants": null, "id": 7151363, "ranking": null, "date": 1391098036000, "year": 2014}, {"by": "Flow", "score": null, "time": 1391111787, "timestamp": 1391111787000, "title": "", "type": "comment", "url": "", "text": "Interesting, do you mean that one can use CPS transforms instead of SSA? I&#x27;ve never written a non-trivial code generator, so please excuse me if the question seem dumb.", "parent": 7151363.0, "deleted": null, "dead": null, "descendants": null, "id": 7152954, "ranking": null, "date": 1391111787000, "year": 2014}, {"by": "lmkg", "score": null, "time": 1391113297, "timestamp": 1391113297000, "title": "", "type": "comment", "url": "", "text": "SSA and CPS are actually the same thing, in some fashion. I&#x27;m not 100% up to speed on the details myself, but as I understand it, CPS is the functional-language form and SSA is the imperative-language form.", "parent": 7152954.0, "deleted": null, "dead": null, "descendants": null, "id": 7153106, "ranking": null, "date": 1391113297000, "year": 2014}, {"by": "larsberg", "score": null, "time": 1391120475, "timestamp": 1391120475000, "title": "", "type": "comment", "url": "", "text": "The basic result is that if you just CPS-convert a language without first-class continuations (so, no call-CC), all of that is interchangeable with SSA and any optimization written against one IR can be rewritten fairly mindlessly against the other IR.<p>If you allow first-class continuations in user programs, though, all bets are off and CPS is more expressive.<p>Richard Kelsey wrote the paper that talks about how to convert between CPS and SSA forms, along with the first-class continuation limitation mentioned above:<p><a href=\"http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.3.6773\" rel=\"nofollow\">http:&#x2F;&#x2F;citeseerx.ist.psu.edu&#x2F;viewdoc&#x2F;summary?doi=10.1.1.3.67...</a>", "parent": 7153106.0, "deleted": null, "dead": null, "descendants": null, "id": 7153735, "ranking": null, "date": 1391120475000, "year": 2014}, {"by": "ef4", "score": null, "time": 1391125917, "timestamp": 1391125917000, "title": "", "type": "comment", "url": "", "text": "I seriously considered going through a CPS transforming compiler for my major production Javascript application, but it&#x27;s a risky step to take, relative to using a less invasive transformation like coffeescript.<p>It comes down to lack of mature tooling and debugability: coffeescript is easy to debug, because it&#x27;s a very light level of syntactic sugar and dropping into the Javascript is easy. A more aggressive compilation step would require me to put a lot more trust in the maturity of the compiler and associated tools.", "parent": 7138564.0, "deleted": null, "dead": null, "descendants": null, "id": 7154239, "ranking": null, "date": 1391125917000, "year": 2014}, {"by": "mjn", "score": null, "time": 1391461776, "timestamp": 1391461776000, "title": "", "type": "comment", "url": "", "text": "I think it&#x27;s mostly true that SAT-solvers are better because of decades of research&#x2F;engineering on them. However there is some speculation that your observation that &quot;you typically lose a lot of structure&quot; is actually sometimes a win, because by &quot;flattening&quot; a representation it might allow some distant implicit constraints to propagate. In planning, for example, that&#x27;s one hypothesis for where Graphplan and SATplan (two 1990s systems) got their win from, vs. traditional symbolic planners.<p>Similar to a question that comes up in compilers, about optimizing high-level vs. low-level representations. High-level representations give you more specific semantic information, but turning everything into a flattened mud of combinator logic or CPS or SSA might allow for some whole-program optimizations that propagate originally-distant constraints.", "parent": 7172785.0, "deleted": null, "dead": null, "descendants": null, "id": 7173506, "ranking": null, "date": 1391461776000, "year": 2014}, {"by": "spenvo", "score": null, "time": 1393528750, "timestamp": 1393528750000, "title": "", "type": "comment", "url": "", "text": "-- Top comment on Reddit [0]:<p>&#x27;This clearly violates both EU and British law.<p>It&#x27;s simple: Parliament and the CPS can no longer ignore GCHQ&#x27;s abuses and the entirely inadequate &#x27;oversight&#x27; regime of the Intelligence and Security Committee.<p>Brooks et al. go on trial for allegedly hacking celebrities&#x27; voicemail messages, but Cabinet ministers walk free after approving secret suspicion-less dragnet recording of millions of webcam chats? This precedent can&#x27;t stand. It&#x27;s time we demand prison sentences for everyone who knew about this and did nothing to stop it.<p>Relevant British law is the Regulation of Investigatory Powers Act, Part II, Section 32 -- &quot;Authorisation of Intrusive Surveillance&quot;:<p><a href=\"http://www.legislation.gov.uk/ukpga/2000/23/section/32\" rel=\"nofollow\">http:&#x2F;&#x2F;www.legislation.gov.uk&#x2F;ukpga&#x2F;2000&#x2F;23&#x2F;section&#x2F;32</a><p>(2)Neither the Secretary of State nor any senior authorising officer shall grant an authorisation for the carrying out of intrusive surveillance unless he believes\u2014<p>(a)that the authorisation is necessary on grounds falling within subsection (3); and\n(b)that the authorised surveillance is proportionate to what is sought to be achieved by carrying it out.<p>GCHQ&#x27;s position was that, &quot;...the general principle applied would be that if the accuracy of the algorithm was such that it was useful to the analyst (ie, [if] the number of spurious results was low, then it was likely to be proportionate)&quot;.<p>But the entire point of requiring &#x27;proportionality&#x27; is to exclude activities which are useful, but too intrusive for the benefits gained. GCHQ&#x27;s reasoning that usefulness implies proportionality is clearly false. Time for a few ministers to see the inside of a courtroom.&#x27;<p>--<p>Without being an expert on the law (and ~99.999% of the people reading this fall into the same bucket) -- I&#x2F;we can assume that other clauses exist to &#x27;defang&#x27;&#x2F;&#x27;neuter&#x27; the clauses cited, the ones which were purportedly violated. And this highlights another BIG issue: a law&#x27;s true intent is oftentimes indecipherable or outright deceitful.<p>Groundbreaking precedents have been set due to laws which were passed on false pretenses (for ex., look up the genesis story of &quot;eminent domain&quot;) - or simply marketed as something misleading (ex. <i>Sen. Feinstein&#x27;s &quot;FISA Improvements Act&quot;).</i>  To me, that is the greatest form corruption in a democracy -- lawmaking with surreptitious intent.<p>While bills have to be massive in some circumstances (and interlinking by their very nature) -- a standardized list of simple outcomes of said law should be a requirement, and a bill should be &quot;unit tested&quot; the same way programs are. Actually, behaviorally tested is a better phrase. We need a tool for lawyers&#x2F;lawmakers to help them express the consequences of a bill in a <i>definitive</i> manner. - Are there such initiatives? (please comment)  Shouldn&#x27;t we start one? Has the idea been floated and shot down (at EFF&#x2F;Demand Progress&#x2F;etc), and if so why?  IMHO it would be worth the investment given the stakes (understanding the consequences of bills and laws -- even spotting excess&#x2F;hidden &quot;pork&quot;). . I would love to read a bill as a series of behavioral test assertions, wouldn&#x27;t you!  :)<p>&gt;&gt;&gt; Hopefully the stated concerns don&#x27;t apply; countless suits are brought against all suspect parties (esp. high profile targets); and those responsible are served justice to the maximum extent of the law. As the hum of document shredders begins on 10 Downing Street - know that THIS is the opportunity to &quot;make an example out of&quot; the type of people who are responsible for the system as it exists today.  It&#x27;s our turn for a power play.<p>[0] <a href=\"http://www.reddit.com/r/worldnews/comments/1z33wx/uk_spy_agency_intercepted_webcam_images_of/\" rel=\"nofollow\">http:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;worldnews&#x2F;comments&#x2F;1z33wx&#x2F;uk_spy_age...</a>", "parent": 7312212.0, "deleted": null, "dead": null, "descendants": null, "id": 7314280, "ranking": null, "date": 1393528750000, "year": 2014}, {"by": "vinalia", "score": null, "time": 1393741978, "timestamp": 1393741978000, "title": "", "type": "comment", "url": "", "text": "LISP is still a great language for web programming! [1]<p>Lately it seems like more people are doing compile to JS (like asm.js and Mozilla&#x27;s emscripten work in Odin Monkey [2]) which fits in perfectly with LISP dialects. Programmers can still create their own DSLs, macros, compilers, etc. in LISP and use them for modern web apps today. Just because this is a less popular&#x2F;documented route doesn&#x27;t mean it isn&#x27;t possible. I hope we&#x27;ll see a rise in LISP web programming pretty soon.<p>It would be fun if someone could write a compiler for a new ClojureScript dialect that targets asm.js and takes advantage of CPS for recursion like Scheme does.<p>[1] <a href=\"https://github.com/jashkenas/coffee-script/wiki/List-of-languages-that-compile-to-JS#wiki-lisp-scheme\" rel=\"nofollow\">https:&#x2F;&#x2F;github.com&#x2F;jashkenas&#x2F;coffee-script&#x2F;wiki&#x2F;List-of-lang...</a><p>[2] <a href=\"https://wiki.mozilla.org/Javascript:SpiderMonkey:OdinMonkey\" rel=\"nofollow\">https:&#x2F;&#x2F;wiki.mozilla.org&#x2F;Javascript:SpiderMonkey:OdinMonkey</a>", "parent": 7324984.0, "deleted": null, "dead": null, "descendants": null, "id": 7327997, "ranking": null, "date": 1393741978000, "year": 2014}, {"by": "bananas", "score": null, "time": 1393926271, "timestamp": 1393926271000, "title": "", "type": "comment", "url": "", "text": "So was I at the time. It dented my confidence in politicians. This was then immediately followed by the expenses scandals in which one of the MPs I contacted was implicated.<p>Three different MPs. The issues were about planning permission being denied for a structure that everyone else down the road has, an issue I had with the CPS who lost the evidence after I was stabbed and refused to formally charge the person and the reduction of the number of parking spaces in my area by 50% resulting in people fighting in the streets over spaces (literally!).<p>Privacy, copyright and digital rights issues, I vote with my feet.<p>With other issues, I wield a solicitor now. It&#x27;s a much better use of time and money and that is saying something.", "parent": 7337282.0, "deleted": null, "dead": null, "descendants": null, "id": 7339288, "ranking": null, "date": 1393926271000, "year": 2014}, {"by": "jbert", "score": null, "time": 1395088682, "timestamp": 1395088682000, "title": "", "type": "comment", "url": "", "text": "&gt; but if there are no normal returns involved, nothing on the stack will ever be deallocated, and your program is effectively just one giant memory leak.<p>This is true, but there is the glorious exception which is &quot;Cheney on the MTA&quot;: <a href=\"http://www.pipeline.com/~hbaker1/CheneyMTA.html\" rel=\"nofollow\">http:&#x2F;&#x2F;www.pipeline.com&#x2F;~hbaker1&#x2F;CheneyMTA.html</a> [<a href=\"https://news.ycombinator.com/item?id=7417906\" rel=\"nofollow\">https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=7417906</a>]<p>This describes a way of implementing a scheme-&gt;C compiler using CPS which allows the C functions to never return, and doesn&#x27;t blow the stack. When the stack gets big enough, you do a garbage collection run, copying live data to a new stack. Then, you reset the stack pointer using a judiciously chosen argument to alloca().", "parent": 7413402.0, "deleted": null, "dead": null, "descendants": null, "id": 7417946, "ranking": null, "date": 1395088682000, "year": 2014}, {"by": "mercurial", "score": null, "time": 1396254404, "timestamp": 1396254404000, "title": "", "type": "comment", "url": "", "text": "Really good technical article. I&#x27;m surprised to see the CPS representation (apparently) used to generate code, my understanding is that it was usually reserved for intermediate representation of some functional languages, in order to facilitate optimisation.", "parent": 7499101.0, "deleted": null, "dead": null, "descendants": null, "id": 7500310, "ranking": null, "date": 1396254404000, "year": 2014}, {"by": "srean", "score": null, "time": 1396619766, "timestamp": 1396619766000, "title": "", "type": "comment", "url": "", "text": "I did not bookmark it, but there was this fun blog post about writing a number crunching HW assignment in Scheme (much against contemporary wisdom). But It ended up other implementations in C. The trick was to write it in CPS and keep hand transforming it iteratively till it was efficient assembly in a different syntax. I would still argue that that you are really writing in a high level language&#x2F;abstraction and the rest is mostly tedious transliteration with special attention to keep the FPUs busy, efficient memory loading and register allocation.", "parent": 7530645.0, "deleted": null, "dead": null, "descendants": null, "id": 7531398, "ranking": null, "date": 1396619766000, "year": 2014}, {"by": "tel", "score": null, "time": 1397681621, "timestamp": 1397681621000, "title": "", "type": "comment", "url": "", "text": "I guess that I don&#x27;t feel these so painfully because I don&#x27;t think Node is necessarily successful at it&#x27;s goal, though I believe its goal is admirable. CPS might not be the most elegant way to schedule threads, but it is fairly simple which is one kind of boon.<p>I&#x27;m also pretty sure that high concurrency means a variety of things allowing a distinction between Node High Concurrency capability and Twitter High Concurrency need. If Node allows newbies to achieve higher concurrency than other newbie tools (PHP, Rails) then I think it can achieve that task to some degree.", "parent": 7600378.0, "deleted": null, "dead": null, "descendants": null, "id": 7600474, "ranking": null, "date": 1397681621000, "year": 2014}, {"by": "bananas", "score": null, "time": 1398436268, "timestamp": 1398436268000, "title": "", "type": "comment", "url": "", "text": "My sister went through the same things about the same time. She put a hockey stick in the face of the ring leader in the end, smashed her teeth and broke her jaw. She was arrested but the duty officers agreed to write it off as they&#x27;d already been contacted by my parents about the bullying it and they said the CPS wouldn&#x27;t touch it in this case.<p>So up turns a guy at my door one day (the girl&#x27;s father) ready to kick off at my sister and my parents. He was removed by our dogs.<p>Two years down the line from this, her father is in prison for robbery and the girl was in youth custody for assault.<p>Moral of the story: half the human race is shit not worthy of a breath of air. Fight fire with fire. No sympathy regardless of the background for any behaviour like this.<p>Also avoid living in shitty suburbs of Nottingham (this was Woodborough Road next to St Anne&#x27;s).", "parent": 7645807.0, "deleted": null, "dead": null, "descendants": null, "id": 7646679, "ranking": null, "date": 1398436268000, "year": 2014}, {"by": "tel", "score": null, "time": 1399641523, "timestamp": 1399641523000, "title": "", "type": "comment", "url": "", "text": "This is pretty much exactly correct. The common terminology is that `forall r . (a -&gt; r) -&gt; r` is the Continuation Passing Style transformed version of `a`. At the end of the day, `CPS a` is useful whenever CPS is, but also more often.<p>sometimes you see CPS (a.k.a. Church-encoded) forms of values in Haskell in really tight inner loops as the compiler can optimize them better.<p>You also see a variant of it occurring in Free monad structures because it allows you to re-associate the binds to make them much more efficient.<p>You also see it sometimes when making monads over categories other than Hask\u2014it lets you pretend you&#x27;re working with a Hask monad (and thus use do notation) for a while and only &quot;pass through&quot; the real category at fixed points in time. This lets you, for instance, write a monad for Set even though normally you couldn&#x27;t due to the need for the Ord constraint.", "parent": 7719458.0, "deleted": null, "dead": null, "descendants": null, "id": 7720649, "ranking": null, "date": 1399641523000, "year": 2014}, {"by": "tel", "score": null, "time": 1399642013, "timestamp": 1399642013000, "title": "", "type": "comment", "url": "", "text": "You&#x27;re totally correct that double-negation elimination is a specialization of the CPS transform which is a specialized form of Yoneda. Yoneda is more general and exists more often than CPS transforms do, though.<p><pre><code>    cps : a -&gt; (forall r . (a -&gt; r) -&gt; r)\n    cps a = \\f -&gt; a f\n\n    cps&#x27; : (forall r . (a -&gt; r) -&gt; r) -&gt; a\n    cps&#x27; f = f id\n</code></pre>\nIt&#x27;s interesting to examine double negation elimination in constructivist logic since it doesn&#x27;t hold there. In particular, we can easily write the backward direction<p><pre><code>    bck : a -&gt; ((a -&gt; Void) -&gt; Void)\n    bck = cps a\n</code></pre>\nbut since we&#x27;ve now specialized `forall r` to `Void` we can no longer come back. This demonstrates (1) that the pure CPS&#x27;d version is more general than DNE and (2) proof by contradiction is non-constructive.", "parent": 7719628.0, "deleted": null, "dead": null, "descendants": null, "id": 7720680, "ranking": null, "date": 1399642013000, "year": 2014}, {"by": "Jun8", "score": null, "time": 1400000247, "timestamp": 1400000247000, "title": "", "type": "comment", "url": "", "text": "My point was that making a full understanding of the students&#x27; plight a prerequisite to helping them is a mistake. I teach programming to a low-income high school in the South side of Chicago. I am male and &quot;white&quot; and was born and raised in a different country far away in quite a different culture. I cannot even <i>begin</i> to understand the problems these kids are facing everyday.<p>Yet, there I am helping them, raising money for equipment, buying them rPi&#x27;s, trying to teach them Python, implementing software for their FRC robot and trying to act as an all around mentor.<p>My cost to the CPS is negative (I bring in all the money, $1k-$2k here, from my company). <i>This</i> is the solution I&#x27;m talking about. Of course, my impact is minimal. But money from donors such as Zuckerberg could be used to create bigger grassroots efforts and amplify the impact greatly.<p>Ask yourself: What is the solution that YOU suggest? Reading  the thread I was only one concrete suggestions, using the $100M to open a calling center in the area. Is that the best we can do?", "parent": 7738949.0, "deleted": null, "dead": null, "descendants": null, "id": 7739184, "ranking": null, "date": 1400000247000, "year": 2014}, {"by": "tptacek", "score": null, "time": 1400022856, "timestamp": 1400022856000, "title": "", "type": "comment", "url": "", "text": "Do we know if the median teacher also has a masters? I know what my kids teachers make (<i>significantly</i> more), so wouldn&#x27;t be surprised to learn that 70k is reachable without the degree.<p>70k is significantly <i>above</i> the US median salary.<p>FWIW: My mom was (until a couple years ago) a CPS teacher with a Masters and a focus on BD&#x2F;LD teaching; she has strong feelings about this stuff, but I think I might disagree with a lot of them.", "parent": 7741057.0, "deleted": null, "dead": null, "descendants": null, "id": 7741203, "ranking": null, "date": 1400022856000, "year": 2014}, {"by": "tptacek", "score": null, "time": 1400104750, "timestamp": 1400104750000, "title": "", "type": "comment", "url": "", "text": "Ok, let&#x27;s make that comparison: a CPS teacher makes 70k, and teachers have low single-digit unemployment and defined-benefit pensions. Lawyers, on the other hand, make a median 110k, but don&#x27;t have a 3 month vacation, don&#x27;t as a rule have defined-benefit pensions, and have ~12%(!) unemployment.<p>A lawyer is also <i>required</i> to shoulder an average of 85k of postgraduate education to enter the field; a high school teacher can start with a bachelors.<p>Unemployment rates for teachers are projected to <i>fall</i>. The unemployment picture for lawyers is bleak, due to the slow-motion collapse of biglaw.", "parent": 7746131.0, "deleted": null, "dead": null, "descendants": null, "id": 7746685, "ranking": null, "date": 1400104750000, "year": 2014}, {"by": "penguindev", "score": null, "time": 1400892684, "timestamp": 1400892684000, "title": "", "type": "comment", "url": "", "text": "Before.<p><a href=\"http://www.census.gov/prod/techdoc/cps/cpsmar12.pdf\" rel=\"nofollow\">http:&#x2F;&#x2F;www.census.gov&#x2F;prod&#x2F;techdoc&#x2F;cps&#x2F;cpsmar12.pdf</a><p>&quot;Data on consumer income collected in the CPS \nby the Census Bureau cover money income received \n(exclusive of certain money receipts such as capital \ngains) before payments for personal income taxes, \nSocial Security, union dues, ...&quot;<p>edit: the data source appears to be the &quot;Table P-8. Age\u2014People by Median Income and Sex&quot; (all races) here: <a href=\"http://www.census.gov/hhes/www/income/data/historical/people/\" rel=\"nofollow\">http:&#x2F;&#x2F;www.census.gov&#x2F;hhes&#x2F;www&#x2F;income&#x2F;data&#x2F;historical&#x2F;people...</a>", "parent": 7791750.0, "deleted": null, "dead": null, "descendants": null, "id": 7792209, "ranking": null, "date": 1400892684000, "year": 2014}, {"by": "aidenn0", "score": null, "time": 1401950657, "timestamp": 1401950657000, "title": "", "type": "comment", "url": "", "text": "I&#x27;m not even sure where to begin responding to this.<p>1) CPS wasn&#x27;t ever involved in this case<p>2) Everywhere I&#x27;ve ever lived CPS was already understaffed and overworked; they don&#x27;t have time to go looking for children to take away, they&#x27;re busy enough already.", "parent": 7848517.0, "deleted": null, "dead": null, "descendants": null, "id": 7850542, "ranking": null, "date": 1401950657000, "year": 2014}, {"by": "klibertp", "score": null, "time": 1402949527, "timestamp": 1402949527000, "title": "", "type": "comment", "url": "", "text": "You can&#x27;t. Forget it.<p>I mean, there is a whole long list of benefits of functional programming, immutable&#x2F;persistent data structures, macros and so on. But Lisps and functional oriented languages (like Roy, LiveScript) are also unfamiliar, not supported in your favourite IDE, make you think in a way you&#x27;re not accustomed to and eat your kittens for lunch.<p>You have a chance with ClojureScript if the backend is in Clojure - other than this there is just no way to introduce something like this.<p>As for usability, ClojureScript works very, very well. Async is well implemented (if you like CPS model), JS scoping is fixed and so on. LiveScript is also quite usable, although it lacks source map implementation for now. Backcalls make async nice but stay close to JS, currying and partials are nice, easy object cloning makes up for inherent mutability. For my personal projects I use LS instead of JS or Coffee exclusively now.<p>But they are completely unusable in enterprise environment. And probably won&#x27;t ever be. It would also be very hard to find a team which would like to adopt them without knowing them beforehand (rightly so, IMHO, because transitioning to another paradigm - and benefiting from it - is not a trivial matter) and about as hard (or harder) to find a team where they are known already.<p>Your best bet is probably to contribute to LightTable a lot and seek a job in Clojure oriented start-up if you want to use ClojureScript at work.", "parent": 7900168.0, "deleted": null, "dead": null, "descendants": null, "id": 7901199, "ranking": null, "date": 1402949527000, "year": 2014}, {"by": "gaze", "score": null, "time": 1404088999, "timestamp": 1404088999000, "title": "", "type": "comment", "url": "", "text": "Yeah but additionally people are writing their source code by hand in CPS which is really stupid.", "parent": 7962649.0, "deleted": null, "dead": null, "descendants": null, "id": 7963115, "ranking": null, "date": 1404088999000, "year": 2014}, {"by": "Tyrannosaurs", "score": null, "time": 1404483513, "timestamp": 1404483513000, "title": "", "type": "comment", "url": "", "text": "It isn&#x27;t a crime? You should explain that to the Bail Act 1976 (<a href=\"http://www.legislation.gov.uk/ukpga/1976/63/section/6\" rel=\"nofollow\">http:&#x2F;&#x2F;www.legislation.gov.uk&#x2F;ukpga&#x2F;1976&#x2F;63&#x2F;section&#x2F;6</a>) amended by the Extradition Act of 2003 because they believe:<p>&quot;A person who is convicted summarily of an offence under subsection (1) or (2) above [which outline not attending without good reason] and is not committed to the Crown Court for sentence shall be liable to imprisonment for a term not exceeding 3 months or to a fine not exceeding level 5 on the standard scale or to both and a person who is so committed for sentence or is dealt with as for such a contempt shall be liable to imprisonment for a term not exceeding 12 months or to a fine or to both.&quot;<p>The court and &#x2F; or the CPS may view that there is no public interest in that, though similarly they may view given the cost to the tax payer of the round the clock surveillance of the embassy he should be made an example of.<p>I&#x27;d be inclined to believe the later.", "parent": 7988744.0, "deleted": null, "dead": null, "descendants": null, "id": 7988795, "ranking": null, "date": 1404483513000, "year": 2014}, {"by": "nanofortnight", "score": null, "time": 1405120480, "timestamp": 1405120480000, "title": "", "type": "comment", "url": "", "text": "CPS is formally equivalent to SSA, is it not? What are advantages of using CPS over SSA?", "parent": 8022509.0, "deleted": null, "dead": null, "descendants": null, "id": 8023034, "ranking": null, "date": 1405120480000, "year": 2014}, {"by": "FullyFunctional", "score": null, "time": 1405121553, "timestamp": 1405121553000, "title": "", "type": "comment", "url": "", "text": "It&#x27;s not equivalent, but share some aspects.  CPS straight forward semantics, but a semantic for SSA must carry path history along as phi-nodes have no local meaning (you must know where you came from).<p>I never really understood the big deal about SSA as it&#x27;s just a really weak version of models from the functional world.  (Disclaimer: I&#x27;ve worked on both sides of the fence).", "parent": 8023034.0, "deleted": null, "dead": null, "descendants": null, "id": 8023090, "ranking": null, "date": 1405121553000, "year": 2014}, {"by": "mjn", "score": null, "time": 1405126216, "timestamp": 1405126216000, "title": "", "type": "comment", "url": "", "text": "The last paragraph of the paper briefly touches on that:<p><i>This paper would not be complete without a mention of Static Single Assignment form (SSA), the currently fashionable intermediate representation for imperative languages. As is well known, SSA is in some sense equivalent to CPS (Kelsey 1995) and to ANF (Appel 1998). Its focus is intra-procedural\noptimization (as with ANF, it\u2019s necessary to renormalize when inlining functions, in contrast to CPS) and there is a large body of work on such optimizations. Future work is to transfer SSA-based optimizations to CPS. We conjecture that CPS is a good fit for both functional and imperative paradigms.</i>", "parent": 8023034.0, "deleted": null, "dead": null, "descendants": null, "id": 8023297, "ranking": null, "date": 1405126216000, "year": 2014}, {"by": "l_dopa", "score": null, "time": 1405181151, "timestamp": 1405181151000, "title": "", "type": "comment", "url": "", "text": "This is an area where the compiler and programming language communities often seem to be talking past each other. In the post you linked, Weeks is talking about CPS and SSA as the datastructures manipulated by optimization algorithms. CPS is interesting primarily as a language in the formal sense of assigning semantics to programs. Whether you choose to represent those programs naively as a tree structure or with an efficient graph representation as in SSA, you&#x27;re still using CPS.<p>This paper is really good because, unlike a lot of compiler literature, it treats both semantics and term representation.", "parent": 8023958.0, "deleted": null, "dead": null, "descendants": null, "id": 8024892, "ranking": null, "date": 1405181151000, "year": 2014}, {"by": "gsg", "score": null, "time": 1405229808, "timestamp": 1405229808000, "title": "", "type": "comment", "url": "", "text": "Although I take your point about CPS in other disciplines, TFA advocates <i>compiling</i> with continuations. A criticism of its suitability for compilation would seem to be relevant.", "parent": 8024892.0, "deleted": null, "dead": null, "descendants": null, "id": 8026739, "ranking": null, "date": 1405229808000, "year": 2014}, {"by": "l_dopa", "score": null, "time": 1405267258, "timestamp": 1405267258000, "title": "", "type": "comment", "url": "", "text": "Sure, and Weeks is totally correct regarding tree vs. flat representations, but I think identifying CPS with the former and SSA with the latter is misleading. The scoping discipline (respectively, dominator tree) is part of the language whether you represent it as subtrees or leave it implicit.<p>It would be more accurate to say that SSA is a particularly efficient data structure for representing a subset of CPS terms.", "parent": 8026739.0, "deleted": null, "dead": null, "descendants": null, "id": 8027699, "ranking": null, "date": 1405267258000, "year": 2014}, {"by": "mbca", "score": null, "time": 1407895120, "timestamp": 1407895120000, "title": "", "type": "comment", "url": "", "text": "&gt; My wife and I sleep on the floor, with a few blankets, and have slept with our daughter between us since day one<p>And when your daughter is old enough to talk, she&#x27;ll tell everyone she sleeps on the floor, and CPS will come take her away (this sort of thing is a major fear of mine -- some minor idiosyncrasy or eccentricity will be taken out of context and misinterpreted as a sign of an &quot;unfit&quot; home, and they&#x27;ll come a-knockin&#x27;).", "parent": 8170894.0, "deleted": null, "dead": null, "descendants": null, "id": 8171117, "ranking": null, "date": 1407895120000, "year": 2014}, {"by": "barry-cotter", "score": null, "time": 1408249832, "timestamp": 1408249832000, "title": "", "type": "comment", "url": "", "text": "&gt;This thing is full of gems. I shouldn&#x27;t be so sarcastic about child abuse, but I just can&#x27;t help it. I&#x27;ve met far too many of these clowns in my life.<p>If you actually believe these children are being abused I&#x27;m sure that you can call CPS on their parents. If not, the only way you could make a &quot;joke&quot; in worse taste would be to imply paedophilia.<p>&gt;Nothing cooler than rich kids taking all their advantages they were given and use them to live like paupers with zero concern for the the world around them.<p>&quot;Everyone we know who unschools, in fact, has chosen autonomy over affluence. Hell, some years we\u2019re barely above the poverty line.&quot;<p>Doesn&#x27;t sound like they&#x27;re living like rich kids. Nor are they living like paupers. They own their farm and they&#x27;re not even using as many public services as a normal family with two children would.", "parent": 8188439.0, "deleted": null, "dead": null, "descendants": null, "id": 8188555, "ranking": null, "date": 1408249832000, "year": 2014}, {"by": "tel", "score": null, "time": 1409444567, "timestamp": 1409444567000, "title": "", "type": "comment", "url": "", "text": "What does &quot;as fundamental as function composition&quot; mean here? The article just appears to describe transducers. Transducers <i>compose</i> via (&quot;reverse&quot;) function composition, sure, but that just means that they <i>are</i> functions of a type... and considerably less fundamental than <i>functions</i> since they&#x27;re a specialization of that class of things.<p>They&#x27;re cool and all\u2014I&#x27;ve characterized them (partially, perhaps) as CPS encoded flatmaps over lists and also as stateful left fold transformers, the latter of which being much more general\u2014but they&#x27;re more like a rich ecosystem for list transformations than any kind of <i>fundamental</i> abstraction.", "parent": 8246706.0, "deleted": null, "dead": null, "descendants": null, "id": 8247997, "ranking": null, "date": 1409444567000, "year": 2014}, {"by": "riffraff", "score": null, "time": 1410206274, "timestamp": 1410206274000, "title": "", "type": "comment", "url": "", "text": "funny, i read that as CPS and it still made sense.", "parent": 8286162.0, "deleted": null, "dead": null, "descendants": null, "id": 8286863, "ranking": null, "date": 1410206274000, "year": 2014}, {"by": "masklinn", "score": null, "time": 1410243495, "timestamp": 1410243495000, "title": "", "type": "comment", "url": "", "text": "<a href=\"https://www.webkit.org/blog/3362/introducing-the-webkit-ftl-jit/\" rel=\"nofollow\">https:&#x2F;&#x2F;www.webkit.org&#x2F;blog&#x2F;3362&#x2F;introducing-the-webkit-ftl-...</a> for those who missed it.<p>The LLVM phase is really an alternative to the existing DFG JIT, and more precisely to the final phase thereof: the front of the DFG JIT is still used up to CPS optimisations, then it branches right before codegen: DFG generates its code directly while FTL converts DFG to SSA, applies SSA optimisations, converts to LLVM IR and passes the IR to LLVM for codegen.", "parent": 8288516.0, "deleted": null, "dead": null, "descendants": null, "id": 8288972, "ranking": null, "date": 1410243495000, "year": 2014}, {"by": "nickik", "score": null, "time": 1410795167, "timestamp": 1410795167000, "title": "", "type": "comment", "url": "", "text": "Interessting. I have not done any go. Could you review go in spirit of you beeing a FP guy? Why does go make it so hard?<p>Im mainly a clojure guy and we generally belive the CPS and FP go together very well. The new interduction of transducers makes this even clearer and it seams to me this is a feature that go should really think about.", "parent": 8318800.0, "deleted": null, "dead": null, "descendants": null, "id": 8319459, "ranking": null, "date": 1410795167000, "year": 2014}, {"by": "abustamam", "score": 7.0, "time": 1411788563, "timestamp": 1411788563000, "title": "How letting my kid play outside led to a CPS investigation", "type": "story", "url": "http://www.dallasnews.com/opinion/sunday-commentary/20140925-how-letting-my-kid-play-alone-outside-led-to-a-cps-investigation.ece", "text": "", "parent": null, "deleted": null, "dead": null, "descendants": 1.0, "id": 8375975, "ranking": null, "date": 1411788563000, "year": 2014}, {"by": "__xtrimsky", "score": null, "time": 1412270891, "timestamp": 1412270891000, "title": "", "type": "comment", "url": "", "text": "Google Translate says the Decision Maker is CPS (Child Protective Services).\nSo it&#x27;s most likely just a mistake.", "parent": 8401845.0, "deleted": null, "dead": null, "descendants": null, "id": 8401863, "ranking": null, "date": 1412270891000, "year": 2014}, {"by": "hrjet", "score": null, "time": 1412937134, "timestamp": 1412937134000, "title": "", "type": "comment", "url": "", "text": "Thanks for your response. I appreciate all the work going into the Scala ecosystem.<p>&gt; Why do you say you don&#x27;t know where Scala is going?<p>Apologies for that wording. A more elaborate wording would be: <i>I</i> don&#x27;t know where Scala as a whole (the community + language) will be heading and that is in huge part because of <i>I</i> not having the resources to follow the developments. I sometimes lurk in the internal discussions list and catch up with conversations, some of which tend to be controversial, but I am glad they happen in the open. (Top of mind: CPS plugin related discussions)<p>I still use Scala whenever I can, but when it comes to performance (cpu limited), I fall back to Java. (I am aware of the compiler plugins of yore and the macros of now that help speed things, and the tree shakers, but they are third-party &#x2F; require different workflows, and hence I don&#x27;t feel inclined to use them for certain projects).<p>It is mostly in this space that I am exploring alternatives. Kotlin and Ceylon seem to be more streamlined (conceptually, and hopefully at run-time), but as I haven&#x27;t actually used them, I am not sure what deficiencies to expect.<p>Edit: Removed a sidenote. Would have been a distraction.", "parent": 8436925.0, "deleted": null, "dead": null, "descendants": null, "id": 8437044, "ranking": null, "date": 1412937134000, "year": 2014}, {"by": "gregpilling", "score": null, "time": 1413049912, "timestamp": 1413049912000, "title": "", "type": "comment", "url": "", "text": "Agree on the parent part. If I let my kids do anything remotely close to what I did as a kid, CPS would never let me see them again. I left in the morning and came back at dark, with no check in. I did experiments with things I learned in the Anarchists cookbook. Its amazing what you can blow up with household objects. You kids today have it easy blowing up stuff - just go on Youtube. In the early 80s you had to know someone to get the really bad somewhat illegible copy.  My kids love watching Mythbusters when they blow things up. I wasn&#x27;t sure whether to be happy or worried when my 8 year old asked for Polycarbonate blast shields. He was thinking of things he wanted to blow up, and how to do it. That made me worry. He wanted to do it safely and had given some thought to shield and remote triggering. That made me happy, i did not have the same focus on safety as a kid and burned my eyebrows off several times. As of today we have not done anything, he has got his attention on other projects and I am not going to bring it up.<p>TL:DR - typical 12 year old kid from 1982 would be labeled child Al Quaeda terror cell, parents would go to jail for 25 years.", "parent": 8442614.0, "deleted": null, "dead": null, "descendants": null, "id": 8442821, "ranking": null, "date": 1413049912000, "year": 2014}, {"by": "iancarroll", "score": null, "time": 1413606014, "timestamp": 1413606014000, "title": "", "type": "comment", "url": "", "text": "As stated in their CPS (with the exception of SMIME) and my post, it <i>does not</i> use &lt;keygen&gt;...", "parent": 8473853.0, "deleted": null, "dead": null, "descendants": null, "id": 8474588, "ranking": null, "date": 1413606014000, "year": 2014}, {"by": "mishoo", "score": null, "time": 1415087938, "timestamp": 1415087938000, "title": "", "type": "comment", "url": "", "text": "I wrote a tutorial some time back \u2014 <a href=\"http://lisperator.net/pltut/\" rel=\"nofollow\">http:&#x2F;&#x2F;lisperator.net&#x2F;pltut&#x2F;</a> \u2014 also targeted at JS.  It walks you through parsing, evaluating, continuations and CPS compiling.", "parent": 8554185.0, "deleted": null, "dead": null, "descendants": null, "id": 8555523, "ranking": null, "date": 1415087938000, "year": 2014}, {"by": "lettercarrier", "score": null, "time": 1415721008, "timestamp": 1415721008000, "title": "", "type": "comment", "url": "", "text": "Comments are what gets me here, for discovery.  Love when topics and links are the subject of comments.<p>I think my CPS degree received when having to use IBM 129 and 3 runs per day afford a great HN following.<p>I really don&#x27;t get the down up karma thing.  Just glad smart people with lots of time on their hands post interesting stuff", "parent": 8585597.0, "deleted": null, "dead": null, "descendants": null, "id": 8590373, "ranking": null, "date": 1415721008000, "year": 2014}, {"by": "kevingadd", "score": null, "time": 1416007450, "timestamp": 1416007450000, "title": "", "type": "comment", "url": "", "text": "async&#x2F;await is not based on generators.<p>It&#x27;s a compile-time transform that hoists parts of your function into independently scheduled asynchronous tasks &amp; task callbacks. So it&#x27;s essentially automatic CPS + promises. That&#x27;s why functions are tagged as &#x27;async&#x27; or not-async in C#; if they are &#x27;async&#x27; they produce a promise instead of a value.<p>On a related note, part of C#&#x27;s async&#x2F;await infrastructure is a scheduling system so that callbacks can be configured to run on a specific thread - i.e. you can kick off async work on the UI thread and the callbacks will run there, instead of on the threadpool thread that completed the work.", "parent": 8609316.0, "deleted": null, "dead": null, "descendants": null, "id": 8610140, "ranking": null, "date": 1416007450000, "year": 2014}, {"by": "ltta", "score": null, "time": 1416087661, "timestamp": 1416087661000, "title": "", "type": "comment", "url": "", "text": "Speaking of SSA and optimizations, I just remembered that Andy Wingo (core contributor to Guile scheme) has a treasure trove of great articles, e.g. a fun intro to SSA [1] or CPS as used in Guile [2]. His blog is totally worth just browsing around.<p>[1] <a href=\"http://wingolog.org/archives/2011/07/12/static-single-assignment-for-functional-programmers\" rel=\"nofollow\">http:&#x2F;&#x2F;wingolog.org&#x2F;archives&#x2F;2011&#x2F;07&#x2F;12&#x2F;static-single-assign...</a><p>[2] <a href=\"http://wingolog.org/archives/2014/01/12/a-continuation-passing-style-intermediate-language-for-guile\" rel=\"nofollow\">http:&#x2F;&#x2F;wingolog.org&#x2F;archives&#x2F;2014&#x2F;01&#x2F;12&#x2F;a-continuation-passi...</a>", "parent": 8612035.0, "deleted": null, "dead": null, "descendants": null, "id": 8612736, "ranking": null, "date": 1416087661000, "year": 2014}, {"by": "aorloff", "score": null, "time": 1417318226, "timestamp": 1417318226000, "title": "", "type": "comment", "url": "", "text": "Its not just taxation that needs to occur with legalization of harder drugs.  Its a comprehensive reaction from the social safety net - no more unemployment, no welfare, and CPS comes to check on your kids if you have them.", "parent": 8675555.0, "deleted": null, "dead": null, "descendants": null, "id": 8675881, "ranking": null, "date": 1417318226000, "year": 2014}, {"by": "lomnakkus", "score": null, "time": 1419725793, "timestamp": 1419725793000, "title": "", "type": "comment", "url": "", "text": "One potential objection I see (aside from the ones raised by others in this thread) is that C isn&#x27;t actually that great as a compile target. Aliasing analysis is extremely hard in C (thus preventing obvious optimizations), you&#x27;d still have to implement your own GC on top of C, C doesn&#x27;t do tail-call optimization so you&#x27;d have to do your own CPS transform anyway... at which point most of the advantages evaporate.<p>(If you&#x27;re thinking that interfacing with C would be easier: No, the FFIs to C are usually as complex as they are for exactly the right reasons, namely that C&#x27;s semantics don&#x27;t match very well with $OTHER_LANGUAGE.)<p>... at which point you&#x27;re practically implementing your own VM anyway, so, y&#x27;know...", "parent": 8804437.0, "deleted": null, "dead": null, "descendants": null, "id": 8804539, "ranking": null, "date": 1419725793000, "year": 2014}, {"by": "peteretep", "score": null, "time": 1420512438, "timestamp": 1420512438000, "title": "", "type": "comment", "url": "", "text": "<p><pre><code>    &gt; If this were the USA it would certainly be bad enough to \n    &gt; warrant prosecution of the researcher\n</code></pre>\nSounds like he didn&#x27;t access any data he wasn&#x27;t allowed to, if he read the data of test accounts. Not sure how you&#x27;d prosecute this in the UK.<p>Also you&#x27;d need to convince the CPS that it was in the public interest to prosecute, and they&#x27;re not elected officials who need to appear Tough On Crime unlike the US. And even if both of those things happened, you&#x27;d then need to convince a magistrate that the case warranted a conviction.<p>Still, he should have gone to ICO first and foremost.", "parent": 8841950.0, "deleted": null, "dead": null, "descendants": null, "id": 8842658, "ranking": null, "date": 1420512438000, "year": 2015}, {"by": "Donzo", "score": null, "time": 1420808155, "timestamp": 1420808155000, "title": "", "type": "comment", "url": "", "text": "We do this in Chicago.<p>We call them &quot;magnet&quot; schools, as they are intended to attract the best and the brightest.<p>On the one hand, these are the most diverse schools in this heavily segregated city. They give students from rough neighborhoods a better chance to live a different life.<p>On the other hand, they decrease the quality of neighborhood schools (non-magnet) by skimming the cream from the top, if you will.<p>Now, the real problem with this system is how it deals with the intelligent but apathetic student. This student will not meet the criteria to enter one of these magnet schools, regardless of his or her test performance, and will be left in a virtual dumping ground, surrounded by few academically inclined individuals to motivate or otherwise inspire him or her. His or her teachers are likely to be burned out by the disparity of their environment. He or she may not have the right combination of toughness and grace to survive four years in this environment and is likely to become one of the roughly 50% of CPS students who drop out.<p>Now, does this seem like an appropriate path for a bright student who was unmotivated to complete their homework in the sixth or seventh grade, perhaps due to crippling emotional stress (jailed, drug addicted, or murdered parent)?<p>I don&#x27;t have a better system, but I think that we can do better.", "parent": 8861044.0, "deleted": null, "dead": null, "descendants": null, "id": 8862025, "ranking": null, "date": 1420808155000, "year": 2015}, {"by": "xrange", "score": null, "time": 1421343619, "timestamp": 1421343619000, "title": "", "type": "comment", "url": "", "text": "So, I&#x27;m not up to speed on this issue, but can anyone give a brief summary or link describing why we need a special &quot;extra-legal&quot; department like CPS?  Extra-legal probably isn&#x27;t the exact wording I&#x27;m looking for, but why couldn&#x27;t issues of excessive cruelty to children be handled in the standard manner, with due-process, etc.?  I suppose I only hear about the outliers of extreme overreach, but it seems like CPS attracts busybodies with power complexes.  And there is a potential that there is more of a backstory here that we aren&#x27;t hearing about.  Is there a compelling reason we shouldn&#x27;t we shut these agencies down, or at least greatly curtail their activities?  Or at the very least, fire everyone who was involved in this particular investigation?", "parent": 8893554.0, "deleted": null, "dead": null, "descendants": null, "id": 8893975, "ranking": null, "date": 1421343619000, "year": 2015}, {"by": "sophacles", "score": null, "time": 1421344188, "timestamp": 1421344188000, "title": "", "type": "comment", "url": "", "text": "Mostly it comes down to: division of labor is a thing.<p>CPS is responsible for things like foster care, finding if parents are (truly) neglectful and abusive, helping teach ignorant parents how to not kill their kids accidentally, and other related things. In most of the work they do, it is just due process - Our society has decided that when a parent goes to jail, or is ordered into an institution, or what not, and does so while caring for children and having no backup means for caring for those children, we shouldn&#x27;t throw those kids out on the street and hope they survive.<p>In the case of neglect and abuse - it&#x27;s apparent to people trained to find it (even in clear cut cases) but not as often noticable just by a quick glance: A common tactic of abusers is to hide it to the outside world, and scare the abused into lying about it - cops are trained to handle one situation, CPS investigators are trained to handle this different one. (Much like we have forensic accountants investigate financial crime and homicide detectives investigate murder).<p>When cops overstep and murder random people - the response is &quot;well they have hard jobs, and they are trained to be safe&quot;, but when CPS oversteps and asks some uncomfortable questions, its &quot;busybodies&quot;. Why does no one say &quot;well they also get kids into homes rather than putting them on the street, and they see a lot of horrible abuse cases and are maybe a bit overcautious&quot;?<p>Do you in general disagree with the notion of specialization and division of labor, or is it a knee-jerk reaction to the fact that &quot;government&quot; is doing it?<p>Why do you want to automatically shut down an agency that does a lot of good, because some bureaucrat is overstepping (or legally mandated to do so, whatever the case may be)?", "parent": 8893975.0, "deleted": null, "dead": null, "descendants": null, "id": 8894058, "ranking": null, "date": 1421344188000, "year": 2015}, {"by": "jrs235", "score": null, "time": 1421345591, "timestamp": 1421345591000, "title": "", "type": "comment", "url": "", "text": "The perception is that CPS workers are egomaniacs that think they can&#x27;t be wrong and many appear power hungry.<p>The sad part is for ever time CPS &quot;sign and agree or we&#x27;ll make your life hell and take your children&quot; they end up screwing up and failing a child in real need.<p>Their mentality is similar to that perceived of police forces... &quot;you might beat the rap but you can&#x27;t beat the ride... now comply!&quot; (regardless of whether they are in the right or not)<p>ADD: It would seem that CPS focuses on making hell for parents who challenge them instead of focusing on protecting children. They&#x27;ll invest more time and energy in showing people &quot;who&#x27;s the boss&quot; than just using some common sense and intelligent passive monitoring. Google &quot;CPS failed&quot;", "parent": 8893554.0, "deleted": null, "dead": null, "descendants": null, "id": 8894222, "ranking": null, "date": 1421345591000, "year": 2015}, {"by": "xrange", "score": null, "time": 1421346167, "timestamp": 1421346167000, "title": "", "type": "comment", "url": "", "text": "It sounds to me like providing foster families for incarcerated parents has nothing to do with this particular case, or child abuse in general, and the best &quot;division of labor&quot; would be to not have those under the same roof.  But that&#x27;s neither here nor there.  Also, to the strange non-sequitur, I think that cops murdering people is worse than what the article describes.<p>Are you saying that:<p>A). All the facts of this particular care aren&#x27;t being presented (certainly plausible).<p>B). You don&#x27;t find the conduct of the CPS in this case infuriating.<p>C). For the sake of argument you accept the facts as presented, you personally find it reprehensible, but you don&#x27;t think others should find it reprehensible, or at least shouldn&#x27;t try to call it out as such.<p>D). You work for a related agency, and naturally would want to stand up for your colleagues? Certainly you sound a little on the defensive side.<p>E). Other?<p>...maybe these social workers should be on a rotation, so they&#x27;re not working on the same thing for more than two years.  Kind of like prison guards should be, so they don&#x27;t end up dehumanizing the inmates?", "parent": 8894058.0, "deleted": null, "dead": null, "descendants": null, "id": 8894301, "ranking": null, "date": 1421346167000, "year": 2015}, {"by": "jrs235", "score": null, "time": 1421346706, "timestamp": 1421346706000, "title": "", "type": "comment", "url": "", "text": "Exactly.<p>Additionally if a parent stands up to CPS and refuses to sign, CPS will forcefully take your children (even if you shut the door and lock it they&#x27;ll go get the police, and hopefully a warrant, to come and get your kids) and that itself will cause psychological damage harming otherwise unharmed children. CPS thinks it can do no wrong when they can inflict more harm and damage on children without any oversight and repercussions for their mistakes and overzealousness.", "parent": 8894306.0, "deleted": null, "dead": null, "descendants": null, "id": 8894367, "ranking": null, "date": 1421346706000, "year": 2015}, {"by": "bryanlarsen", "score": null, "time": 1421347189, "timestamp": 1421347189000, "title": "", "type": "comment", "url": "", "text": "I haven&#x27;t had a lot of interaction with them, but my opinion is that CPS attracts very empathetic people -- people who are attracted to a job of &quot;saving the children&quot;.<p>These people are then exposed to a continuing stream of addicts, criminals, the mentally ill, etc, who are actively harming children.<p>Preserving your empathy in such a situation is very difficult.   I suspect most just protect themselves by shutting it down.<p>Not to mention the fact that to everybody you interact with considers you the &quot;bad guy&quot;.<p>I was at a party once where we everybody was trying to outdo each other describing the most disgusting thing they&#x27;d ever seen.   There were some whoppers there -- there were farmers, doctors and vets at the party.<p>The winner was a CPS officer.", "parent": 8893975.0, "deleted": null, "dead": null, "descendants": null, "id": 8894432, "ranking": null, "date": 1421347189000, "year": 2015}, {"by": "jrs235", "score": null, "time": 1421348772, "timestamp": 1421348772000, "title": "", "type": "comment", "url": "", "text": "So true.<p>If anyone other than an officer or CPS agent takes your children, they will face consequences and justice has an opportunity to prevail. If an officer or CPS agent takes your children justice never enters the equation and consequences don&#x27;t exist for them.<p>ADD: What can you do? &quot;You might be able to beat the rap but you can&#x27;t beat the ride. Now comply.&quot; In such situations you really are powerless. The worst kind of fear and situation, one where you are powerless.", "parent": 8894591.0, "deleted": null, "dead": null, "descendants": null, "id": 8894624, "ranking": null, "date": 1421348772000, "year": 2015}, {"by": "mordocai", "score": null, "time": 1421349109, "timestamp": 1421349109000, "title": "", "type": "comment", "url": "", "text": "No they are not delusional. I know of many cases (from my sister who worked in child protective services) where spiteful(or even sometimes well-meaning) neighbors report people to CPS for the dumbest things. CPS is required to investigate every one of them, and it is quite a hassle.<p>I&#x27;d say most of the time if you are actually doing nothing wrong the chance of them actually taking your kids is pretty low, but the chance of them making your life miserable for a while is pretty high.", "parent": 8894635.0, "deleted": null, "dead": null, "descendants": null, "id": 8894658, "ranking": null, "date": 1421349109000, "year": 2015}, {"by": "sophacles", "score": null, "time": 1421349168, "timestamp": 1421349168000, "title": "", "type": "comment", "url": "", "text": "I&#x27;m saying the following:<p>There are a lot of reasonable and unreasonable actions on ALL sides of this.<p>1. Cops are mandated to report any potential child neglect and abuse in most places. While I think children walking to school alone is a good thing, it doesn&#x27;t change the law stating that unsupervised children (details of the law are in the freaking article) fall under the umbrella of &quot;potential neglect&quot; as the rules are written.<p>2. The cops are following up on a report to them - again something they have to do. Some random person panicking over kids walking to school is where a lot of the rage should be placed. Not on the cops for following up because we have voted on laws requiring them to.<p>3. The mandatory reporting rules are in fact &quot;Tell CPS&quot;. So yes, of course CPS is going to get involved.<p>4. CPS decided to find the facts. They are mandated to investigate in a certain way. Again, not by busybodies, but by the freaking regulations.<p>5. The parents freaked out because CPS came to ask questions. Now, this I find pretty unreasonable - while I understand it&#x27;s stressful, it&#x27;s also not the end of the world. It&#x27;s a simple fact finding mission - answer the questions, with a lawyer if you feel it necessary.<p>6. Does this need to be investigated? By law yes, by sanity: no.<p>7. Yes, certainly all the facts are not being presented - the CPS is not allowed to comment on a case (by privacy laws) so we only hear the angsty parent&#x27;s side.<p>8. I don&#x27;t find the CPS case infuriating: I find the people who called the cops initially infuriating. I find the laws our society has enacted infuriating.<p>9. I&#x27;m sure the people who do foster care are a different division than the people who investigate neglect, however, they need to be in the same structure, because it makes sense to have the case worker assigned to a child be the same during an investigation and during follow-up.<p>10. It&#x27;s not a non-sequitor to mention the cops misbehaving scenario - It&#x27;s me pointing out an unreasonable difference between attitudes toward similar roles. Also note I said people, not &quot;xrange&quot;. Further - the call for banishment of police departments never happens, but the call for banishment of CPS seems OK - even though they are just enforcing a different group of laws.<p>11. Rotation would probably be good.", "parent": 8894301.0, "deleted": null, "dead": null, "descendants": null, "id": 8894664, "ranking": null, "date": 1421349168000, "year": 2015}, {"by": "sophacles", "score": null, "time": 1421349450, "timestamp": 1421349450000, "title": "", "type": "comment", "url": "", "text": "I don&#x27;t understand what you are saying? The CPS is required to follow up on every report, as a result of hand wavy crap likee &quot;there really are abused kids out there slipping through the cracks&quot;. But when they act on it, they are still the bad guy.<p>Whether I agree with the law or not - as it&#x27;s reported by the article, the children&#x27;s ages, and them being unsupervised, does in fact <i>potentially</i> qualify as neglect. The CPS wasn&#x27;t there to take children, they were there to find the facts. It isn&#x27;t unreasonable for them to say &quot;hey this takes a few days, we&#x27;re not taking your kids, but you have to not do the same actions again, as they may be illegal&quot;.<p>Also: there is a giant hole in your argument: if kids are falling through the cracks, perhaps it&#x27;s an indicator that the boogey man of &quot;the kids will certainly be taken&quot; is not as true as you think? Additionally, if kids are falling through the cracks, perhaps its that abusers (and neglectors) are known to be sneaky about it, so CPS needs to be thorough to prevent it?", "parent": 8894306.0, "deleted": null, "dead": null, "descendants": null, "id": 8894699, "ranking": null, "date": 1421349450000, "year": 2015}, {"by": "rythmshifter", "score": null, "time": 1421351120, "timestamp": 1421351120000, "title": "", "type": "comment", "url": "", "text": "government needs to GTFO of our lives.<p>I&#x27;ve been hearing that CPS gets a bonus for hitting their government mandated quota of how many kids they take away from their parents each year.", "parent": 8894628.0, "deleted": null, "dead": null, "descendants": null, "id": 8894886, "ranking": null, "date": 1421351120000, "year": 2015}, {"by": "lsaferite", "score": null, "time": 1421351381, "timestamp": 1421351381000, "title": "", "type": "comment", "url": "", "text": "The OP never said &quot;The government is going to take my children for playing in the front yard,&quot; so I&#x27;m at a loss where you got that quote. Maybe you inferred that&#x27;s what he meant when he said &quot;I&#x27;m afraid a neighbor will report me and the government will come take my kids away.&quot; That is a very real concern. When a CPS agent comes calling, any righteous indignation on your part can easily result in your children being taken into custody. If you don&#x27;t bend over and take it with a smile, they&#x27;ll make it 1000x worse.<p>EDIT: I really wish I could down-vote things.", "parent": 8894701.0, "deleted": null, "dead": null, "descendants": null, "id": 8894910, "ranking": null, "date": 1421351381000, "year": 2015}, {"by": "nextweek2", "score": null, "time": 1421352807, "timestamp": 1421352807000, "title": "", "type": "comment", "url": "", "text": "There are two counter points that are not covered. Kids getting hurt in car accidents doesn&#x27;t distinguish between them being in the car or being hit by a car. All of the car accidents I have heard where a child was hurt have been when the kid was crossing.<p>Secondly, its not a question of if the world is safer. The issue is with how litigious the world is, if the cops hadn&#x27;t called CPS and something was wrong they would have gotten in trouble, if the CPS hadn&#x27;t followed standard operating procedure their jobs would have been on the line.<p>In my opinion, as a parent, the people to blame are the over protective parents that call for &quot;Think of the children&quot; laws&#x2F;rule just because of statistically insignificant tragedies.", "parent": 8893554.0, "deleted": null, "dead": null, "descendants": null, "id": 8895035, "ranking": null, "date": 1421352807000, "year": 2015}, {"by": "innguest", "score": null, "time": 1421354005, "timestamp": 1421354005000, "title": "", "type": "comment", "url": "", "text": "Thanks for opening my eyes. I didn&#x27;t want kids before, and I knew if I had them I&#x27;d home-school them, not spank them, teach them negotiation skills and so on, but knowing anyone can call CPS, anonymously and without consequences, and put me through that traumatizing and exasperating ordeal, makes me think it&#x27;s not a matter of desire but prudence.<p>I can totally understand your rage. I can&#x27;t imagine another kind of reaction. It is very irresponsible and callous of CPS to act in that way. But then again what did I expect from the guvmint...<p>Thanks for relating your story.", "parent": 8894833.0, "deleted": null, "dead": null, "descendants": null, "id": 8895144, "ranking": null, "date": 1421354005000, "year": 2015}, {"by": "snowwrestler", "score": null, "time": 1421356808, "timestamp": 1421356808000, "title": "", "type": "comment", "url": "", "text": "The concept of CPS is a good one, as you say--they are specially trained to protect a very vulnerable segment of the population.<p>The problem is when CPS threatens to remove children from a home because the parents are not compliant with their commands. For example a CPS officer will show up to a home unannounced and demand to inspect it, based on an anonymous tip. If the parent says &quot;no,&quot; the CPS officer says, &quot;let me in, or I will remove your child from your home.&quot;<p>In contrast if a police officer came to your home, they would need a warrant from a judge to enter against the owner&#x27;s will. Do CPS officers need a judge&#x27;s warrant for the above demand? Everything I&#x27;ve read says no.<p>A police officer also cannot threaten to take property without a warrant. They can&#x27;t say, &quot;let me in or I will take your computer.&quot; If they want the computer, they need to get a warrant that specifically says they can take the computer.<p>So: it seems like parents have more rights to inanimate objects than to their own children, who are far more precious to them.<p>There&#x27;s also the matter of punishment without due process. Officers can get a warrant to take a computer only if they can show that the computer probably has evidence on it that will further an investigation. They can&#x27;t take a computer just to force the owner to comply with some other command.<p>Removing a child from a home punishes the parent. CPS has the power to do so even if they have no evidence that the child will show proof of abuse, or indeed without any tangible evidence of abuse whatsoever. They explicitly say that they are doing it only because the parent refused some other command, like to inspect a home or interview the parent.<p>And removing a child from a home is traumatic to the child. A computer doesn&#x27;t care that it&#x27;s going to the evidence room; a child will be confused and terrified. The emotional impact can persist for months or years even if CPS says &quot;oops!&quot; a day later and returns the child.<p>There needs to be a high standard for removing a child from a home. It absolutely should not be just another tool in the investigator&#x27;s toolbox.", "parent": 8894058.0, "deleted": null, "dead": null, "descendants": null, "id": 8895430, "ranking": null, "date": 1421356808000, "year": 2015}, {"by": "snowwrestler", "score": null, "time": 1421357147, "timestamp": 1421357147000, "title": "", "type": "comment", "url": "", "text": "&gt; It isn&#x27;t unreasonable for them to say &quot;hey this takes a few days, we&#x27;re not taking your kids, but you have to not do the same actions again, as they may be illegal&quot;.<p>That&#x27;s the opposite of what they said, though. Here&#x27;s the part that pisses people off:<p>&gt; The Meitivs say that on Dec. 20, a CPS worker required Alexander to sign a safety plan pledging he would not leave his children unsupervised until the following Monday, when CPS would follow up. At first he refused, saying he needed to talk to a lawyer, his wife said, but changed his mind when he was told his children would be removed if he did not comply.<p>His children would be removed if he did not sign a piece of paper. That&#x27;s totally disproportionate, and it&#x27;s ridiculous that an investigator would have (or claim) the power to mete such an extreme punishment on their own judgment.<p>If a police officer came to your door, they would be absolutely prohibited from making a similar threat against, say, your computer or car. Apparently parents have more rights to inanimate objects than to their children.<p>This is why people get up in arms about CPS. The bar for removing kids from a home is way too low.", "parent": 8894699.0, "deleted": null, "dead": null, "descendants": null, "id": 8895473, "ranking": null, "date": 1421357147000, "year": 2015}, {"by": "danielweber", "score": null, "time": 1421358605, "timestamp": 1421358605000, "title": "", "type": "comment", "url": "", "text": "It only takes one call to CPS for things to suddenly go very very wrong.", "parent": 8895416.0, "deleted": null, "dead": null, "descendants": null, "id": 8895612, "ranking": null, "date": 1421358605000, "year": 2015}, {"by": "iancarroll", "score": null, "time": 1421731364, "timestamp": 1421731364000, "title": "", "type": "comment", "url": "", "text": "Interesting case. This seems to contradict their own CPS as well, 4.1.9:<p>&gt;  A certificate will be revoked when the\ninformation it contains is suspected to be incorrect or\ncompromised.<p>and<p>&gt; The subscriber\u2019s key is suspected to be compromised;<p>&gt;The technical content or format of the certificate presents an unacceptable risk;", "parent": 8904278.0, "deleted": null, "dead": null, "descendants": null, "id": 8915593, "ranking": null, "date": 1421731364000, "year": 2015}, {"by": "spuiszis", "score": null, "time": 1422069375, "timestamp": 1422069375000, "title": "", "type": "comment", "url": "", "text": "Quite the contrary. CPS is making basic computer science a part of the K-12 curriculum, starting as earlier as Kindergarten[1]. It will take decades to see the actual results from this but its helping put the city on the right path.<p>[1]<a href=\"http://cps.edu/News/Press_releases/Pages/PR1_03_19_2014.aspx\" rel=\"nofollow\">http:&#x2F;&#x2F;cps.edu&#x2F;News&#x2F;Press_releases&#x2F;Pages&#x2F;PR1_03_19_2014.aspx</a>", "parent": 8937961.0, "deleted": null, "dead": null, "descendants": null, "id": 8938689, "ranking": null, "date": 1422069375000, "year": 2015}, {"by": "geofft", "score": null, "time": 1422907189, "timestamp": 1422907189000, "title": "", "type": "comment", "url": "", "text": "Threadpools. Pin threads to processors. Hardware synchronization extensions. Avoid shared state between threads and use language-level primitives to enforce appropriate locking when needed (this isn&#x27;t really much harder than language-level primitives to make CPS easy). IOCP.<p>Threadpools and innovative synchronization approaches (RCU) are exactly how the Linux kernel handles IO and interrupts internally. They <i>can</i> be unperformant if used poorly, but they don&#x27;t have to be.", "parent": 8986338.0, "deleted": null, "dead": null, "descendants": null, "id": 8986521, "ranking": null, "date": 1422907189000, "year": 2015}, {"by": "satyajoshi", "score": 1.0, "time": 1423221176, "timestamp": 1423221176000, "title": "Cyber-physical Systems (CPS)", "type": "story", "url": "http://www.ansmachine.net/2015/02/cyber-physical-systems-cps.html", "text": "", "parent": null, "deleted": null, "dead": true, "descendants": null, "id": 9008514, "ranking": null, "date": 1423221176000, "year": 2015}, {"by": "peteretep", "score": null, "time": 1423223010, "timestamp": 1423223010000, "title": "", "type": "comment", "url": "", "text": "As per the article, I don&#x27;t see the ICC bringing it (who obviously aren&#x27;t under the thumb of the UK), and if they don&#x27;t, I really don&#x27;t see the CPS coming to the conclusion that there&#x27;s a reasonable chance of conviction, or that it would be in the public interest. Depends what the report says I guess.", "parent": 9008558.0, "deleted": null, "dead": null, "descendants": null, "id": 9008576, "ranking": null, "date": 1423223010000, "year": 2015}, {"by": "innguest", "score": null, "time": 1423357816, "timestamp": 1423357816000, "title": "", "type": "comment", "url": "", "text": "I hope your use of adjectives has calmed down your nerves.<p>&gt; You might want to take a couple seconds to think about all the ways that taxation is different from actual slavery<p>I&#x27;ve thought and read about this for more than a couple of seconds, but if it makes you feel edgy to make unfounded statements about how much research your interlocutor has put into what he has said, then whatever floats your boat.<p>&gt; Taxation doesn&#x27;t control who you can marry.<p>Tell that to gay people in the US.<p>&gt; Taxation doesn&#x27;t confiscate your children.<p>Tell that to those whose children have been unfairly taken away by CPS (there was a terrifying experience related on HN not long ago).<p>&gt; Taxation doesn&#x27;t prevent you from practicing your religion.<p>Religion is bigotry justified and made immune to criticism via holy books. I&#x27;m against them so I don&#x27;t care about this point.<p>&gt; Taxation doesn&#x27;t require you to take the name of the person who owns you.<p>It does require you to get official papers, documents, and IDs registered with the oppressor, plus a passport and all your fingerprints to go from one tax farm to another.<p>&gt; Taxation doesn&#x27;t deliberately keep you ignorant and uneducated.<p>It sure does with the Prussian education model we use in the US, and you&#x27;re anecdotal proof of that.<p>&gt; Taxation doesn&#x27;t beat you to death if you try to escape (it is trivially easy to renounce your US citizenship)<p>From Wikipedia:\nRenunciation of U.S. citizenship was free until July 2010, at which time a fee of $450 was established.[29] An increase to $2,350, effective September 12, 2014, was justified as &quot;reflective of the true cost&quot; of processing.[30]<p>So it&#x27;s only &quot;trivially easy&quot; for those that have $2,350 in the bank which if you look at the statistics for the US isn&#x27;t that many people.<p>&gt; Taxation doesn&#x27;t tell you are less than a human because of your national origin.<p>Tell that to the Palestinians.<p>&gt; Taxation doesn&#x27;t make you owned by one person, a thing that can be sold to another person.<p>Tell that to the Greeks whose work and life savings are being negotiated to be sold to international banksters as we speak.<p>Good try though. Try again. This time try doing doing it better.", "parent": 9011794.0, "deleted": null, "dead": null, "descendants": null, "id": 9016043, "ranking": null, "date": 1423357816000, "year": 2015}, {"by": "jared314", "score": null, "time": 1423372317, "timestamp": 1423372317000, "title": "", "type": "comment", "url": "", "text": "There was an effort, in 2012, to create a generalized TCO in Clojure using CPS and trampolining. I don&#x27;t remember why it wasn&#x27;t fully pursued, but the JVM team is now talking about eventually fixing the core issue behind not supporting tail calls.<p>Clojure Conj 2012: <a href=\"http://youtu.be/RLqqGSthmC0\" rel=\"nofollow\">http:&#x2F;&#x2F;youtu.be&#x2F;RLqqGSthmC0</a><p>Source: <a href=\"https://github.com/cjfrisz/clojure-tco\" rel=\"nofollow\">https:&#x2F;&#x2F;github.com&#x2F;cjfrisz&#x2F;clojure-tco</a>", "parent": 9016357.0, "deleted": null, "dead": null, "descendants": null, "id": 9016480, "ranking": null, "date": 1423372317000, "year": 2015}, {"by": "mboes", "score": null, "time": 1423996952, "timestamp": 1423996952000, "title": "", "type": "comment", "url": "", "text": "&gt; 3. strictness: arguments abound about whether laziness or strictness is better; for me, it comes down to the fact that with some pain, you can embed laziness in a strict language with effects, but you cannot embed full-on ML-style strictness into a language like Haskell; moreover, strictness-by-default permits safe uses of benign effects.<p>I&#x27;ve seen this claimed before, but I&#x27;m not sure I can subscribe to any sense in which this statement is true. It&#x27;s been known since at least John Reynolds that you can make programs evaluation order oblivious by means of a CPS transformation: <a href=\"http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.110.5892\" rel=\"nofollow\">http:&#x2F;&#x2F;citeseerx.ist.psu.edu&#x2F;viewdoc&#x2F;summary?doi=10.1.1.110....</a>. Just as thunkification is a program transformation to simulate call-by-name, the call-by-value CPS program transformation is a way to simulate call-by-value.<p>Moreover, Haskell has strictness annotations, so strict programming is possible if you pepper all the arguments of all your functions with strictness annotations and you use only strict datatypes. In fact in the future a language pragma will do this for you: <a href=\"https://ghc.haskell.org/trac/ghc/wiki/StrictPragma\" rel=\"nofollow\">https:&#x2F;&#x2F;ghc.haskell.org&#x2F;trac&#x2F;ghc&#x2F;wiki&#x2F;StrictPragma</a>. That&#x27;s less invasive than a CPS transformation.", "parent": 9051067.0, "deleted": null, "dead": null, "descendants": null, "id": 9052293, "ranking": null, "date": 1423996952000, "year": 2015}, {"by": "tokenadult", "score": null, "time": 1425429573, "timestamp": 1425429573000, "title": "", "type": "comment", "url": "", "text": "The legal background of this case from Maryland must have something to do with the weird result so far: &quot;[Maryland Child Protective Services] officials have said they are guided in part by a state law that says children younger than 8 must be left with a reliable person who is at least 13. The law addresses children locked or confined in a building, dwelling, motor vehicle or other enclosed space, but does not mention children outdoors on a walk.&quot; My state, Minnesota, doesn&#x27;t appear to have such a law, and it doesn&#x27;t appear to have CPS officers who would give such a crazy interpretation to a comparable law. I have certainly had my children walking all over my neighborhood (a full mile from my house in either of two directions, for shopping or for trips to the library) when the oldest in the party was ten years old, for most of the last decade. It is very routine for my children to be out walking in our neighborhood, even during school hours, as we are a homeschooling family. This story is news in part because it is very unusual.<p>AFTER EDIT: Other reporting on this same story, with varying emphasis on other details:<p><a href=\"http://www.usatoday.com/story/news/nation/2015/03/02/parents-investigated-letting-children-walk-alone/24265981/\" rel=\"nofollow\">http:&#x2F;&#x2F;www.usatoday.com&#x2F;story&#x2F;news&#x2F;nation&#x2F;2015&#x2F;03&#x2F;02&#x2F;parents...</a><p><a href=\"http://www.wusa9.com/story/news/local/maryland/2015/03/02/free-range-parents-fight-child-neglect-ruling/24287953/\" rel=\"nofollow\">http:&#x2F;&#x2F;www.wusa9.com&#x2F;story&#x2F;news&#x2F;local&#x2F;maryland&#x2F;2015&#x2F;03&#x2F;02&#x2F;fr...</a><p><a href=\"https://ca.shine.yahoo.com/-free-range--parents-under-investigation-for-child-neglect-will-appeal-cps-decision-143030305.html\" rel=\"nofollow\">https:&#x2F;&#x2F;ca.shine.yahoo.com&#x2F;-free-range--parents-under-invest...</a><p>A letter to the editor of the local paper reporting the story points out that children can be required to walk that far to school in the same state:<p><a href=\"http://www.washingtonpost.com/opinions/children-were-caught-walking-at-the-wrong-time/2015/03/03/9c2d2962-c1b7-11e4-a188-8e4971d37a8d_story.html\" rel=\"nofollow\">http:&#x2F;&#x2F;www.washingtonpost.com&#x2F;opinions&#x2F;children-were-caught-...</a>", "parent": 9141892.0, "deleted": null, "dead": null, "descendants": null, "id": 9141947, "ranking": null, "date": 1425429573000, "year": 2015}, {"by": "A_COMPUTER", "score": null, "time": 1425435471, "timestamp": 1425435471000, "title": "", "type": "comment", "url": "", "text": "I know more than one person who is in complete support of these laws. You can&#x27;t argue with them, you can only outnumber them if you&#x27;re lucky.<p>I had some friends who worked weird hours when their two children were very young, and they were repeatedly harassed by child services because the same person repeatedly turned them in no matter how many times CPS determined there was no problem. By law CPS were required to act on every report. Probably a good idea, but it enables harassment in some cases.", "parent": 9141892.0, "deleted": null, "dead": null, "descendants": null, "id": 9142287, "ranking": null, "date": 1425435471000, "year": 2015}, {"by": "brandonmenc", "score": null, "time": 1425438237, "timestamp": 1425438237000, "title": "", "type": "comment", "url": "", "text": "Another story illustrating the disturbing trend of mandatory bureaucratic process. Entities run by expert systems instead of humans - CPS seems to be one of the worst offenders.<p>When people executing the law do it without discretion, watch out.", "parent": 9141892.0, "deleted": null, "dead": null, "descendants": null, "id": 9142425, "ranking": null, "date": 1425438237000, "year": 2015}, {"by": "bmelton", "score": null, "time": 1425440480, "timestamp": 1425440480000, "title": "", "type": "comment", "url": "", "text": "Honestly, it&#x27;s debatable whether or not you did misread it.<p>The way it reads, they weren&#x27;t found innocent of child neglect, they were found to be held responsible for the unsubstantiated child negligence charges.<p>Their names will be placed in a file, and if the cops responsible pick up the kids again for equally unsubstantiated claims, it will trigger a more thorough investigation.  At present, for the next five years, they&#x27;re on the CPS equivalent of &quot;probation&quot;.", "parent": 9142474.0, "deleted": null, "dead": null, "descendants": null, "id": 9142522, "ranking": null, "date": 1425440480000, "year": 2015}, {"by": "zaroth", "score": null, "time": 1425443744, "timestamp": 1425443744000, "title": "", "type": "comment", "url": "", "text": "The problem here is not the condition of the sidewalk. IMO the problem is too much immunity on the part of the CPS agents. Threatening to abduct a child from their parents in this situation, if they don&#x27;t sign some absurd contract to <i>not let their children walk outside</i>, should open them up to a lawsuit that should most certainly win, and the agent making the threat should lose their job. Instead, in the current legal environment the lawsuit would be dismissed and the CPS agent is praised for doing a good job!", "parent": 9142483.0, "deleted": null, "dead": null, "descendants": null, "id": 9142681, "ranking": null, "date": 1425443744000, "year": 2015}, {"by": "zaroth", "score": null, "time": 1425444143, "timestamp": 1425444143000, "title": "", "type": "comment", "url": "", "text": "There are 3 possible outcomes. Definitely not neglect, could be neglect but not convincingly substantiated, or definitely neglect. The only right answer is that this is definitely not neglect, and CPS failed the test.<p>This has nothing to do with guilt or innocence, because there <i>is no trial</i>. It is an administrative finding, and they screwed up badly on it.", "parent": 9142442.0, "deleted": null, "dead": null, "descendants": null, "id": 9142705, "ranking": null, "date": 1425444143000, "year": 2015}, {"by": "diyorgasms", "score": null, "time": 1425479025, "timestamp": 1425479025000, "title": "", "type": "comment", "url": "", "text": "What CPS is asking is that the parents prove a negative. The burden of proof should be on CPS to make a claim and offer evidence. What are the parents supposed to say? &quot;And on the thirtieth of November, we spent an hour not neglecting our children&quot;?<p>If not enough evidence exists to determine that neglect was happening, then these parents should not have CPS retaining a file on their &quot;unsubstantiated&quot; neglect for the next 5 years.", "parent": 9142399.0, "deleted": null, "dead": null, "descendants": null, "id": 9144331, "ranking": null, "date": 1425479025000, "year": 2015}, {"by": "myblake", "score": null, "time": 1428512376, "timestamp": 1428512376000, "title": "", "type": "comment", "url": "", "text": "It&#x27;s just a more organized way to use callbacks, but having spent several months on a project using CPS in node I will say it certainly helps add order and remove hellishness.", "parent": 9342074.0, "deleted": null, "dead": null, "descendants": null, "id": 9342171, "ranking": null, "date": 1428512376000, "year": 2015}, {"by": "prostoalex", "score": null, "time": 1428804605, "timestamp": 1428804605000, "title": "", "type": "comment", "url": "", "text": "They already have, more or less, with ACA coverage provisions. Old article, but<p>&quot;Along with more workers clocking just below 30 hours in their primary jobs, CPS data show the number working 20-29 hours in secondary jobs rose 105,000, or 7.6%, from a year ago.\nOther Labor Department data also suggest an ObamaCare effect. The average retail workweek for nonsupervisors shrank to a three-year low of 30 hours in July, down from a post-recession peak of 30.8 hours in January 2012. That&#x27;s the sharpest decline in the retail workweek since the early 1980s.&quot;<p><a href=\"http:&#x2F;&#x2F;news.investors.com&#x2F;080513-666340-obamacare-cuts-part-time-jobs-below-30-hours-data-show.htm\" rel=\"nofollow\">http:&#x2F;&#x2F;news.investors.com&#x2F;080513-666340-obamacare-cuts-part-...</a>", "parent": 9361256.0, "deleted": null, "dead": null, "descendants": null, "id": 9361790, "ranking": null, "date": 1428804605000, "year": 2015}, {"by": "FullyFunctional", "score": null, "time": 1428967438, "timestamp": 1428967438000, "title": "", "type": "comment", "url": "", "text": "Very interesting, though there&#x27;s a large overlap with material covered in the cited papers.<p>It was particularly interesting that a good result could be obtained despite started with such a simple model (CEK).<p>Some questions that comes to mind:<p>* Is the allocation elimination good enough that you could just treat all variable as set! mutated instead?<p>* If instead of direct-style (later &quot;re-discovered&quot; as A-normal form) you used CPS with first-class continuations, then the two-phases of the append problem would fall right out?<p>A downside to using a generic JIT engine, like RPython, is the loss of language specific GC opportunities (for a lazy language, these include indirection elimination, trivial reductions, untagged heap objects, ...).", "parent": 9365813.0, "deleted": null, "dead": null, "descendants": null, "id": 9371158, "ranking": null, "date": 1428967438000, "year": 2015}, {"by": "oliveira12345", "score": null, "time": 1429017801, "timestamp": 1429017801000, "title": "", "type": "comment", "url": "", "text": "&quot;Yet rather than putting people out of work, this will supposedly free them up for more creative, skilled tasks, rather than subjecting them to menial, low-skilled work&quot;<p>This is a lie.<p>It pretends that the factory owner will continue to pay the wages of existing employees <i>and</i> also the acquisition-and-maintenance of new CPS machines. Simply a lie.<p>It pretends that the employees will be free &quot;for more creative skilled tasks&quot;... this is almost insulting... Previous employees will be fired and in their place will be a small team of highly specialized technicians to control the machines. There is no hope for previous-employees to be kept, they will basically be replaced by machines - please don&#x27;t create illusions.<p>The truth is that this means layoffs and a new wave of unemployment, for the benefit of the corporate efficiency though machines highly intelligent.<p>The blame should not fall on the technology itself, but instead on the politics which allow the technology to be used to boost financial results without taking into account the social-costs of it.<p>I believe this should be regulated to create socially-owned factories to solve nation-wide necessities.", "parent": 9372807.0, "deleted": null, "dead": null, "descendants": null, "id": 9373982, "ranking": null, "date": 1429017801000, "year": 2015}, {"by": "_pmf_", "score": null, "time": 1429107731, "timestamp": 1429107731000, "title": "", "type": "comment", "url": "", "text": "&gt; The industry has also changed pretty drastically since I started LT. During its creation CPS gained traction, React was created, the Clojure ecosystem basically rewrote itself...<p>The software industry has not changed drastically for several decades. To call the introduction of a system (React) that is basically a workaround for a problem that  should does not exist at all in a sane environment (DOM) a drastic change for the software industry is a bit much.", "parent": 9377304.0, "deleted": null, "dead": null, "descendants": null, "id": 9381116, "ranking": null, "date": 1429107731000, "year": 2015}, {"by": "jnevill", "score": null, "time": 1429296211, "timestamp": 1429296211000, "title": "", "type": "comment", "url": "", "text": "I&#x27;ve had my kid brought home by the cops twice. Both times he was playing on the sidewalk less than 50 feet from our front door. What do you even say to a cop that thinks allowing your child to play in their own front yard unsupervised is dangerous? It&#x27;s insane. You risk getting a visit from CPS if your child goes unsupervised at any point in time. In practice, it&#x27;s rare, but not so rare that parent&#x27;s like me and my wife don&#x27;t worry about every time our kids run outside to play.", "parent": 9396283.0, "deleted": null, "dead": null, "descendants": null, "id": 9396311, "ranking": null, "date": 1429296211000, "year": 2015}, {"by": "DanBC", "score": null, "time": 1429374164, "timestamp": 1429374164000, "title": "", "type": "comment", "url": "", "text": "Homes are pretty dangerous and sometimes children do stupid things.  While child protective services shouldn&#x27;t be called[1] for someone leaving a child for a short time CPS needs to have clear and easy to communicate guidelines.  They might want to say &quot;11 and up; unless they&#x27;re not stupid and the home is safe and you&#x27;re not gone too long&quot; but, well, the target audience needs clearer information.<p>[1] it&#x27;d be good if we had a &quot;report early, report often&quot; culture and the funding to go with it. A single report of a mild incident means nothing happens; several reports of mild incidents from different agencies means a freindly chat to see if help is needed or wanted.", "parent": 9399732.0, "deleted": null, "dead": null, "descendants": null, "id": 9399966, "ranking": null, "date": 1429374164000, "year": 2015}, {"by": "abfan1127", "score": null, "time": 1429375076, "timestamp": 1429375076000, "title": "", "type": "comment", "url": "", "text": "under particular circumstances, yes I would. If my 10 year old was responsible and my 6 year old was responsive to my 10 year old&#x27;s responsibility, I&#x27;d let them go down the street to the park. What&#x27;s sensationalist bullshit is the garbage the police are spouting and the garbage CPS will be spouting as they take kids from their parents. They seem to think the foster care system will do a better job of raising the kids than these parents how have raised kids to be able to play at the park unattended.", "parent": 9399997.0, "deleted": null, "dead": null, "descendants": null, "id": 9400023, "ranking": null, "date": 1429375076000, "year": 2015}, {"by": "DanBC", "score": null, "time": 1429380028, "timestamp": 1429380028000, "title": "", "type": "comment", "url": "", "text": "The government needs to protect children before they&#x27;re maimed by careless or stupid parents.  A government agency letting you know what it considers risky behaviour is a good thing, so long as they don&#x27;t set it too restrictively.<p>You may say &quot;but what kind of fucking idiot would leave an 11 year old child at home alone for more than 24 hours?&quot;<p>Here&#x27;s a story about a woman who left her 11 year old boy alone at home while she went on a three week holiday.<p><a href=\"http:&#x2F;&#x2F;news.bbc.co.uk&#x2F;1&#x2F;hi&#x2F;england&#x2F;2601747.stm\" rel=\"nofollow\">http:&#x2F;&#x2F;news.bbc.co.uk&#x2F;1&#x2F;hi&#x2F;england&#x2F;2601747.stm</a><p>That article also mentions the case of a twelve year old boy who was left alone for a fortnight.<p>Thus, when CPS get a report of a child alone at home it&#x27;s a good idea for them to ask (but not formally; not as part of taking action) if the child is safe or if the parents are going to be back that day or not.", "parent": 9400013.0, "deleted": null, "dead": null, "descendants": null, "id": 9400379, "ranking": null, "date": 1429380028000, "year": 2015}, {"by": "Crito", "score": null, "time": 1429380755, "timestamp": 1429380755000, "title": "", "type": "comment", "url": "", "text": "<i>Every single</i> parent alive today is descended from a long line of parents, dating back to the origin of life itself, that did not need CPS to tell them how to act.<p>The idea that after all of those successful iterations we are now too stupid to raise our own kids is incredibly insulting.", "parent": 9399966.0, "deleted": null, "dead": null, "descendants": null, "id": 9400432, "ranking": null, "date": 1429380755000, "year": 2015}, {"by": "gglitch", "score": null, "time": 1429382181, "timestamp": 1429382181000, "title": "", "type": "comment", "url": "", "text": "&quot;Report early, report often&quot; sounds extremely creepy and intrusive to me. I realize my culture is fully embracing the police state all around me, and I try not to play the Orwell card too often, but how can it not seem eerily Orwellian to suggest that parents should be reported early and often? What&#x27;s next, CPS monitors in the home?", "parent": 9399966.0, "deleted": null, "dead": null, "descendants": null, "id": 9400512, "ranking": null, "date": 1429382181000, "year": 2015}, {"by": "DanBC", "score": null, "time": 1429382899, "timestamp": 1429382899000, "title": "", "type": "comment", "url": "", "text": "The first reaction a parent should have to &quot;I might leave my child at home for a few hours&quot; absolutely should be &quot;is it safe?&quot;<p>CPS is not there for parents who know how to assess risk. They exist for parents who by definition are bad parents. Those parents need simplistic advice, with the threat of legal action. The fact that CPS overstepped their bounds in a few cases is bad, and needs to stop, but it doesn&#x27;t change the fact that the advice needs to be clear and simple.<p>And government totally should be trying to influence parents. I guarantee that their are some kind loving parents reading HN right now who do not have working tested fitted smoke detectors. Government here should be playing persuasive adverts; subsidising the costs of smoke detectors; providing assistance to fit those detectors; regulating the manufacture of detectors so we know they work.<p>The thing that has annoyed me about the discussions of these cases is that people are only talking about the disruption to this family&#x27;s life. The real outrage is CPS wasting time on non abusive parents when so many children are raped and murdered.  An estimate 1600 children died as a rssult of abuse or neglect from a primary care giver in 2012; that doesn&#x27;t count murders by other family members.<p>I fully stand by my comment that the home is a dangerous place for children.  Home is where children are murdered by family members; physically, sexually or emotionally abused by family members (and siblings are the greatest risk of being the abuser); most accidents happen in the home. Children can&#x27;t get jobs; can&#x27;t vote; are not held criminally responsible for their actions[1] -- so parents should be thinking carefully before they leave children alone in the house.", "parent": 9400007.0, "deleted": null, "dead": null, "descendants": null, "id": 9400562, "ranking": null, "date": 1429382899000, "year": 2015}, {"by": "graycat", "score": null, "time": 1429395818, "timestamp": 1429395818000, "title": "", "type": "comment", "url": "", "text": "Let&#x27;s see:<p>(1) Fifth grade, I got a trumpet so\nrode the city bus downtown, 7 miles, \nto music lessons.<p>(2) Once also downtown there was a movie\nI wanted to see so got a little extra\ncash and went to the movie after the\nmusic lesson.<p>(3) About then on radio I heard Beethoven&#x27;s 7th\nSymphony.  So, when the NY Phil came to town,\nI got a ticket and rode the bus, right, \nto downtown, 7 miles away.<p>(4) After school, I did what I wanted,\nwent exploring.<p>(5) Soon I got a bicycle so rode it\nto and from school and otherwise was\nGONE on my bicycle, commonly rode\nfive miles away, once about 10 miles\nto the next state.<p>(6) When about 11, visited a friend\nmy age\nin the country.  He had a motorcycle,\nand we went &quot;two up&quot; for miles and\nmiles.<p><i>Onion</i> solution for the threat of abduction\nand harassment of children in MD,\nnot entirely in jest:\nPut\nthe MD police and CPS\nin diapers in bed overnight,\nand in the morning have them write\n500 times &quot;I will not be a fool&quot;.\nHave all their travels out of\nhouse or office supervised <i>with</i>\na leash and a GPS ankle bracelet.  \nFour days a week have them wear an\norange jump suit with lettering\n&quot;I am a fool&quot; and work on their knees with\na toothbrush washing the sidewalks.\nFor the next year, have them do\n15 minute <i>check ins</i> with actually\ncompetent <i>adult supervision</i>.<p>Much simpler solution:  Drastically\ncut the budgets of the police and CPS.<p>Likely actual solution:  Have the\nMD police and CPS lose a big law suit,\nand have that legal case provide\n<i>cover</i> for the bloodless bureaucrats\nthat put up with such nonsense\nto tell the hysterical busy-bodies\nto <i>cool it</i>.", "parent": 9399582.0, "deleted": null, "dead": null, "descendants": null, "id": 9401317, "ranking": null, "date": 1429395818000, "year": 2015}, {"by": "Delmania", "score": null, "time": 1429626428, "timestamp": 1429626428000, "title": "", "type": "comment", "url": "", "text": "I do not want to ignore the fact that society has changed, and with that, the risks and dangers children face have grown. There was an incident at my home where my youngest daughter was playing outside alone (my mom was inside), and a rather decrepit van paused at the corner, idling. When my mother came outside, the van promptly took off. It might be an overreaction to a single event, but, to me, it was a chilling reminder.<p>However, CPS agents can definitely overstep their authority, to the point where they will issue threats they can not legally enforce. If you ever deal with CPS, it&#x27;s best to get a family lawyer, and not allow them into your house unless they are accompanied by a police officer. Even better, record the conversation. No matter what an agent or a supervisor may claim, it is not illegal to record a conversation in  your house. Outside of that, be polite and courteous, keeping in mind that many of these people are overworked and dealing with hostile people every day. The point is to ensure your rights are protected.", "parent": 9413705.0, "deleted": null, "dead": null, "descendants": null, "id": 9414228, "ranking": null, "date": 1429626428000, "year": 2015}, {"by": "tel", "score": null, "time": 1430240669, "timestamp": 1430240669000, "title": "", "type": "comment", "url": "", "text": "Eh, I&#x27;m playing fast and loose to validate a number of interesting things that come out of that blog post. The `FFI a` functor is just Yoneda of (F o = exists i . (FFI i o, i)) which you want because we can&#x27;t guarantee that `FFI i` is a functor. You can form the standard free monad over (Yoneda F) just fine, but if you do it in the weird CPS style indicated here you get something that&#x27;s faster in Haskell (&quot;well, ok, so what&quot;) but also has a really nice story where the only remaining bit is &quot;the interpreter is exactly giving semantics to FFI&quot;.<p>It&#x27;s also nice to do parallel threads in this way, but it&#x27;s not infeasible to do them with the standard free formation. Totally just aesthetics. I&#x27;ll see if I can dig up an example of two concurrent threads interacting over a shared flipflop.<p>Also worth thinking about a definition of FFI which goes like<p><pre><code>    data FFI i o where\n      Unsafe :: (i -&gt; o) -&gt; FFI i o\n      C :: (Storable i, Storable o) =&gt; String -&gt; FFI i o</code></pre>", "parent": 9453452.0, "deleted": null, "dead": null, "descendants": null, "id": 9453741, "ranking": null, "date": 1430240669000, "year": 2015}, {"by": "tptacek", "score": null, "time": 1430802361, "timestamp": 1430802361000, "title": "", "type": "comment", "url": "", "text": "There&#x27;s a difference between demographic info being available for a school and it being on the front page of the school&#x27;s site. Before clicking through your Chicago link, I tried to find a CPS school site that made demos easy to find, and came up empty. You&#x27;ve hotlinked to the fact sheet for a specific school to make your point, which isn&#x27;t entirely fair.<p>I live in Oak Park, and my kids go to OPRF, which is 53&#x2F;37 white&#x2F;(latino|african-american). Minorities are (thankfully) overrepresented in the school. Oak Park (a&#x2F;k&#x2F;a&#x2F; &quot;The People&#x27;s Republic Of Oak Park&quot;) isn&#x27;t conservative, and the (tiny) village is a haven for well-off white families who want to live close to the city without sending their kids to CPS schools. Lower-income families rent apartments along Austin Ave, or Section 8 houses on blocks like mine, and manage to get their kids into Oak Park schools without too much trouble.", "parent": 9489940.0, "deleted": null, "dead": null, "descendants": null, "id": 9490932, "ranking": null, "date": 1430802361000, "year": 2015}, {"by": "SteveGerencser", "score": null, "time": 1431620705, "timestamp": 1431620705000, "title": "", "type": "comment", "url": "", "text": "Mine used to teach me chemistry and physics by doing things like putting lighter fluid in my hand, lighting it and then saying go show your mom. If even a tenth of the things we did as kids was done today I have to think CPS would be involved.", "parent": 9545877.0, "deleted": null, "dead": null, "descendants": null, "id": 9545995, "ranking": null, "date": 1431620705000, "year": 2015}, {"by": "oqnet", "score": null, "time": 1431621631, "timestamp": 1431621631000, "title": "", "type": "comment", "url": "", "text": "I think we should be safe but I do think we should let people explore.  It&#x27;s crazy to think what I did just 20 years ago is now something people would be frightened of(run off and play with friends).  I didn&#x27;t have play dates I didn&#x27;t have boundaries, I had parents who gave me morals and let me guide myself.  I had adventures with friends I will never forget, I had games where we ruled until we went home.  If someone got hurt(and it did) we got an adult, it was a simple concept.<p>I have kids now and while they aren&#x27;t as old as I was when I started roaming the neighborhood it saddens me that I&#x27;m frightened to let them.  Not because I&#x27;m worried someone will harm them and&#x2F;or kidnap them, but because I&#x27;m worried someone will call the cops and CPS will come.  That I will have a blip on a piece of paper(or electronic file these days) and that it could lead to court orders and in an extreme my kid taken away if only for a little while.<p>I know that the police have to do their job and if someone reports a kid wonder around they should respond.  I just wish that they weren&#x27;t forced to call CPS in every instance(they are required any time a minor is involved here), like they aren&#x27;t capable of assessing a situation.<p>We live in a different world, but I don&#x27;t believe it is any less safe than it was 20 years ago.", "parent": 9546036.0, "deleted": null, "dead": null, "descendants": null, "id": 9546080, "ranking": null, "date": 1431621631000, "year": 2015}, {"by": "kirsebaer", "score": null, "time": 1431628808, "timestamp": 1431628808000, "title": "", "type": "comment", "url": "", "text": "How often does it really happen that CPS or the police are involved when a kid walks alone to grandma&#x27;s or builds a tree-house? These are rare, shocking cases that get into the news and are discussed on the internet.<p>Please be careful to not fall into the fear trap. Safety-nuts are afraid about rare &quot;worst case&quot; scenarios where a child is harmed. And then safety-nut-critics get themselves scared about rare cases where CPS or police are called a child playing alone.<p>Just go ahead and let your kid be a kid.", "parent": 9546036.0, "deleted": null, "dead": null, "descendants": null, "id": 9546780, "ranking": null, "date": 1431628808000, "year": 2015}, {"by": "bmelton", "score": null, "time": 1431630185, "timestamp": 1431630185000, "title": "", "type": "comment", "url": "", "text": "I do, and I agree, that it is statistically very rare indeed.  Living in Maryland (where we&#x27;ve seen much of these CPS shenanigans taking place) perhaps invokes my lizard brain paranoia even more, but just as I have coerced my daughter into the ocean because it is statistically safe, I have also coerced myself into letting her play, unattended, because while my irrational brain tells me that CPS is a potential threat, I have no problems forcing my rational brain to make decisions in spite of it.", "parent": 9546780.0, "deleted": null, "dead": null, "descendants": null, "id": 9546915, "ranking": null, "date": 1431630185000, "year": 2015}, {"by": "TeMPOraL", "score": null, "time": 1432922458, "timestamp": 1432922458000, "title": "", "type": "comment", "url": "", "text": "Here goes my dream of being the first to create a CPS suit from Continuum.<p>It&#x27;s actually a weird feeling - on the one hand I love the progress we have; on the other hand, I feel sad that I can&#x27;t get to be a part of it. It also seems to me that any cool idea I have tend to become a mass-market product before I can get around to start prototyping.<p>Yeah, I know, the real world. Real world sucks :(.", "parent": 9625641.0, "deleted": null, "dead": null, "descendants": null, "id": 9626238, "ranking": null, "date": 1432922458000, "year": 2015}, {"by": "avalaunch", "score": 121.0, "time": 1434075743, "timestamp": 1434075743000, "title": "11-Year-Old Boy Played in His Yard. CPS Took Him, Felony Charge for Parents", "type": "story", "url": "http://reason.com/blog/2015/06/11/11-year-old-boy-played-in-his-yard-cps-t", "text": "", "parent": null, "deleted": null, "dead": null, "descendants": 68.0, "id": 9703663, "ranking": null, "date": 1434075743000, "year": 2015}, {"by": "dudul", "score": null, "time": 1434079031, "timestamp": 1434079031000, "title": "", "type": "comment", "url": "", "text": "CPS are disgusting scum.  This kind of story is reported every week. The government is criminalizing parenthood.  Kids can&#x27;t play in their backyard, they can&#x27;t walk to the playground, they can&#x27;t ride their bikes.  Do people remember their childhood?  When did Americans become so socially retarded?", "parent": 9703663.0, "deleted": null, "dead": null, "descendants": null, "id": 9703830, "ranking": null, "date": 1434079031000, "year": 2015}, {"by": "kzhahou", "score": null, "time": 1434080579, "timestamp": 1434080579000, "title": "", "type": "comment", "url": "", "text": "These cases are a tiny minority.  CPS deals with real horrifying and tragic situations every day.<p>I&#x27;m actually more shocked that there are prosecutors and even judges that go along with this BS.  I can believe one insane activist CPS worker here and there, but an entire chain of people to back them up??", "parent": 9703830.0, "deleted": null, "dead": null, "descendants": null, "id": 9703901, "ranking": null, "date": 1434080579000, "year": 2015}, {"by": "mcphage", "score": null, "time": 1434081375, "timestamp": 1434081375000, "title": "", "type": "comment", "url": "", "text": "&gt; CPS deals with real horrifying and tragic situations every day.<p>That&#x27;s what boggles my mind the most.  Every time we hear about CPS they&#x27;re overworked and have to deal with horrors I don&#x27;t even want to imagine.  But how do they have time to waste voluntarily ruining peoples&#x27; lives?", "parent": 9703901.0, "deleted": null, "dead": null, "descendants": null, "id": 9703949, "ranking": null, "date": 1434081375000, "year": 2015}, {"by": "vacri", "score": null, "time": 1434082937, "timestamp": 1434082937000, "title": "", "type": "comment", "url": "", "text": "Are we being fed a heavily edited version of the story? Was there more to the parental history than is mentioned? Why hide the identity of the parents, given that they&#x27;ve already been through the wringer and the whole affair is a matter of public record?<p>Given how overloaded CPS usually are, this article fails the sniff test.", "parent": 9703847.0, "deleted": null, "dead": null, "descendants": null, "id": 9704041, "ranking": null, "date": 1434082937000, "year": 2015}, {"by": "IvyMike", "score": null, "time": 1434082955, "timestamp": 1434082955000, "title": "", "type": "comment", "url": "", "text": "Is there any corroboration of the story, or a response by CPS and&#x2F;or the court?  It&#x27;s very possible I missed it, but neither the article nor the comments give a solid source other than the parents.<p>Because the skeptic in me says that while CPS might be pretty bad, it&#x27;s also not inconceivable that the aggrieved parents might leave out key details of the story.  So I&#x27;d like to hear what CPS (or really, any other source) has to say before I get too up-in-arms here.", "parent": 9703663.0, "deleted": null, "dead": null, "descendants": null, "id": 9704043, "ranking": null, "date": 1434082955000, "year": 2015}, {"by": "graycat", "score": null, "time": 1434082979, "timestamp": 1434082979000, "title": "", "type": "comment", "url": "", "text": "&gt; How the hell did this happen?<p>Standard:  Some bad parents actually do\nexist.  So, with a few such examples, \nsome people who want to get attention\nget some laws passed and set up CPS\nwith some really big powers, e.g., ones\nthat violate little things like due process.\nSome of the laws mention felonies.<p>Then the CPS department gets created,\nfunded, and staffed.  Then a phone call\ncomes in, and CPS <i>swings into action</i>.<p>Then, CPS wants to look busy, <i>do their\njob</i>, believes that they are now responsible\nfor the child, wants to make sure nothing\ngoes wrong where they could be blamed, so\ntake full control of the life of the child,\nas their rules say, and to heck with\nanything like due process, the actual\ngood of the child, the good of the\nfamily, etc.  Instead, CPS becomes just\nlaw and rules driven.<p>So, CPS is brain-dead, dysfunctional,\ndangerous, destructive, demented,\nderanged, etc.  Why?  They are just\nfollowing the law and their rules\nto avoid any blame.<p>So, CPS put a torpedo just below the\nwaterline of that totally innocent\nfamily.  They did psychological\ndamage to the child; they harmed\nthe sense of security of the family;\nthey wasted the time of the family;\nthe may have wrecked the family\nfinances due to the legal costs.<p>Earlier tonight I watched the <i>Nova</i>\nprogram on the June 6, 1944 Normandy\nlanding.  I was reminded of all the\ndeath and destruction fighting Hitler.<p>But then with something like CPS\nand US police shooting unarmed Blacks\nin the back, etc., we are creating\ndisasters out of nothing, nothing\nat all, disasters, out of nothing,\nfor no good reason.<p>The judge?  He should have\nfound a way to charge the CPS\nthugs, laughed their case out of\ncourt, and put the family back \ntogether.  Since he didn&#x27;t, he\nshould get a new career\ncleaning sidewalks with a tooth brush --\n&quot;Nice and clean, now, y&#x27;hear?&quot;.<p>CPS must report to a mayor or\ngovernor, etc.  Well, with\nenough such stories, the mayor\nor whomever should ensure that the\nhead\nof CPS and everyone involved\nin that case should join\nthe judge in brushing the\nsidewalks.<p>Part of the solution is <i>sunlight</i>,\ne.g., on the Internet.<p>Too often our government has become\njust a dangerous enemy of the citizens.\nThe citizens should vote \nfor the needed changes.  Due to CPS,\nevery family with children is\nat risk of essentially just\nthugs from CPS wrecking their\nfamilies, a greater risk than a\nbomb from a terrorist and\ncomparably dangerous.<p>TSA?  Sure, they can steal money\nand valuables from your luggage and\nmolest your wife and daughters.<p>Gee, when I was 10 or so, I got\na three speed bicycle, and then,\nespecially during the summers,\nI was <i>gone</i> for hours at a time,\nsometimes 20 miles round trip.\nNo problems.<p>I was big for\nmy age:  If some CPS types\nhad tried to do something\nto me, it would have been\na fight, a real fight --\nI would have defended myself\nfrom the CPS attackers.\nSure, if I could have found\na club, I would have\nbeat them to a bloody pulp --\njust ordinary self-defense.<p>Government wants to grow, like\npoison ivy or worse.  Have to\ncut it back.  The key way:\nJust cut their budgets.  How to\ndo that?  Sure, vote.  Then\nget rid of the government\nthugs who attack citizens and\nget lower taxes.<p>Read.  Complain.  Vote.\nSolve the problem.  That&#x27;s\nwhat our democracy is for\nand some of why we really\nneed democracy.  Else the\ngovernment will grow and\ngrow and become a hostile\n<i>occupying force</i> in our\ncountry like Hitler \noccupied Poland.<p>In Normandy is a cemetery \nwith, as I recall from the\n<i>Nova</i> program, 9000 graves\nof US soldiers who fought\nfor our freedom.  Well, we\nshould not let out of control\ngovernment do to us what\nHitler would have done.", "parent": 9703847.0, "deleted": null, "dead": null, "descendants": null, "id": 9704045, "ranking": null, "date": 1434082979000, "year": 2015}, {"by": "randxx", "score": null, "time": 1434083792, "timestamp": 1434083792000, "title": "", "type": "comment", "url": "", "text": "As an American who spends a lot of time in other countries, here&#x27;s my best, shortest attempt to explain:<p>1) The cultural trust and norms in our country are dead. Everything gets the most superficial consideration, there&#x27;s no basis of reasonableness such that even the judge doesn&#x27;t stop the machine, power is so distributed that there&#x27;s no reasonable authority in place, and people like CPS -- who have difficult and challenging and necessary jobs -- don&#x27;t know how to recognize &quot;normal&quot; when they see it. American has no &quot;normal&quot; anymore, and everyone acts based on their greatest fears, informed by our weird local news, NCIS&#x2F;Law&amp;Order fear-mongering mentality. We used to have class divisions that kept things a little normal within class lines, now class divisions have been destroyed such that everyone&#x27;s caught in a race to the bottom.<p>1b) I like to think I&#x27;m not really subject to #1, being an upper middle class white professional... but I live in a relatively urban environment, with a pre-teen child, and there&#x27;s a sense that one socially construed &quot;accident&quot; can send me into a can of worms that can take years to climb out of. So, until then, I&#x27;ll assume I&#x27;m relatively untouchable, because I&#x27;m not really sure what else my option is. I can see relocating, to one of my international anchor points.. permanently, at some point.<p>2) There&#x27;s a strong tinge of &quot;fuck them&quot; or &quot;they have no right&quot; or &quot;they shouldn&#x27;t&quot; in a lot of American interactions now, whether formal or otherwise. People are endlessly bothered by things they aren&#x27;t affected by. I mean, it&#x27;s not everywhere...<p>American culture is now a corporate construct designed to make everyone in its demographic purview feel strongly about something that doesn&#x27;t matter to them, whether it&#x27;s escapees with big dicks or the Kardashians. Radio plays the same 10 songs over and over and over again so you have to hit scan and your radio takes you through stations back to news anchor talking about news that doesn&#x27;t matter. And if you get home and turn on the TV you&#x27;re assaulted by the local news anchors with &quot;news you can trust&quot; or weather reports &quot;you can count on&quot;, and when you ignore that your co-worker at work will just force it down your throat anyway, and you&#x27;ll pretend to go along with it so as to have some minor smidgeon of false rapport, lest you come off as anti-social or.. critical.<p>I was just at a farmer&#x27;s market tonight where kids ran free and cops patted kids on the head and dogs were off leash and people were eating ice cream and yelling and laughing. But it just takes one person, with a spiteful &quot;I&#x27;ll get &#x27;em...&quot; trigger to bring an invisible avalanche into the room. I think it&#x27;s worse in urban areas and in suburban areas, which is why I&#x27;ve been living in medium sized &quot;towns&quot; with urban centers. There seems to be less of that in that kind of neighborly construct. But neither can we talk about places like urban California, suburban California, and rural California in equal terms that cover those places, but also midwestern areas or southern areas or bible belt areas. We&#x27;re not one country anymore, and we have no norms, and people are always told that someone, somewhere is taking shit from them, whether it&#x27;s terrorists, the emboldened, or the entitled. There are each of those, but fewer bothering each of us in actuality. But lots of people can&#x27;t see the normal in the normal anymore, either.", "parent": 9703883.0, "deleted": null, "dead": null, "descendants": null, "id": 9704086, "ranking": null, "date": 1434083792000, "year": 2015}, {"by": "fsloth", "score": null, "time": 1434083848, "timestamp": 1434083848000, "title": "", "type": "comment", "url": "", "text": "While the story is of course fucked up the comments about CPS being some kind brownshirt-nanny corps are perhaps a bit overblown? There are actually people who do more harm than good to their kids and that&#x27;s the reason I suppose these procedures exist.<p>I would say it is the &#x27;common standard&#x27; of what constitues a negligence that is the twisted thing here. Normal kids don&#x27;t need a 24 hour supervisor once they go to school.", "parent": 9703663.0, "deleted": null, "dead": null, "descendants": null, "id": 9704088, "ranking": null, "date": 1434083848000, "year": 2015}, {"by": "ghshephard", "score": null, "time": 1434084797, "timestamp": 1434084797000, "title": "", "type": "comment", "url": "", "text": "The part you didn&#x27;t mention is where CPS, and individual CPS employees are sued, and lambasted in the press when they <i>don&#x27;t</i> act, and then something happens downstream, and they end up taking all the blame.<p>I tend to agree with your general theme though, that what we&#x27;re seeing is the result of system systems that have been funded, and now are doing what they were created to do.", "parent": 9704045.0, "deleted": null, "dead": null, "descendants": null, "id": 9704126, "ranking": null, "date": 1434084797000, "year": 2015}, {"by": "Delmania", "score": null, "time": 1434112828, "timestamp": 1434112828000, "title": "", "type": "comment", "url": "", "text": "&gt; But how do they have time to waste voluntarily ruining peoples&#x27; lives?\nPerception bias. The only time you&#x27;ll hear about CPS is in a case like this, when the agent is on a power trip and oversteps his bounds. You never hear about the success stories, where they intervene to save a child, or are successful in getting a family therapy.<p>I can speak from experience here, I have dealt with CPS. When I was notified they would be visiting our house, I did some research. I read the horror stories, and I learned a key detail: CPS is not a policing agency. The threats of taking your children from you and throwing you in jail are idle: only police and judges can do that. When you deal with CPS, only let them in your house if they agree to be recorded. If they refuse, or their supervisor objects, don&#x27;t let them in. Unless they have a warrant, you are under NO obligation to deal with them. (Bear in mind, though, the courts will probably side with CPS)<p>But I digress. My experience with the social worker was that she was just as nervous in dealing with me as I was with her, but she was genuinely interested in understanding and offering assistance. She asked a few questions, held a follow up visit, and that was the end of it.", "parent": 9703949.0, "deleted": null, "dead": null, "descendants": null, "id": 9705456, "ranking": null, "date": 1434112828000, "year": 2015}, {"by": "graycat", "score": null, "time": 1434148753, "timestamp": 1434148753000, "title": "", "type": "comment", "url": "", "text": "Let&#x27;s look at this slightly\ndifferently:  Suppose the 10\nyear old child the CPS abducted from\nplaying safely in their back yard\nwas -- right, you guessed it --\na girl.<p>In this case some fathers might --\nI won&#x27;t if only because I&#x27;m not a\nfather -- might, ..., might,\nright, what&#x27;s the term?<p>CPS abducted his 10 year old\ndaughter:  Zuilly makes a bundle\nselling pretty princess and angel\nclothes to grand parents for their\ngrand daughters, often just 10.\nThose princess, angel clothes\nindicate some of the protective\nemotions grand parents and parents\nhave for daughters, e.g., <i>Perfect\nDaughter</i>.  In our society, there\nare strong norms that girls are\ncared for, protected.<p>And CPS abducts her?  Perfect daughter?<p>Am I getting to make this situation\nclear?<p>Okay, maybe it&#x27;s her dear dad\nor her dear uncle, one or both\nfresh back from Akrapistan,\nmaybe Army Rangers, maybe\nSeal Team 6.  And CPS abducted\nPerfect Daughter playing safely\nin her backyard?<p>CPS might be in line for a Darwin\naward.<p>Looks like Perfect Daughter\nneeds two or three very devoted,\nyoung, healthy German Shepards or\nRotweilers.<p>CPS overreach is not all just \nclick bait:  I know a family,\nwell known coast to coast, in\nUS finance, famous name,\nwealthy, generous philanthropists.\nWell, at one point a son of about\n8 in the family fell and, maybe,\nbruised his arm or some such.<p>Well, somehow CPS paid a visit.  Insisted\non getting involved.  Issued\nthis and that order\nto the parents.<p>Absurd.  Wacko.  Overreach.<p>If my startup works, I\nget financially comfortable,\nand CPS or some such\nmakes trouble for\nthe nephews, nieces, etc.\nin my family, then\nI will go to a big, powerful,\nall-go, never-stop,\nnail&#x27;em to the wall law\nfirm and see just how much\nlegal trouble we can cause\nCPS and its wackos.<p>If they want a legal fight\nand my checkbook is much \nthicker than theirs, then\nbring it on.  It will be\na good purpose for my startup\nwork.<p>I don&#x27;t like <i>gumment</i>\nwackos hurting\nfamilies and children.<p>It&#x27;s happened.  It shouldn&#x27;t.", "parent": 9703847.0, "deleted": null, "dead": null, "descendants": null, "id": 9709006, "ranking": null, "date": 1434148753000, "year": 2015}, {"by": "brudgers", "score": 9.0, "time": 1434300090, "timestamp": 1434300090000, "title": "Cyber-Physical Systems", "type": "story", "url": "http://cyberphysicalsystems.org/", "text": "", "parent": null, "deleted": null, "dead": null, "descendants": 2.0, "id": 9715477, "ranking": null, "date": 1434300090000, "year": 2015}, {"by": "itsybitsycoder", "score": null, "time": 1435874497, "timestamp": 1435874497000, "title": "", "type": "comment", "url": "", "text": "&quot;A new way of understanding allergies&quot;? When I was growing up, my mother and father were constantly saying that kids who didn&#x27;t play in the dirt were the kids who got allergies and got sick all the time. They encouraged us to play with bugs, play in the mud, and run around the neighborhood getting into things that would cause a &#x27;concerned neighbor&#x27; to call CPS today. My grandparents on both sides had the same philosophy, and I don&#x27;t think they&#x27;re alone on this... pretty sure this was once considered common sense, before the super helicopter parenting + antibacterial everything trend caught on. I get that common sense isn&#x27;t science, and it&#x27;s great that someone is compiling the evidence, but that title just comes off as so arrogant. Somewhere out there, there&#x27;s a book called &quot;water is wet: a new way of understanding liquids&quot;.", "parent": 9819929.0, "deleted": null, "dead": null, "descendants": null, "id": 9822012, "ranking": null, "date": 1435874497000, "year": 2015}, {"by": "15155", "score": null, "time": 1435957425, "timestamp": 1435957425000, "title": "", "type": "comment", "url": "", "text": "How about stdlib-blessed async IO? Or even async&#x2F;await keywords (simple CPS transformation) a la C#?", "parent": 9827051.0, "deleted": null, "dead": null, "descendants": null, "id": 9827943, "ranking": null, "date": 1435957425000, "year": 2015}, {"by": "afarrell", "score": null, "time": 1436129178, "timestamp": 1436129178000, "title": "", "type": "comment", "url": "", "text": "This is a collective action problem. My own lack of fear will have no effect of the actions of CPS if they decide I am a negligent parent because other people could have been afraid to let their kid go camping.", "parent": 9833017.0, "deleted": null, "dead": null, "descendants": null, "id": 9834878, "ranking": null, "date": 1436129178000, "year": 2015}, {"by": "geek_slop", "score": null, "time": 1436369810, "timestamp": 1436369810000, "title": "", "type": "comment", "url": "", "text": "You guys crack me up. It was a facetious parenthetical comment that seems to have become the focal point. <i>I</i> run Tor, operate a legit hidden service, run an anonymous proxy on several of my machines, and use encryption all over the place. In no way whatsoever do I think Tor should be shut down. It has a purpose - but is being abused by criminals which is disappointing and potential detrimental to those that use if for a legitimate purpose.<p>As for LE, I mentioned in the article that I contacted them, as a courtesy, twice during the project.  The last time was a few days before the hidden services were shut down.  I let them know that I had a pedo honeypot running and was about to take it offline, giving them the opportunity to take over the VM or scrape the data gathered.<p>As for personal demons - we all have them and I won&#x27;t argue that I may have more than most - it&#x27;s all a part of life experiences. I&#x27;ve dealt with LE and CPS on child abuse issues for years and it has certainly tainted my view.  Then again, I have a vantage point that most do not have - a much closer, clear view of the problem.", "parent": 9850367.0, "deleted": null, "dead": null, "descendants": null, "id": 9852250, "ranking": null, "date": 1436369810000, "year": 2015}, {"by": "jcr", "score": null, "time": 1437937253, "timestamp": 1437937253000, "title": "", "type": "comment", "url": "", "text": "And it&#x27;s a ridiculously huge umbrellla. ;)<p>Of the three parts mentioned (CPI, CPS and SafeStack), SafeStack had the\nleast performance impact, so it seems it was the easiest to get\ncommitted upstream [1]. The differential revision comments are also\ninteresting reading. [2] Though their CPS and CPI work exists (linked in\narticle), I&#x27;m not sure if or when it will be ready for prime time.<p>[1] <a href=\"https:&#x2F;&#x2F;github.com&#x2F;llvm-mirror&#x2F;llvm&#x2F;commit&#x2F;7ffec838a2b72e6841d9fb993b5fe6a45f3b2a90\" rel=\"nofollow\">https:&#x2F;&#x2F;github.com&#x2F;llvm-mirror&#x2F;llvm&#x2F;commit&#x2F;7ffec838a2b72e684...</a><p>[2] <a href=\"http:&#x2F;&#x2F;reviews.llvm.org&#x2F;D6094\" rel=\"nofollow\">http:&#x2F;&#x2F;reviews.llvm.org&#x2F;D6094</a>", "parent": 9951848.0, "deleted": null, "dead": null, "descendants": null, "id": 9951877, "ranking": null, "date": 1437937253000, "year": 2015}, {"by": "jsnell", "score": 13.0, "time": 1438012044, "timestamp": 1438012044000, "title": "CPS soup, continuation passing style without nested scopes", "type": "story", "url": "https://wingolog.org/archives/2015/07/27/cps-soup", "text": "", "parent": null, "deleted": null, "dead": null, "descendants": 0.0, "id": 9955849, "ranking": null, "date": 1438012044000, "year": 2015}, {"by": "PhantomGremlin", "score": null, "time": 1438296042, "timestamp": 1438296042000, "title": "", "type": "comment", "url": "", "text": "<i>My girls are 7 &amp; 9 and they&#x27;ve been using Microsoft Accounts.</i><p>Well, maybe Child Protective Services should be involved? They intervene when children walk home alone from the park, perhaps they&#x27;ll start to intervene when children are raised to use Microsoft products? <a href=\"http:&#x2F;&#x2F;www.usatoday.com&#x2F;story&#x2F;news&#x2F;nation&#x2F;2015&#x2F;04&#x2F;13&#x2F;parents-investigated-letting-children-walk-alone&#x2F;25700823&#x2F;\" rel=\"nofollow\">http:&#x2F;&#x2F;www.usatoday.com&#x2F;story&#x2F;news&#x2F;nation&#x2F;2015&#x2F;04&#x2F;13&#x2F;parents...</a><p>Just kidding, of course. But my daughters are now 14 and 17 and I don&#x27;t think they know how to use Microsoft products. We&#x27;ve been on OS X for about 10 years.<p>So maybe CPS should investigate me? Am I doing my kids a dis-service by not exposing them to the dominant OS?", "parent": 9976754.0, "deleted": null, "dead": null, "descendants": null, "id": 9978718, "ranking": null, "date": 1438296042000, "year": 2015}, {"by": "ocdtrekkie", "score": null, "time": 1438352552, "timestamp": 1438352552000, "title": "", "type": "comment", "url": "", "text": "This sounds amazingly close to the start of the CPS in the show Continuum.", "parent": 9980191.0, "deleted": null, "dead": null, "descendants": null, "id": 9981902, "ranking": null, "date": 1438352552000, "year": 2015}, {"by": "DanBC", "score": null, "time": 1438585494, "timestamp": 1438585494000, "title": "", "type": "comment", "url": "", "text": "You don&#x27;t recognise the survivor bias? You don&#x27;t think that leaving a six year old in charge of a four year old is irresponsible and dangerous?<p>Ideally the &quot;rule&quot; is a guideline, and is only ever used as part of a package of information to protect children (who are by definition vulnerable).<p>So &quot;left young children alone&quot; gets at most a friendly chat with some advice about home safety, while &quot;left children at home alone&quot; combined with &quot;arrested for drunk and disorderly&quot; and &quot;arrested for solicitation and drug possession&quot; gets a friendly chats combined with targetted drug and alcohol rehab.<p>It&#x27;s weird that CPS bother taken action in these cases. They&#x27;re so busy with other cases where the need is unambiguously there.", "parent": 9994035.0, "deleted": null, "dead": null, "descendants": null, "id": 9994209, "ranking": null, "date": 1438585494000, "year": 2015}, {"by": "pcwalton", "score": null, "time": 1438890050, "timestamp": 1438890050000, "title": "", "type": "comment", "url": "", "text": "Coroutines are preemptible at I&#x2F;O boundaries or manual synchronization points. Those synchronization points could be inserted by the compiler, but if you do that you&#x27;re back into goroutine land, which typically isn&#x27;t better than 1:1. In particular, it seems quite difficult to achieve scalability to millions of threads with &quot;true&quot; preemption, which requires either stacks or aggressive CPS transformation.", "parent": 10018344.0, "deleted": null, "dead": null, "descendants": null, "id": 10018864, "ranking": null, "date": 1438890050000, "year": 2015}, {"by": "norea-armozel", "score": null, "time": 1439502812, "timestamp": 1439502812000, "title": "", "type": "comment", "url": "", "text": "Well yes and no the system &#x27;wants&#x27; him to fail hard. Part of the problem isn&#x27;t as much as the false concern for the welfare of the children (and their primary guardian). Many CPS agencies will take a cut of the child support money so the bigger the monthly required support the bigger their cut. It&#x27;s really a racket onto itself. For example, my sister actually was getting child support from her first husband directly but CPS didn&#x27;t like that idea and fined her ex for evading child support. In the end, he started sending CPS the checks and my sister got much less money.<p>Gotta love Kansas. &#x2F;s", "parent": 10056420.0, "deleted": null, "dead": null, "descendants": null, "id": 10057445, "ranking": null, "date": 1439502812000, "year": 2015}, {"by": "jcrites", "score": null, "time": 1439529084, "timestamp": 1439529084000, "title": "", "type": "comment", "url": "", "text": "It&#x27;s fun to try to explain concepts, and a nice way to refresh memory, so let me take a shot.<p>Imagine a programming language where no function returns a value. Instead of returning a value, the function calls the callback and passes <i>what would have been the return value</i> as input. (JavaScript programmers should be familiar with this.)<p>If I had a regular program that calls a function and uses its return value, then can I transform that into an equivalent program that passes a callback? Consider an expression like print(f(x) + 2). Once f(x) returns a value, then the expression f(x)+2 can return a value, and so on. It&#x27;s the call stack.<p>What would it mean to rewrite this program so that f(x) did not return a value, and instead took a callback saying what to do next? One way to think about this is to imagine removing the function and leaving a &quot;hole&quot; in the expression and call stack:<p><pre><code>  print(___ + 2)\n</code></pre>\nWhat is the function that represents calling print(___ + 2) and substituting a value for ___? In a language with lambda functions, we can represent the expression with the hole in it as a lambda:<p><pre><code>  lambda n: print(n + 2)\n</code></pre>\nThe lambda function is a precise concept with a definite representation, as opposed to the vague idea of the blank.<p>Now imagine that we overload f(x) so that it also takes a callback. When f() has produced its value, it calls the callback with that value:<p><pre><code>  f(x, callback)\n</code></pre>\nNow I want to design a callback so that I can invoke f() in this way, with behavior that was equivalent to<p><pre><code>  print(f(x) + 2))\n</code></pre>\nThe question is, what callback can I pass to f() that will have the same overall result as print(f(x) + 2))?<p>The callback I should pass to f() is a piece of code representing what we should do next, <i>which is the lambda function we just wrote</i>! So expressing the call to f() with a callback will look like this:<p><pre><code>  f(x, lambda n: print(n + 2) )\n</code></pre>\nThis kind of callback where we pass an expression representing <i>what to do next</i> is called a continuation. Thus we say that the lambda function we described is the &quot;continuation&quot; from within f(x) given the expression print(f(x) + 2).<p>This <i>also</i> means that every time you&#x27;re implementing a procedure f(x), you take the callback as input and invoke it when you have your return value. So imagine that f(x) just increments its value and returns it. Then, the callback form might be:<p><pre><code>  def f(x, callback)\n      callback(x+1)\n</code></pre>\nThis style does not require a control operator quite like &#x27;return&#x27;, since invoking the callback explicitly has the same effect.<p>You can think of each point in the code as having a <i>continuation</i> which is what to do next immediately after it. Continuation passing style makes this continuation explicit, but you can always speak about the continuation for a given point in the code, in the sense that <i>you can work out what the function would be if you needed to pass it as a callback</i>. Language runtimes that support continuations are essentially figuring this out for you -- you can simply ask them &quot;give me the current continuation&quot;, and now you have what looks like a function to call to &quot;keep going&quot; from where you were before.<p>While it&#x27;s not common to write code in continuation passing style, the understanding that every point in a program&#x27;s execution has a &quot;continuation&quot; (callback that will be invoked with the return value) can allow for useful transformations or expressions of control flow. The insight behind continuation passing style is that regular and CPS styles are <i>equivalent</i>, in that you can transform one to the other automatically. In language runtimes that give you continuations, you can thus achieve the benefits of continuation passing style in limited contexts without writing the whole program that way.", "parent": 10058539.0, "deleted": null, "dead": null, "descendants": null, "id": 10058734, "ranking": null, "date": 1439529084000, "year": 2015}, {"by": "tel", "score": null, "time": 1441143165, "timestamp": 1441143165000, "title": "", "type": "comment", "url": "", "text": "Ever used CPS style? Instead of producing values and passing them back to callers you provide continuations to functions and then they never return, merely calling the continuation instead. It turns out that this can save a lot of stack space and it also turns out that you can convert any program into this style should you choose.<p>It might not be exactly clear why CPS is equivalent to &quot;direct&quot; style. The answer is the Yoneda Lemma.<p>Yoneda goes further. Normally you could maybe notate a CPS style function as follows<p><pre><code>    (a -&gt; *) -&gt; *\n</code></pre>\nwhere `a` is the type of the value the computation will pass to the continuation function (the first argument here) and * is a special type indicating &quot;will never return&quot;. We can generalize this slightly as<p><pre><code>    forall x . (a -&gt; x) -&gt; x\n</code></pre>\nwhich enables us to talk about CPS&#x27;d code in a slightly more general way by not stating exactly what the continuation does\u2014it produces some kind of value, which might be the &quot;will never return&quot; value, and the CPS&#x27;d function just needs to evaluate it because the forall is positioned such that it can&#x27;t know what `x` is. This gives more power to the user of CPS&#x27;d functions.<p>We can generalize it again by writing<p><pre><code>    forall x . (a -&gt; x) -&gt; F x\n</code></pre>\nwhich gives more power to the <i>implementer</i> of the CPS&#x27;d function by letting them return some kind of &quot;effect structure&quot; along with calling the handler. The effect structure is fixed ahead of time but lets us talk about<p><pre><code>    * calling the continuation multiple times\n    * returning failure via exceptions\n    * producing side effects\n    * producing default values when no `a` ever existed\n    * etc.\n</code></pre>\nAnd in this most general setting Yoneda still comforts us that this is just equivalent to the &quot;direct&quot; form<p><pre><code>    F a</code></pre>", "parent": 10154872.0, "deleted": null, "dead": null, "descendants": null, "id": 10155903, "ranking": null, "date": 1441143165000, "year": 2015}, {"by": "duaneb", "score": null, "time": 1441255462, "timestamp": 1441255462000, "title": "", "type": "comment", "url": "", "text": "Hah, hadn&#x27;t thought of that. Kind of CPS for processes. I&#x27;m not sure what that would gain you, though, as you&#x27;d have to either a) write both the cd and the user of the cd, and there are less awkward ways to do that than exec&#x27;ing, or b) you&#x27;d have to pass something ELSE to exec to return control after cd finishes.<p>This seems a little awkward and I&#x27;m not sure what is being proven. :P", "parent": 10163346.0, "deleted": null, "dead": null, "descendants": null, "id": 10163384, "ranking": null, "date": 1441255462000, "year": 2015}, {"by": "pdpi", "score": null, "time": 1441785888, "timestamp": 1441785888000, "title": "", "type": "comment", "url": "", "text": "Even if you don&#x27;t go the actor route, if you&#x27;re going to use continuation passing style as much as Node wants you to, having a language with better CPS support would be much nicer", "parent": 10189799.0, "deleted": null, "dead": null, "descendants": null, "id": 10190305, "ranking": null, "date": 1441785888000, "year": 2015}, {"by": "coolsunglasses", "score": null, "time": 1442101734, "timestamp": 1442101734000, "title": "", "type": "comment", "url": "", "text": "Don&#x27;t do something that generates thunks in a long-running loop which&#x27;ll hold references to them. (This applies to JS...virtually any language with GC and first-class functions as well). This is pretty easy to fix and identify once you know what you&#x27;re doing.<p>Don&#x27;t use String. Use Text for Text, ByteString for raw bytes.<p>Related to String: don&#x27;t use lists for large datasets unless you&#x27;re intentionally modeling and reasoning about your data as an infinite space. Use Vector if it&#x27;s finite, fits in memory, and you&#x27;re going to comprehend it all at once. Vector gives you cache-friendliness as well.<p>As a safe default: lazy in the spine, strict in the leaves.<p>Use streaming libraries (Pipes, Conduit) for processing large datasets. I did a test with a csv parsing library and compared the non-streaming (default) interface and the streaming interface provided by pipes-csv for summing columns in a ~6mb CSV.<p>No streaming used 30mb of heap.<p>Naive streaming used 10mb.<p>Pipes used 600kb.<p>monad-control and mtl (monad transformer libraries) are pretty fast and can be used without much (any?) worry in 99.999% of circumstances.<p>Use attoparsec and be mindful of backtracking anytime you&#x27;re doing perf sensitive parsing. If you hit a limit, you may need to use a parser generator but this is almost never the case. If you need to parse something huge...use a streaming parser.<p>Sometimes CPS transformation can be a huge boon. Read what Bryan O&#x27;Sullivan was written about this for the parsing side of it. Kmett has good examples of CPS transformation for performance in his libraries as well.<p>Use async.<p>Default to using TVars (STM containers) for correctness until you know what specific properties you need. If you get perf sensitive but still want transactions, turn the scope of your transactions into cells of a data structure. Cf. <a href=\"http:&#x2F;&#x2F;hackage.haskell.org&#x2F;package&#x2F;stm-containers\" rel=\"nofollow\">http:&#x2F;&#x2F;hackage.haskell.org&#x2F;package&#x2F;stm-containers</a> when you have composable concurrency abstractions, it can become just yet another data structures problem.<p>If you&#x27;re writing a (very) hot loop, you&#x27;ll probably end up looking to avoid boxing (just like Java) and touching the heap (just like Java, C, C++). Don Stewart has written good, thorough examples of this.<p>Resources:<p>Anything Don Stewart has ever written<p>Kmett&#x27;s libraries and blog<p>Bryan O&#x27;Sullivan&#x27;s libraries (particularly attoparsec and aeson) and blog<p>Johan Tibell is the strictness perf honcho. Check his libraries for ideas if you&#x27;re making something strict. Don Stewart has written along these lines too.<p><a href=\"http:&#x2F;&#x2F;book.realworldhaskell.org&#x2F;\" rel=\"nofollow\">http:&#x2F;&#x2F;book.realworldhaskell.org&#x2F;</a> is out of date but the stuff on perf and debugging are some of the best in the book.<p>My own book <a href=\"http:&#x2F;&#x2F;haskellbook.com&#x2F;\" rel=\"nofollow\">http:&#x2F;&#x2F;haskellbook.com&#x2F;</a> will explain how to reason about performance and laziness, though it&#x27;s primarily a practical beginner&#x27;s book. Focus WRT perf will be more on understanding the foundations, how things evaluate, how the runtime works so you can absorb all the other information as easily as possible.<p>Koalafications:<p>Every backend I work on in ad tech, including the public facing adserver, is written in Haskell. Our adserver latencies range 12-17ms with some pretty gentle 99th percentiles. The average DSP we talk to has response times in the low hundreds (100-400).", "parent": 10209750.0, "deleted": null, "dead": null, "descendants": null, "id": 10209798, "ranking": null, "date": 1442101734000, "year": 2015}, {"by": "jldugger", "score": null, "time": 1442216296, "timestamp": 1442216296000, "title": "", "type": "comment", "url": "", "text": "&gt; So instead of indicating a level of inequality in pay for doing the same job, the data might indicate a level of sexism in the type of jobs people have (or number of hours worked, or number of years people are in the profession, etc). That still demonstrates there&#x27;s a significant problem.<p>The graph alone doesn&#x27;t tell us a whole lot, other than women are almost always compensated less than men. There seems to be quite a bit of variation across job functions, which might be unexpected. Understanding why that variation exists might be useful in addressing the perceived problem, and avoiding corporate policies that accidentally make things worse.<p>For example, if the bulk of pay gap is years of experience, it would be foolhardy to increase starting salary for women; you&#x27;d be giving equally qualified men a competitive advantage in hiring they don&#x27;t need. Similarly, the situation could be understated -- if I&#x27;m reading the methodology correctly, CPS data doesn&#x27;t include independent contractors, since they buy health insurance separately, I expect a number of men forgo insurance entirely and pocket the difference, a gamble few women of child bearing age dare take. Corporate policy here could try to prohibit independent contractors, but that would substantially reverse the trend. Better, IMO, would be single payer health care, or at least an end to the tax subsidy we give employer paid health care.<p>More dimensions will give us a more nuanced view of reality, and a better grasp on the degree to which the gap is systemic vs personal.", "parent": 10213676.0, "deleted": null, "dead": null, "descendants": null, "id": 10213980, "ranking": null, "date": 1442216296000, "year": 2015}, {"by": "rayiner", "score": null, "time": 1442443379, "timestamp": 1442443379000, "title": "", "type": "comment", "url": "", "text": "When I was in HS, I did Bot Ball. Our robot was powered by a HandyBoard, which definitely looks like a bomb: <a href=\"https:&#x2F;&#x2F;en.m.wikipedia.org&#x2F;wiki&#x2F;File:HandyBoard_GJP.jpg\" rel=\"nofollow\">https:&#x2F;&#x2F;en.m.wikipedia.org&#x2F;wiki&#x2F;File:HandyBoard_GJP.jpg</a>. Remember going through the airport with it on the way to finals, joking around about how it looked like a bomb. Didn&#x27;t get in any trouble despite being brown. And it wasn&#x27;t just us--thousands of kids did school projects with the HandyBoard over the years. It was very popular.<p>I&#x27;m tempted to believe that people are just dumber than they were when I was a kid, but the truth is that this sort of thing is a freak accident. A hundred kids bring something like this into school and it&#x27;s virtually guaranteed that one will eventually hit school administrators that are low on the bell curve.<p>Also, I&#x27;m seeing a lot of &quot;Texas&quot; in comments to this story. It&#x27;s really unfair. I&#x27;m here in the DC metro surrounded by highly educated latte liberals, and they&#x27;re some of the most paranoid parents in the country. Don&#x27;t think for a second this wouldn&#x27;t happen in, e.g., Silver Spring (where those parents got CPS called on them for letting their kids walk home from school).", "parent": 10230036.0, "deleted": null, "dead": null, "descendants": null, "id": 10230487, "ranking": null, "date": 1442443379000, "year": 2015}, {"by": "saosebastiao", "score": null, "time": 1443819130, "timestamp": 1443819130000, "title": "", "type": "comment", "url": "", "text": "I would love to be able to do this with my 3yo son...but there are two things stopping me: Cars and helicopter parent culture.<p>Cars, and the entitled culture we have fostered around them, make streets hostile to pedestrians and likely fatal to small children, even if children followed the laws and common sense. I experience it practically daily. Every time I cross the street at a marked intersection, cars will stop for me 9&#x2F;10 times. At unmarked intersections, its more like 5&#x2F;10. Crossing at a stoplight with a walk signal on is still precarious because of the tendency of many drivers to blow through crosswalks without stopping so they can turn right on red. <i>Every single day</i> I experience a situation that could be fatal to a less visible child with a more fragile body and slightly worse situational awareness. No way.<p>The second problem is the CPS story. My neighborhood is extremely safe, but the parents here are borderline psychotic about helicoptering their way through their children&#x27;s lives. Every time I take my kid to a playground, I end up witnessing helicopter parents freaking out about how my kid will climb a ladder by himself or jump off of a piece of equipment by himself... sometimes they swoop in to &quot;parent&quot; for me...and other times they will chew me out for being so irresponsible as to let my kid learn his own boundaries. As much as I respect the mission of CPS, I&#x27;ve heard enough horror stories about their enforcement of parenting methodology that I wouldn&#x27;t ever risk having them called because my kid walked to the park by himself.<p>It&#x27;s a shame.", "parent": 10320944.0, "deleted": null, "dead": null, "descendants": null, "id": 10321245, "ranking": null, "date": 1443819130000, "year": 2015}, {"by": "bcoates", "score": null, "time": 1443821040, "timestamp": 1443821040000, "title": "", "type": "comment", "url": "", "text": "You were doing so well until you brought up the CPS boogeyman, which is as much a part of the baseless fear culture you&#x27;re deriding as anything else.<p>Getting in trouble with CPS over letting your kid be independent is as unlikely as any of the other horror stories the media (and your friend&#x27;s cousin&#x27;s hairdresser) pushes about childhood. CPS employees are stretched thin on full-blown abandonment and horrifying abuse cases, and don&#x27;t care if some kid walks down the street alone.", "parent": 10321255.0, "deleted": null, "dead": null, "descendants": null, "id": 10321438, "ranking": null, "date": 1443821040000, "year": 2015}, {"by": "Nadya", "score": null, "time": 1443822209, "timestamp": 1443822209000, "title": "", "type": "comment", "url": "", "text": "The CPS boogeyman was hyperbole, yes. Few freerange parents get charged with anything, but a few do still have to deal with investigations or charges by local police. Is it isolated? Yes. But it happens. Even if police don&#x27;t get involved, you get flak&#x2F;judgement from neighbors and nosy busy bodies butting into your business and trying to parent your kid(s). That happens a <i>lot</i> more and is something most any free range parent in a suburb knows the feeling of.<p>The fear is there and my father had plenty of issues with busy body neighbors and the police being called because of an &quot;unattended child&quot; (me). The shit happens and my own mother is one of the judgmental busy bodies herself; looking down on her neighbor for letting their 11 year old child to play jump rope with her friend in the front yard of their house. Has my mother called CPS on the neighbor? No. But she treats them like shit and refuses to let my sisters&#x27; visit their house in fear they&#x27;ll do something &quot;unattended&quot;.<p>Yes - those two examples were very personal anecdotes. But it&#x27;s not like I&#x27;m the only person to ever deal with this stuff. A great thing about the internet is you get to meet countless other people who have the same issues you have:<p><a href=\"http:&#x2F;&#x2F;www.freerangekids.com&#x2F;why-do-i-keep-scaring-people-with-stories-of-good-parents-hounded-by-the-authorities&#x2F;\" rel=\"nofollow\">http:&#x2F;&#x2F;www.freerangekids.com&#x2F;why-do-i-keep-scaring-people-wi...</a><p>If the US didn&#x27;t have a culture of fear and nosy busy-bodies butting into other peoples&#x27; business at every turn, this wouldn&#x27;t even be a discussion and &quot;free range parenting&quot; wouldn&#x27;t even be a term. It would be called &quot;parenting&quot;. Like how it is in the UK, Japan, and many other countries.", "parent": 10321438.0, "deleted": null, "dead": null, "descendants": null, "id": 10321529, "ranking": null, "date": 1443822209000, "year": 2015}, {"by": "bsder", "score": null, "time": 1443825718, "timestamp": 1443825718000, "title": "", "type": "comment", "url": "", "text": "&gt; assaults on children&#x2F;young people are a problem, and parents worry.<p>Statistically, they are a very low problem if we disregard assaults by family members.  It may be that, in the US, CPS may be more of a hazard than strangers at this point.<p>The fact that the US is pedestrian-hostile is more problematic.<p>For any given segment of a trip in Japan, there are probably other adult pedestrians walking that segment as well.  If a child simply &quot;falls in&quot; with a group going the right way for several small segments sequentially, they will have the right behavior.<p>In the US, there are very likely <i>not</i> fellow pedestrians for children to emulate except in the very biggest cities.", "parent": 10321219.0, "deleted": null, "dead": null, "descendants": null, "id": 10321762, "ranking": null, "date": 1443825718000, "year": 2015}, {"by": "Cadsby", "score": null, "time": 1443832048, "timestamp": 1443832048000, "title": "", "type": "comment", "url": "", "text": "Native New Yorker here. Growing up in the 80&#x27;s and 90&#x27;s (when crime was at it&#x27;s peak), it was common among everyone I grew up with to ride the subway&#x2F;bus alone and generally explore the neighborhood alone&#x2F;with friends. I remember my mother being slightly apprehensive when I started commuting to school alone in 4th grade, but it wasn&#x27;t a major issue.<p>As many have pointed out, the culture has simply changed. Crime is way down, but ironically people are more afraid to let their children travel unsupervised than when I was a kid.<p>As a side note, I did get lost on the train once (while in the care of a relative. She got off the train and forgot to take me with her.) I was asleep and woke up at a stop I didn&#x27;t recognize. While I remember being a little apprehensive, I simply walked over to the woman in the token booth, explained I was lost and had gotten separated from my aunt. She let me inside the booth and called my mom, who came and picked me up. All in all, it wasn&#x27;t a huge affair. I think if that happened today police and CPS will probably turn it into a major incident of possible child neglect.", "parent": 10321165.0, "deleted": null, "dead": null, "descendants": null, "id": 10322100, "ranking": null, "date": 1443832048000, "year": 2015}, {"by": "peteretep", "score": null, "time": 1444461498, "timestamp": 1444461498000, "title": "", "type": "comment", "url": "", "text": "Can you give examples of people who were arrested for no -criminal behaviour? I&#x27;d thought they were just arresting people who&#x27;d been pictures commuting crimes?<p>Also: why is being arrested such a big deal? You&#x27;ll get mugshotted, swabbed, but unless CPS charge you (for which they need to believe they have a reasonable chance of a conviction), it&#x27;s not going to show up in a background check.", "parent": 10364656.0, "deleted": null, "dead": null, "descendants": null, "id": 10364792, "ranking": null, "date": 1444461498000, "year": 2015}, {"by": "rdtsc", "score": null, "time": 1444524752, "timestamp": 1444524752000, "title": "", "type": "comment", "url": "", "text": "&gt;  is flirting with a visit from child protective services.<p>No doubt. Co-worker let kids (probably 5-6 years old), play outside, in a cul-de-sac. While they were inside watching. Sure enough, anonymous neighbor called cops. CPS and cops got involved. Embarasing calls at work,  monitoring from CPS (regular visits to &quot;check&quot; on them for a period of time), headaches, lost time.<p>Heck, the neighbor might have just not liked the color of their lawn and they knew that calling CPS and cops about kids will ensure maximum punishment for minimum risk to them (&quot;Hey, I was just thinking about the safety of the children&quot;).<p>Once those in power act irrationally about anything. That will always be exploited. It was exploited many years ago in the Soviet Union. Neighbors would have spats about goats eating grass on the wrong side of the fence. Then one of them would denounce the others as &quot;enemies of the people&quot; and bam! family sent to Siberia in no time.", "parent": 10367334.0, "deleted": null, "dead": null, "descendants": null, "id": 10367584, "ranking": null, "date": 1444524752000, "year": 2015}, {"by": "pugtor", "score": null, "time": 1445350814, "timestamp": 1445350814000, "title": "", "type": "comment", "url": "", "text": "IdentTrust is governed by their CP and CPS documents, which specify the criteria for delegating authority.", "parent": 10419232.0, "deleted": null, "dead": null, "descendants": null, "id": 10419285, "ranking": null, "date": 1445350814000, "year": 2015}, {"by": "tikhonj", "score": null, "time": 1445504062, "timestamp": 1445504062000, "title": "", "type": "comment", "url": "", "text": "I am not ignoring any of that. Nothing says that you can&#x27;t work with non-constructive logic in a programming language, or analyze non-constructive logics <i>as</i> programming languages. In fact that can be extremely useful although it&#x27;s also, at present, difficult and not super common.<p>The things you listed are extremely close to one of the foundational fields of CS, namely programming language theory. It&#x27;s funny that you should bring up the law of the excluded middle because I learned <i>a lot</i> about it by studying PL theory: did you know that adding callCC to your typed lambda calculus turns it from a constructive logic system to a classical one? And that double negation translation is just a CPS transform which, at least for me, is a heck of a lot easier to reason about than proof theory directly?<p>Everything in math is, at least in theory, provable. Provable in a discrete system (ie a formal logic) even if it&#x27;s reasoning <i>about</i> something that isn&#x27;t discrete. So there&#x27;s nothing fundamental stopping us from doing exactly the same proofs in a formal system that a <i>computer</i> can understand. Oh, say, a programming language.<p>Of course, with current technology, it&#x27;s difficult from a practical standpoint, but there&#x27;s nothing fundamental stopping us. And ideally it&#x27;s something we <i>should</i> do to ward off errors and also to create proof artifacts that can be analyzed and manipulated systematically.<p>Wouldn&#x27;t static analysis for mathematical proofs be great? Or papers written as libraries so that relying on a lemma literally links against the proof it was first defined in.<p>Seriously, if you dive into PL theory you&#x27;ll see that the line separating CS from math doesn&#x27;t really exist except as a social and technological phenomenon. (Lots of things are fundamentally possible but too difficult to do in reality, at least right now.)", "parent": 10430741.0, "deleted": null, "dead": null, "descendants": null, "id": 10431132, "ranking": null, "date": 1445504062000, "year": 2015}, {"by": "philwelch", "score": null, "time": 1445623389, "timestamp": 1445623389000, "title": "", "type": "comment", "url": "", "text": "I&#x27;m perfectly comfortable with the idea of CPS taking children away from anti-vax parents, and unvaccinated adults who refuse vaccination being forcibly quarantined.", "parent": 10440154.0, "deleted": null, "dead": null, "descendants": null, "id": 10440233, "ranking": null, "date": 1445623389000, "year": 2015}, {"by": "tel", "score": null, "time": 1448025599, "timestamp": 1448025599000, "title": "", "type": "comment", "url": "", "text": "It&#x27;s not really map+reduce.<p>Transducers arise out of realizing that transformations between (possibly infinite) lists can be encoded as a &quot;reducer transformations&quot;, &quot;transducers&quot;. When you work in this encoding you automatically get lazy transformation (since everything goes through a function call) and the avoidance of intermediate data structures (since everything goes through a function call!).<p>Moreover, there&#x27;s a neat property of this encoding, a CPS encoding, which is that function composition still &quot;works&quot;, it just works &quot;backwards&quot;.", "parent": 10600627.0, "deleted": null, "dead": null, "descendants": null, "id": 10601010, "ranking": null, "date": 1448025599000, "year": 2015}, {"by": "kenko", "score": null, "time": 1449363997, "timestamp": 1449363997000, "title": "", "type": "comment", "url": "", "text": "Nothing about CPS ensures asynchrony.", "parent": 10683814.0, "deleted": null, "dead": null, "descendants": null, "id": 10683948, "ranking": null, "date": 1449363997000, "year": 2015}, {"by": "tikhonj", "score": null, "time": 1450118558, "timestamp": 1450118558000, "title": "", "type": "comment", "url": "", "text": "Return statements and &quot;early exit&quot; are not built into functional languages. If the language, like Scheme, supports continuations, we can use callCC to implement an early return[1]:<p><pre><code>    (define (example x)\n      (call&#x2F;cc (lambda (return)\n        (when (&lt; x 0) (return #f))\n        ; more code, including possible more calls to return\n        0)))\n</code></pre>\nHowever, most functional languages do not have callCC built in. Happily we can get a similar effect by writing our code in continuation-passing style (CPS)[2]. (Think Node.js.)<p>Nominally, CPS has some overhead because of the extra function calls involved. However, a CPS transform also puts every call in <i>tail position</i>, making them eligible for tail call elimination. This means that we can use CPS with no function call overhead in a language with proper tail calls.<p>What does this mean in practice? It means that calling a callback in CPS style\u2014which, being in tail position, can be eliminated\u2014is effectively <i>just</i> a jump under the hood. Not too different from return!<p>Putting it all together, we get that tail call elimination lets us write code in continuation passing style with no extra over head which gives us access to continuations that we can use to implement an early return in languages <i>without</i> return.<p>This turns out to <i>not</i> be what the article was on about, but I think it&#x27;s more interesting.<p>[1]: Code from a StackOverflow answer by Nathan Shively-Sanders which goes into more detail: <a href=\"http:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;2434294&#x2F;scheme-early-short-circuit-return\" rel=\"nofollow\">http:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;2434294&#x2F;scheme-early-shor...</a><p>[2]: I wrote a brief explanation of CPS on Quora: <a href=\"https:&#x2F;&#x2F;www.quora.com&#x2F;What-is-continuation-passing-style-in-functional-programming&#x2F;answer&#x2F;Tikhon-Jelvis?share=1\" rel=\"nofollow\">https:&#x2F;&#x2F;www.quora.com&#x2F;What-is-continuation-passing-style-in-...</a>", "parent": 10730839.0, "deleted": null, "dead": null, "descendants": null, "id": 10732896, "ranking": null, "date": 1450118558000, "year": 2015}, {"by": "ridiculous_fish", "score": null, "time": 1450124560, "timestamp": 1450124560000, "title": "", "type": "comment", "url": "", "text": "Is it possible to use CPS with functional primitives like map? Or do you have to implement CPS-savvy replacements? It doesn&#x27;t seem like a CPS transform would let you early-exit from map in tail position.", "parent": 10732896.0, "deleted": null, "dead": null, "descendants": null, "id": 10733537, "ranking": null, "date": 1450124560000, "year": 2015}, {"by": "tikhonj", "score": null, "time": 1450125776, "timestamp": 1450125776000, "title": "", "type": "comment", "url": "", "text": "Right, you&#x27;d need a CPS version of map. Luckily map isn&#x27;t really a &quot;primitive&quot;, it&#x27;s just a library function, so using a different version of map is not a big deal.<p>One way to think about it is that languages with callCC built in are just transformed to CPS by the compiler before being run, which includes transforming the definition of map. (In fact, this is a reasonable strategy for compiling Scheme, I believe.)<p>It&#x27;s pretty easy in Haskell which wraps CPS into a monad (Cont) because you use mapM from the Control.Monad library instead of having to write a specifically CPSed version of the function.", "parent": 10733537.0, "deleted": null, "dead": null, "descendants": null, "id": 10733689, "ranking": null, "date": 1450125776000, "year": 2015}, {"by": "PeCaN", "score": null, "time": 1450985409, "timestamp": 1450985409000, "title": "", "type": "comment", "url": "", "text": "Just transform it to continuation-passing style[1] and call&#x2F;cc is no problem (neither are non-local exits). Granted your compiled code will be somewhat large and not much like &#x27;regular&#x27; code in the language. That can be solved by doing selective CPS transform (IcedCoffeeScript[2] does this), but that gets slightly less straightforward.<p>Compiling continuations to a dynamic language is actually really easy.<p>--<p>1: <a href=\"https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Continuation-passing_style\" rel=\"nofollow\">https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Continuation-passing_style</a><p>2: <a href=\"http:&#x2F;&#x2F;maxtaco.github.io&#x2F;coffee-script&#x2F;\" rel=\"nofollow\">http:&#x2F;&#x2F;maxtaco.github.io&#x2F;coffee-script&#x2F;</a>", "parent": 10789297.0, "deleted": null, "dead": null, "descendants": null, "id": 10789323, "ranking": null, "date": 1450985409000, "year": 2015}, {"by": "truncate", "score": null, "time": 1450995152, "timestamp": 1450995152000, "title": "", "type": "comment", "url": "", "text": "I&#x27;m interested to know more about IcdeCoffeeScript approach. Any blogs&#x2F;articles that you know of?<p>Typically direct CPS conversion are straightforward, but the performance suffers a lot. I&#x27;m looking for languages that are using some hybrid approaches.", "parent": 10789323.0, "deleted": null, "dead": null, "descendants": null, "id": 10789729, "ranking": null, "date": 1450995152000, "year": 2015}, {"by": "wtbob", "score": null, "time": 1450996323, "timestamp": 1450996323000, "title": "", "type": "comment", "url": "", "text": "&gt; Just transform it to continuation-passing style and call&#x2F;cc is no problem (neither are non-local exits). Granted your compiled code will be somewhat large<p>I&#x27;m well aware, but CPS code can be _insanely_ large (essentially a function declaration for every line of code in the original source).  That&#x27;s quite painful.", "parent": 10789323.0, "deleted": null, "dead": null, "descendants": null, "id": 10789776, "ranking": null, "date": 1450996323000, "year": 2015}, {"by": "s73v3r", "score": null, "time": 1451093368, "timestamp": 1451093368000, "title": "", "type": "comment", "url": "", "text": "Anyone who claims that not having the most stressful, rigorous environment around for children is going to lead to a &quot;dumbing down&quot; needs to take a serious look at themselves, and what they want to subject their children to. Maybe CPS should take a look as well.", "parent": 10791938.0, "deleted": null, "dead": null, "descendants": null, "id": 10792920, "ranking": null, "date": 1451093368000, "year": 2015}, {"by": "asanwal", "score": null, "time": 1451094133, "timestamp": 1451094133000, "title": "", "type": "comment", "url": "", "text": "CPS = child protective services?<p>If yes, why?<p>Pushing your kids to achieve and holding them to high expectations is a good thing. It&#x27;s not child abuse assuming that&#x27;s what you meant by CPS.<p>If some kids can&#x27;t hang, that&#x27;s life. We don&#x27;t need to regulate that away.<p>I realize that hard work and grit and the grind are out of favor today but making schools less rigorous is foolish.<p>Disclaimer: son of immigrants", "parent": 10792920.0, "deleted": null, "dead": null, "descendants": null, "id": 10792941, "ranking": null, "date": 1451094133000, "year": 2015}, {"by": "douche", "score": null, "time": 1451094502, "timestamp": 1451094502000, "title": "", "type": "comment", "url": "", "text": "Let&#x27;s see...<p>1.) You need a shit-load of people to play baseball anything like for-real.  At minimum 15-20 people for two teams.  Pretty tough to do as a kid, unless you&#x27;re free to roam free all over town to gather a crew, which approximately 0% of kids have license&#x2F;protection from CPS to do.<p>2.)  You need a big enough area for a baseball diamond, where you don&#x27;t have to worry about knocking out a window with a foul ball or an errant throw.  Mostly, you aren&#x27;t allowed to use the actual baseball fields to just play pickup.  Compare with soccer or football, where any old open area is good enough, or basketball, which needs a hoop but probably takes the least space.<p>3.) Everybody needs at least a baseball glove.  You also need a bat and a ball or two.  Compare with sports that really don&#x27;t require any specialized equipment, like soccer, football(two-hand-touch or recess-tackle style), and basketball.<p>4.) If you live in the northern half of the US, the season for playing baseball is almost exclusively during the summer months, when school isn&#x27;t in session.<p>5.) Baseball on TV is maybe a half-step better than watching paint dry, and you have to pay for the privilege.  Since they cleaned up the steroids, it&#x27;s boring as hell.", "parent": 10792243.0, "deleted": null, "dead": null, "descendants": null, "id": 10792950, "ranking": null, "date": 1451094502000, "year": 2015}, {"by": "matthewtoast", "score": null, "time": 1451219784, "timestamp": 1451219784000, "title": "", "type": "comment", "url": "", "text": "Runiq is my attempt to tie together a few ideas from Lisp with some features of JavaScript inside an interpreted language. Syntax, flexibility, data-as-code DNA would come from Lisp, while a JS backing could give reach and a big module ecosystem.<p>Runiq more or less does this translation:<p><pre><code>    source: (hack (the) (planet!))\n    ast: [&quot;hack&quot;, [&quot;the&quot;], [&quot;planet!&quot;]]\n    reduce order: &quot;the&quot; &quot;planet!&quot; -&gt; &quot;hack&quot;\n</code></pre>\nFunction tokens map to predefined CPS JavaScript functions:<p><pre><code>    &quot;hack&quot;: function(a,b,cb){...}, &#x2F;&#x2F; add numbers\n    &quot;the&quot;: function(cb){...}, &#x2F;&#x2F; return 1\n    &quot;planet!&quot;: function(cb){...}, &#x2F;&#x2F; return 2\n</code></pre>\nOutputs produce new trees that eventually reduce to a value.<p><pre><code>    -&gt; [&quot;hack&quot;, [&quot;the&quot;], [&quot;planet!&quot;]]\n    -&gt; [&quot;hack&quot;, 1, 2]\n    -&gt; [3]\n    -&gt; 3\n</code></pre>\nRuniq is very much an experiment, and some design decisions I made have trade-offs (speed, for one). But Runiq could still find a niche somewhere between grown-up projects like Clojure(Script) and single-purpose languages like PuzzleScript, both of which I admire.", "parent": 10797249.0, "deleted": null, "dead": null, "descendants": null, "id": 10797261, "ranking": null, "date": 1451219784000, "year": 2015}, {"by": "prestonbriggs", "score": null, "time": 1452484982, "timestamp": 1452484982000, "title": "", "type": "comment", "url": "", "text": "I&#x27;ve always liked Beta&#x27;s approach to assignment, calls, and returns (whilst disliking most of the rest of its syntax, sigh).<p>Assignments work left to right, approximately like this:<p><pre><code>    (x, y) =&gt; (y, x)\n</code></pre>\nwhich swaps x and y.<p>Calls that return multiple values look like<p><pre><code>    x =&gt; sincos =&gt; (sinx, siny)\n</code></pre>\nand we can string together all sorts of things like this<p><pre><code>    x =&gt; sincos =&gt; sum =&gt; y\n</code></pre>\nProcedures looked something like<p><pre><code>    sincos(double x) {\n      ...\n    } returns (sinval, cosval)\n</code></pre>\nAll this syntax is pretty approximate, but perhaps you&#x27;ll get the idea. To me, it seemed attractive in that a tuple of values flowed in at the top of a procedure, then left to right on each line, and top to bottom between lines, and finally a tuple of values is returned. Seemed like a natural sugaring of CPS style.", "parent": 10873712.0, "deleted": null, "dead": null, "descendants": null, "id": 10878712, "ranking": null, "date": 1452484982000, "year": 2016}, {"by": "rdtsc", "score": null, "time": 1452543648, "timestamp": 1452543648000, "title": "", "type": "comment", "url": "", "text": "&gt; &quot;Stranger kidnappings&quot; (where someone the child doesn&#x27;t know kidnaps them) are incredibly rare, a child is at much more risk from traffic, guns, cancer, or swimming pools.<p>Agreed, I am a parent as well. But a word of warning, you&#x27;ll get mean looks and talk behind your back from playground parents if you take that attitude.<p>I&#x27;ve seen moms and dads on playground who are way out there in assessing what is threatening and what is not. They&#x27;d see a man walking by the playground going by their business and start calling their children closer to them acting all scared. Or make comments about &quot;hmm what are they doing, we haven&#x27;t seen this person before&quot;.  Mind you we were not in a crime ridden neighborhood, this is a quiet suburban area. Was going to say &quot;lay of the news people, take it easy&quot; but of course couldn&#x27;t they&#x27;d think I am crazy.<p>Oh and co-worker&#x27;s neighbor called CPS (child protective services) on them because they were playing by themselves in the cul-de-sac while the parents watched from inside the house. They of course don&#x27;t know who did it, and even if they knew there no repercussion they could take against that person. They can always claim &quot;they thought of the children&quot;, nobody can argue with that...", "parent": 10882846.0, "deleted": null, "dead": null, "descendants": null, "id": 10883143, "ranking": null, "date": 1452543648000, "year": 2016}, {"by": "unethical_ban", "score": null, "time": 1452549628, "timestamp": 1452549628000, "title": "", "type": "comment", "url": "", "text": "My parents let me play in the cul-de-sac all the time. It&#x27;s why we moved to one!<p>One time as an adult, I got a cop called because my music was too loud. The next day, I went to all my adjacent neighbors and said, without malice, &quot;If there are any issues, I&#x27;m receptive to being a good neighbor, let me know if I can help&quot;.<p>I would have done the same thing in the instance of CPS called on my kids. &quot;Hello, I watch my children and they know how to handle themselves on our home street. If you see a dangerous situation, let me know immediately and we&#x27;ll work to fix it.&quot;<p>Then, if they have any issue with that, we can have it out.", "parent": 10883143.0, "deleted": null, "dead": null, "descendants": null, "id": 10883921, "ranking": null, "date": 1452549628000, "year": 2016}, {"by": "VLM", "score": null, "time": 1453841022, "timestamp": 1453841022000, "title": "", "type": "comment", "url": "", "text": "Its a legal minefield because some parents are getting arrested for not supervising &quot;baby sitting age&quot; girls.<p>And with teen pregnancy you can end up in weird scenarios like a mom with her toddler legally requiring a grandparent, technically.<p>I&#x27;ve seen some writings that its a pretty effective weapon against people of the wrong demographic.  The same crazy cat lady who files HOA complaints for having the wrong species of daisy in the flowerbed will hover over the neighborhood&#x27;s jews or blacks or whatever she doesn&#x27;t like, until she sees a kid alone in the backyard long enough to snap a picture, then CPS is called in.  Its not that we don&#x27;t like section 8 people, or republicans, or whatever, its just that we don&#x27;t like unsupervised kids, you see.<p>I&#x27;ve also seen writings that in some municipalities this is the only way to handle barking dogs.", "parent": 10975523.0, "deleted": null, "dead": null, "descendants": null, "id": 10975901, "ranking": null, "date": 1453841022000, "year": 2016}, {"by": "thenomad", "score": null, "time": 1454854228, "timestamp": 1454854228000, "title": "", "type": "comment", "url": "", "text": "Your business in this case is the website. I&#x27;ve personally built affiliate-based infosites that yielded significant income off CPS (what you&#x27;re calling a one-off commission here) for 3+ years, and that&#x27;s nothing compared to the really successful examples of the genre - www.smartpassiveincome.com, for example, uses exactly this model and has generated $40k+ per month for a good half-decade or so.<p>It&#x27;s a fairly standard model for monetising a website - essentially the next stage up from monetising via an RTB platform like Adwords, in that you put a bit more work in choosing and testing appropriate offers, but (should) end up with higher CPMs as a result.<p>Also, revshare is entirely possible with a lot of affiliate deals, and even if it&#x27;s not offered &quot;out of the box&quot;, it&#x27;s possible to negotiate it if you want to. There are pros and cons to that approach - it&#x27;s definitely not a straightforward &quot;revshare is better&quot; equation.<p>If the OP has expertise with system administration and Minecraft hosting, plus the copywriting, customer support and sales ability, starting a <i>second</i> business in Minecraft hosting to monetise the site is also a valid potential option, but it&#x27;ll eat a lot more time that OP may not have, and has its own failure modes that just running a leadgen business doesn&#x27;t.", "parent": 11048974.0, "deleted": null, "dead": null, "descendants": null, "id": 11052872, "ranking": null, "date": 1454854228000, "year": 2016}, {"by": "Lawtonfogle", "score": null, "time": 1455562611, "timestamp": 1455562611000, "title": "", "type": "comment", "url": "", "text": "&gt;but they&#x27;re illegal residency surely shouldn&#x27;t be supported.<p>Then provide 0 medical services, CPS services, police services, or legal system services.  If you have someone here illegally, especially a child, being targeted by a predator, it sucks.  Really bad.  But to offer them any services paid for by the American people is supporting their illegal residency.<p>I find that most people who push for the view of not supporting legal residency in cases such as school care or even medical care are still willing to do so when you talk about the illegal resident being the target of a predator.  This makes me think that either they don&#x27;t fully accept their own logic or that there is something else at play that they didn&#x27;t expand upon.", "parent": 11104759.0, "deleted": null, "dead": null, "descendants": null, "id": 11105163, "ranking": null, "date": 1455562611000, "year": 2016}, {"by": "chadaustin", "score": null, "time": 1456116426, "timestamp": 1456116426000, "title": "", "type": "comment", "url": "", "text": "While I use ghcjs for one of my projects, have been a big user of Emscripten in the past, and recently switched from a CoffeeScript project to a TypeScript project at work, I understand what you&#x27;re saying, but I think it&#x27;s an overstatement.<p>Compiling to JavaScript is totally okay if the new language 1) adds something meaningful (like a type system [TypeScript, js_of_ocaml] or the ability to conveniently deal with unboxed data [LLJS, Emscripten]) and 2) does not have a significant runtime overhead.  GHCJS, in particular, adds a _huge_ amount of runtime overhead, largely because JavaScript doesn&#x27;t (yet) support tail calls so the CPS transform must be trampolined.  In addition, laziness doesn&#x27;t make a lot of sense for frontend code, which generally should be as tight as possible.  Also, look at the code produced by ScalaJS sometime and weep.  :D<p>js_of_ocaml, on the other hand, produces extremely tight code, and is very suitable for building web frontends.  Of course, OCaml probably has a similar learning curve as Haskell.  I can&#x27;t imagine people would get excited about the syntax.<p>TypeScript is a sweet spot: it&#x27;s got some value over straight up ES6, but it&#x27;s easy to integrate and has a very short learning curve.", "parent": 11147357.0, "deleted": null, "dead": null, "descendants": null, "id": 11148504, "ranking": null, "date": 1456116426000, "year": 2016}, {"by": "15155", "score": null, "time": 1456536617, "timestamp": 1456536617000, "title": "", "type": "comment", "url": "", "text": "&gt; largely because JavaScript doesn&#x27;t (yet) support tail calls so the CPS transform must be trampolined<p>I wonder if any research has been done here as to &quot;let the stack grow&quot; and THEN trampoline before it overflows.", "parent": 11148504.0, "deleted": null, "dead": null, "descendants": null, "id": 11185601, "ranking": null, "date": 1456536617000, "year": 2016}, {"by": "jsingleton", "score": 1.0, "time": 1457014326, "timestamp": 1457014326000, "title": "CPS to prosecute 'trolls' who use fake online profiles", "type": "story", "url": "http://www.bbc.co.uk/news/technology-35712772", "text": "", "parent": null, "deleted": null, "dead": null, "descendants": 0.0, "id": 11216890, "ranking": null, "date": 1457014326000, "year": 2016}, {"by": "monksy", "score": null, "time": 1457481618, "timestamp": 1457481618000, "title": "", "type": "comment", "url": "", "text": "&gt;- From what friends who still live there tell me, the crime has only been getting worse, even in nicer neighborhoods\n&gt;- Traffic is miserable and while there is decent public transit, it all goes to hell during a sports game (try taking the Red Line home during a Cubs game...I&#x27;d have to let five trains pass before I could squish myself into a car that was literally packed to the door)<p>Solution don&#x27;t live along the redline.<p>The services offered by some of the CPS schools far exceed what you&#x27;d get elsewhere.", "parent": 11249605.0, "deleted": null, "dead": null, "descendants": null, "id": 11249816, "ranking": null, "date": 1457481618000, "year": 2016}, {"by": "awgl", "score": null, "time": 1457500817, "timestamp": 1457500817000, "title": "", "type": "comment", "url": "", "text": "Hmm, meh, I feel like you can say a lot of pretty similar things about San Francisco and the Bay Area too. Let me defend Chicago with some counterpoints!<p>- Weather: Sure, SF Bay Area wins here in terms of what you might think of as regularly experienced weather, but it is not without its extremes. Let&#x27;s recall that most of California, including surrounding SF Bay Area, has been in an extreme drought for the past several years [1], threatening local agriculture and water supply. Also, SF is famous for extremely devastating earthquakes that happen every so often [2] (though, you may not categorize seismic activity as weather, but still a natural occurrence sort of thing).<p>- Government: SF has its fair share of recent government corruption [3, 4] as well as historical seediness&#x2F;lawlessness [5], not unlike some of Chicago&#x27;s history.<p>- Traffic: Personally, I think the Bay Area has worse traffic than Chicago. The data in this report [6] seems to agree, ranking SF&#x2F;Oakland as #3 worst in the country and San Jose as #5, whereas Chicago is #8 on the list. And, really, waiting on a few trains to pass for a sports game or special event is not unique to Chicago. Try taking the BART across the bay for a Giants game, Super Bowl 50, Bay to Breakers, Pride Parade, etc. I mean, every city&#x27;s transportation system hits its limit with big events&#x2F;gatherings. So what? It&#x27;s part of living in a city that you learn to accept.<p>- Wages: Can&#x27;t debate it. Chicago software engineers, making average of $76k&#x2F;yr [9], do get paid less than SF, at $110k&#x2F;yr [10]. But, also consider that income tax in Illinois is a flat 3.75% [11], whereas California&#x27;s income tax for that bracket is 9.3% [12]. 5.5% more tax in CA is not small. (Federal income tax will also be lower in Chicago with the lower salary, but I haven&#x27;t looked up those numbers.) And, let&#x27;s consider cost of living more in general. This handy website [13] says that &quot;A salary of $76,000 in Chicago, Illinois should increase to $178,313 in San Francisco, California&quot;, which is mainly due to housing being 428% more expensive in SF than in Chicago. That says a lot! You might interpret that as the $110k&#x2F;yr average salary in SF actually gets you <i>less</i> quality of living than the $76k&#x2F;yr in Chicago (according to this website). Or something like that. Don&#x27;t know, but my housing quality in SF is twice as much for half the space as compared to what I had in Chicago. (What am I doing here?!)<p>- Crime: According to this (presumably reputable) data [7, 8] Chicago has been steadily improving in terms of crime over the past more than a decade. SF has been kind of steady, and, according to that data, is actually <i>worse</i> per capita than Chicago. I didn&#x27;t expect that at first. Chicago is a much bigger city and than SF, so that kind of helps to dilute crime among the population, I suppose. Anyway, my anecdotal evidence from friends tell me that it is improving. We must have different kinds of Chicago friends. Or maybe we should trust data instead?<p>- Schools: SF public schools have a lottery system too [14]. I will grant, though, that CPS does have a lot of ongoing battles with the city and state for funding, like recent closings and strikes. That stuff sucks because it&#x27;s usually the poorest schools that suffer the most. Ultimately, this is a bigger societal problem than us engineers debating about where the best place for us to live is on a web forum. (Probability of existential crisis increasing...)<p>Okay. Got that off my chest. I love Chicago. I hope you and others do too still. I may move back soon. Writing this stuff down has, well, made me think twice about wtf I&#x27;m doing out here on the West Coast...<p>1. <a href=\"http:&#x2F;&#x2F;droughtmonitor.unl.edu&#x2F;Home&#x2F;StateDroughtMonitor.aspx?CA\" rel=\"nofollow\">http:&#x2F;&#x2F;droughtmonitor.unl.edu&#x2F;Home&#x2F;StateDroughtMonitor.aspx?...</a>\n2. <a href=\"https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;1989_Loma_Prieta_earthquake\" rel=\"nofollow\">https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;1989_Loma_Prieta_earthquake</a>\n3. <a href=\"http:&#x2F;&#x2F;ww2.kqed.org&#x2F;news&#x2F;2016&#x2F;01&#x2F;22&#x2F;3-former-fundraisers-for-mayor-ed-lee-indicted-on-bribery-money-laundering-charges\" rel=\"nofollow\">http:&#x2F;&#x2F;ww2.kqed.org&#x2F;news&#x2F;2016&#x2F;01&#x2F;22&#x2F;3-former-fundraisers-for...</a>\n4. <a href=\"http:&#x2F;&#x2F;www.sfgate.com&#x2F;crime&#x2F;article&#x2F;I-am-guilty-final-S-F-cop-sentenced-in-6279215.php\" rel=\"nofollow\">http:&#x2F;&#x2F;www.sfgate.com&#x2F;crime&#x2F;article&#x2F;I-am-guilty-final-S-F-co...</a>\n5. <a href=\"https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Barbary_Coast,_San_Francisco\" rel=\"nofollow\">https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Barbary_Coast,_San_Francisco</a>\n6. <a href=\"http:&#x2F;&#x2F;247wallst.com&#x2F;special-report&#x2F;2015&#x2F;08&#x2F;28&#x2F;10-cities-with-the-worst-traffic&#x2F;2&#x2F;\" rel=\"nofollow\">http:&#x2F;&#x2F;247wallst.com&#x2F;special-report&#x2F;2015&#x2F;08&#x2F;28&#x2F;10-cities-wit...</a>\n7. <a href=\"http:&#x2F;&#x2F;www.city-data.com&#x2F;crime&#x2F;crime-Chicago-Illinois.html\" rel=\"nofollow\">http:&#x2F;&#x2F;www.city-data.com&#x2F;crime&#x2F;crime-Chicago-Illinois.html</a>\n8. <a href=\"http:&#x2F;&#x2F;www.city-data.com&#x2F;crime&#x2F;crime-San-Francisco-California.html\" rel=\"nofollow\">http:&#x2F;&#x2F;www.city-data.com&#x2F;crime&#x2F;crime-San-Francisco-Californi...</a>\n9. <a href=\"https:&#x2F;&#x2F;www.glassdoor.com&#x2F;Salaries&#x2F;chicago-software-engineer-salary-SRCH_IL.0,7_IM167_KO8,25.htm\" rel=\"nofollow\">https:&#x2F;&#x2F;www.glassdoor.com&#x2F;Salaries&#x2F;chicago-software-engineer...</a>\n10. <a href=\"https:&#x2F;&#x2F;www.glassdoor.com&#x2F;Salaries&#x2F;san-francisco-software-engineer-salary-SRCH_IL.0,13_IM759_KO14,31.htm\" rel=\"nofollow\">https:&#x2F;&#x2F;www.glassdoor.com&#x2F;Salaries&#x2F;san-francisco-software-en...</a>\n11. <a href=\"http:&#x2F;&#x2F;www.bankrate.com&#x2F;finance&#x2F;taxes&#x2F;state-taxes-illinois.aspx\" rel=\"nofollow\">http:&#x2F;&#x2F;www.bankrate.com&#x2F;finance&#x2F;taxes&#x2F;state-taxes-illinois.a...</a>\n12. <a href=\"http:&#x2F;&#x2F;www.bankrate.com&#x2F;finance&#x2F;taxes&#x2F;state-taxes-california.aspx\" rel=\"nofollow\">http:&#x2F;&#x2F;www.bankrate.com&#x2F;finance&#x2F;taxes&#x2F;state-taxes-california...</a>\n13. <a href=\"http:&#x2F;&#x2F;www.bestplaces.net&#x2F;cost-of-living&#x2F;chicago-il&#x2F;san-francisco-ca&#x2F;76000\" rel=\"nofollow\">http:&#x2F;&#x2F;www.bestplaces.net&#x2F;cost-of-living&#x2F;chicago-il&#x2F;san-fran...</a>\n14. <a href=\"http:&#x2F;&#x2F;www.sfusd.edu&#x2F;en&#x2F;enroll-in-sfusd-schools&#x2F;how-to-apply-for-school&#x2F;application-process.html\" rel=\"nofollow\">http:&#x2F;&#x2F;www.sfusd.edu&#x2F;en&#x2F;enroll-in-sfusd-schools&#x2F;how-to-apply...</a>", "parent": 11249605.0, "deleted": null, "dead": null, "descendants": null, "id": 11251084, "ranking": null, "date": 1457500817000, "year": 2016}, {"by": "derefr", "score": null, "time": 1457905675, "timestamp": 1457905675000, "title": "", "type": "comment", "url": "", "text": "&gt; How I spend my funds<p>I think there was a misunderstanding here, perhaps? My hypothetical CPS financial-auditing branch wouldn&#x27;t care how parents spent <i>their own</i> Basic Income (or non-BI income.) It would only care how parents spent money that was given in the form of a check with the child&#x27;s name on the recipient field, because that child has the right to that money, as the child&#x27;s private property, just as much as they would an inheritance or a working income.<p>Do note that I&#x27;m not suggesting the &quot;CPS shows up at your house and sees whether you&#x27;re being a good parent&quot; schtick would apply to these cases; just that the bank statements on the child&#x27;s (legally-mandated separate) bank account would be looked at similarly to a tax return, to find something similar to tax fraud. (In fact, this is currently part of the IRS mandate, insofar as there is such a thing as &quot;dependent fraud&quot; where people claim others&#x27; dependents as their own, make up dependents, etc.)<p>What I&#x27;m saying is basically, you don&#x27;t want the world to get more draconian, but it already <i>is</i> this draconian. Part of the mandate of public-school teachers is to report if they think parents have been neglecting their children. The government fundamentally <i>does not trust</i> parents to have their children&#x27;s best interests at heart. From the state&#x27;s perspective, they have the base responsibility of raising&#x2F;taking care of children, and they <i>delegate</i> that responsibility to parents insofar as those parents manage to observably do a good job. When new laws are drafted, they&#x27;re drafted from this perspective.<p>That means that the government, where it can <i>more efficiently</i> ensure a child&#x27;s well-being by creating a core mechanism that happens regardless of parents&#x27; involvement (e.g. school lunch programs, in-school vaccinations, etc.) than by delegating that task to the parents, will always end up doing so.<p>You can say that that&#x27;s wrong, you can try to <i>change</i> that, but you can&#x27;t argue against a particular implementation of a law for having this property when this property is &quot;cultural&quot; to the technocratic-politburo nature of Congress, with its research-assistants and lobbyists and think-tanks.", "parent": 11279443.0, "deleted": null, "dead": null, "descendants": null, "id": 11279506, "ranking": null, "date": 1457905675000, "year": 2016}, {"by": "pfg", "score": null, "time": 1458747683, "timestamp": 1458747683000, "title": "", "type": "comment", "url": "", "text": "Sure, it&#x27;s a vulnerability in the sense that they didn&#x27;t want to allow WHOIS-based verification from their web frontend (for whatever reason. Maybe it wasn&#x27;t even a conscious decision and they just forgot to include it during some rewrite.)<p>It&#x27;s not a vulnerability in the sense that it&#x27;s not allowed in their CPS or by CA&#x2F;B.", "parent": 11345235.0, "deleted": null, "dead": null, "descendants": null, "id": 11345438, "ranking": null, "date": 1458747683000, "year": 2016}, {"by": "dschiptsov", "score": null, "time": 1459415126, "timestamp": 1459415126000, "title": "", "type": "comment", "url": "", "text": "Immutability as absense of over-writes or mutations of existing  values (in Erlang one just introduces a new binding for a new value) is obviously enough.<p>State and I&#x2F;O is easily incapsulable inside closures with CPS or with explicit message passing.<p>For a lazy language one needs some ADT, like Monad, for explicitly &quot;enforcing&quot; a strict order of evaluation for a specific set of expressions, because I&#x2F;O <i>implies</i> a strict order. Think of it as a transformation from a set to sequence (by <i>defining an order</i> as an ADT).<p>Lifting State or IO into Monadic world is mere a trick to satisfy a typechecker <i>and</i> enforce a strict order by using an ADT. A strict language with optional lazynes could use ordinary type-tags.<p>Nothing to see here.", "parent": 11388143.0, "deleted": null, "dead": null, "descendants": null, "id": 11395875, "ranking": null, "date": 1459415126000, "year": 2016}, {"by": "munificent", "score": null, "time": 1459618408, "timestamp": 1459618408000, "title": "", "type": "comment", "url": "", "text": "I wouldn&#x27;t describe SSA as &quot;a functional language&quot;. It was originally designed as an IR for imperative languages, not functional ones. (The functional folks prefer CPS, which really <i>is</i> a functional language.)<p>I think one could read too much into the &quot;single-assignment&quot; part of SSA. Sure, functional languages don&#x27;t tend to rebind variables either, but that&#x27;s really all SSA has in common with them.<p>I&#x27;m familiar with Appel&#x27;s &quot;SSA is a functional language&quot; article, but the vibe I got was more than he was trying to build some bridges between the SSA and CPS camps to try to get some cross-pollination going and knowldge sharing between them.<p>I think he could have just as easily called it &quot;CPS is an imperative language&quot;, but my hunch is the FP folks are more persnickety and wouldn&#x27;t have swallowed that as easily as imperative folks would accept the other title.", "parent": 11411638.0, "deleted": null, "dead": null, "descendants": null, "id": 11412371, "ranking": null, "date": 1459618408000, "year": 2016}, {"by": "barrkel", "score": null, "time": 1459979297, "timestamp": 1459979297000, "title": "", "type": "comment", "url": "", "text": "I first started using C# professionally in 2003, after starting out with the betas. I helped implement some key .NET support for the Delphi compiler when I worked at Borland.<p>I&#x27;m quite familiar with the evolution since then too. For example, back in 2006, I advocated implementing a CPS transformation to make better use of async code in .NET:<p><a href=\"http:&#x2F;&#x2F;blog.barrkel.com&#x2F;2006&#x2F;07&#x2F;fun-with-asynchronous-methods-and.html\" rel=\"nofollow\">http:&#x2F;&#x2F;blog.barrkel.com&#x2F;2006&#x2F;07&#x2F;fun-with-asynchronous-method...</a><p>It only took 7 years for async methods to come out, but they&#x27;re there now; and I understand their utility in no small part because I was one of the people asking for them.", "parent": 11400473.0, "deleted": null, "dead": null, "descendants": null, "id": 11442424, "ranking": null, "date": 1459979297000, "year": 2016}, {"by": "DanBC", "score": null, "time": 1461346460, "timestamp": 1461346460000, "title": "", "type": "comment", "url": "", "text": "&gt; like the man who argued with a Muslim woman and posted about it on Twitter) can get you arrested.<p>The important part is &quot;argued with a Muslim woman&quot; - in real life, AFK. Not &quot;then posted about it on Twitter&quot;.<p>But the CPS were very clear that the police should not have arrested him, and that they definitely should not have charged him, and that the CPS would not prosecute.", "parent": 11549539.0, "deleted": null, "dead": null, "descendants": null, "id": 11550866, "ranking": null, "date": 1461346460000, "year": 2016}, {"by": "M2Ys4U", "score": null, "time": 1461347968, "timestamp": 1461347968000, "title": "", "type": "comment", "url": "", "text": "&gt;But the CPS were very clear that the police should not have arrested him, and that they definitely should not have charged him, and that the CPS would not prosecute.<p>The police didn&#x27;t have the authority to charge him - they needed the permission of the Attorney General first and they didn&#x27;t bother to get it.", "parent": 11550866.0, "deleted": null, "dead": null, "descendants": null, "id": 11551091, "ranking": null, "date": 1461347968000, "year": 2016}, {"by": "tommorris", "score": null, "time": 1461397117, "timestamp": 1461397117000, "title": "", "type": "comment", "url": "", "text": "The only real change in the last few years is when Kier Starmer, then Director of Public Prosecution (now a Labour MP), released a set of guidelines on what criteria are used to decide whether to bring a prosecution in a case of assisted dying. (The CPS have a two-stage test to determine whether to bring a prosecution: firstly, are they likely to succeed? And secondly, is it in the public interest to bring a prosecution. The guidelines clarify what the public interest criteria are for assisted dying cases.)<p>It&#x27;s intended to make it so that the relatives of someone who travelled abroad for assisted dying are less likely to be prosecuted under the Suicide Act 1961.<p>See <a href=\"http:&#x2F;&#x2F;www.theguardian.com&#x2F;society&#x2F;2010&#x2F;feb&#x2F;25&#x2F;assisted-suicide-guidelines-family-prosecution\" rel=\"nofollow\">http:&#x2F;&#x2F;www.theguardian.com&#x2F;society&#x2F;2010&#x2F;feb&#x2F;25&#x2F;assisted-suic...</a><p>Pretty much all attempts at legal change (whether through legislation or through court action) in the UK have been a failure. It pops up every few years in Parliament and is then roundly voted down.", "parent": 11550308.0, "deleted": null, "dead": null, "descendants": null, "id": 11554584, "ranking": null, "date": 1461397117000, "year": 2016}, {"by": "aseipp", "score": null, "time": 1461783231, "timestamp": 1461783231000, "title": "", "type": "comment", "url": "", "text": "LLVM doesn&#x27;t ever even bother with rewrite rules. That&#x27;s done substantially earlier in the compiler, at the Core phase (rewrite rules are &#x27;just&#x27; equational reasoning optimizations that the compiler is aware of, so it works roughly at the level of the program you write, vs any more complicated intermediate form.)<p>There is still some inlining&#x2F;smarts going on at the LLVM level, obviously, but it&#x27;s nowhere near as aggressive as it is at the Core level in GHC. And obviously rewrite rules are user-definable - so they kick in much earlier. (As a side note, we actually spit out pretty optimized LLVM code from the C-- backend, in such a way that only some of LLVM&#x27;s heaviest optimizations make a difference).<p>There are some specific optimizations that are simply not possible for LLVM in the general case and are better handled before conversion (for example, C-- at one point essentially gets CPS transformed in a way which LLVM cannot &#x27;see through&#x27;, and by that point you&#x27;ve lost the opportunity to do a number of simpler optimizations like basic constant propagation, while it&#x27;s trivial to do earlier). But that&#x27;s mostly the same in any compiler, and not unique to GHC...", "parent": 11582362.0, "deleted": null, "dead": null, "descendants": null, "id": 11583448, "ranking": null, "date": 1461783231000, "year": 2016}, {"by": "MichaelGG", "score": null, "time": 1461793337, "timestamp": 1461793337000, "title": "", "type": "comment", "url": "", "text": "Read the link in his first post where it is explained. His wife had an accident with their new child; CPS assumed it was malicious. DA wants to look hard.", "parent": 11584431.0, "deleted": null, "dead": null, "descendants": null, "id": 11584811, "ranking": null, "date": 1461793337000, "year": 2016}, {"by": "hajile", "score": null, "time": 1461970975, "timestamp": 1461970975000, "title": "", "type": "comment", "url": "", "text": "The two reasons for tail calls are loops and CPS. Nobody is championing the idea that we need traces for each loop iteration. I would somewhat understand the CPS argument except that the event loop already destroys a huge amount of meaningful stack traces anyway (while not identical, it is somewhat similar). I don&#x27;t see anyone insisting on stack traces there either.<p>Why do we need explicit tail calls with stack traces?", "parent": 11598245.0, "deleted": null, "dead": null, "descendants": null, "id": 11599297, "ranking": null, "date": 1461970975000, "year": 2016}, {"by": "gsg", "score": null, "time": 1462218326, "timestamp": 1462218326000, "title": "", "type": "comment", "url": "", "text": "This reminds me of an irritating problem in CPS based compilers where you can have a transformation that is obvious and legal except that after the transformation one of the relevant variables would not be in scope. The solution(s) are to decline to do that transformation, fart around with sinking and hoisting in order to get the scope right, or ditch scope and move to a graph model in which dependence is represented with explicit edges rather than being approximated by the lexical structure of the program.<p>I&#x27;m guessing that the lexical borrow problems that Rust are facing are an instance of the same problem. It will be interesting to read the follow up post and see what relation, if any, the suggested solution has to the graph approaches that I am familiar with.", "parent": 11611436.0, "deleted": null, "dead": null, "descendants": null, "id": 11614874, "ranking": null, "date": 1462218326000, "year": 2016}, {"by": "cwzwarich", "score": null, "time": 1462227839, "timestamp": 1462227839000, "title": "", "type": "comment", "url": "", "text": "The solution is basically the same as the CPS case: switch to dominator-based scoping rather lexical scoping. I wrote an RFC on what would need to be done to the region system for nonlexical borrows a while back: <a href=\"https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rfcs&#x2F;pull&#x2F;396\" rel=\"nofollow\">https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rfcs&#x2F;pull&#x2F;396</a>.", "parent": 11614874.0, "deleted": null, "dead": null, "descendants": null, "id": 11616215, "ranking": null, "date": 1462227839000, "year": 2016}, {"by": "spion", "score": null, "time": 1462229932, "timestamp": 1462229932000, "title": "", "type": "comment", "url": "", "text": "There is no replacement because they&#x27;re a fundamentally broken idea. They require the following to happen, in that order:<p>* V8 needs to optimize try-finally<p>* Node core needs to add try-finally at every single place where callbacks are invoked and make sure all state and resource cleanup is properly done to support domains<p>* Popular libraries need to also add try-finally handlers for the above.<p>As to why this is a problem in node and not so much in other languages, its because with node callbacks, the call stack goes both ways. In other languages, libraries mostly call their dependencies&#x27; code. In node&#x27;s CPS style, you call the library but the library also calls your closure code. The semantics for the 2nd part aren&#x27;t well defined in node - the loose law basically says: I wont call you twice, I&#x27;ll try not to call you synchronously, and you wont throw (and if you do the behavior is undefined).<p>With promises there is a contract and its enforced by the promise implementation. Since Promises actually have error semantics, you can build resource management strategies on top of them. <a href=\"http:&#x2F;&#x2F;promise-nuggets.github.io&#x2F;articles&#x2F;21-context-managers-transactions.html\" rel=\"nofollow\">http:&#x2F;&#x2F;promise-nuggets.github.io&#x2F;articles&#x2F;21-context-manager...</a> - and consequently there is no reason to crash your server on errors.", "parent": 11616305.0, "deleted": null, "dead": null, "descendants": null, "id": 11616425, "ranking": null, "date": 1462229932000, "year": 2016}, {"by": "barrkel", "score": null, "time": 1462727793, "timestamp": 1462727793000, "title": "", "type": "comment", "url": "", "text": "Event loops lose your call stack; you need to rewrite your program as a state machine so you know where to pick back up; or you need to rewrite your program in continuation passing style with callbacks, like JavaScript; or you automate that CPS transform, and you&#x27;ve just reinvented green threads again.", "parent": 11654645.0, "deleted": null, "dead": null, "descendants": null, "id": 11654767, "ranking": null, "date": 1462727793000, "year": 2016}, {"by": "kerkeslager", "score": null, "time": 1463249277, "timestamp": 1463249277000, "title": "", "type": "comment", "url": "", "text": "This is definitely a good reason to learn new languages, but it does have its limits. Examples:<p>1. Erlang has done a lot of work to make their actors lightweight. In Erlang it&#x27;s not only common to spawn a new actor for everything, but it&#x27;s generally a good idea that organizes your code flexibly and results in transparent scaling onto multiple cores. On other systems that support actors, the actors aren&#x27;t as lightweight, so while they&#x27;re useful for organizing your code in some cases, using them pervasively will result in cripplingly slow performance and, depending on the language, completely exhausting thread&#x2F;process resources.<p>2. Some schemes support CPS conversion and TCO, which allows you to use recursion at relatively little cost and without worrying about exhausting the stack. However, in languages that support TCO and not CPS conversion, it takes some work to be sure that your recursive calls are tail calls. And in languages that don&#x27;t do either CPS conversion or TCO, deep recursion performs poorly and infinite recursion breaks outright.<p>This is why it&#x27;s not only important to learn patterns in new languages, but to learn how those patterns are implemented under the covers.", "parent": 11696848.0, "deleted": null, "dead": null, "descendants": null, "id": 11697326, "ranking": null, "date": 1463249277000, "year": 2016}, {"by": "DiabloD3", "score": null, "time": 1463579593, "timestamp": 1463579593000, "title": "", "type": "comment", "url": "", "text": "Yes, because <i>that would actually be fucking useful</i>.<p>I almost want to flag this post off the front page due to how goddamned useless that article is. And the thing is? It&#x27;s actually pretty decently written. It was engaging enough to finish reading it.<p>Or rather, not finish reading it: there is at least two paragraphs left that have not been published. Was it a lab fuckup? The inhaler (which also indicates a lab fuckup, since they should have looked at her medical records to deal with known false positives)? Is she going to sue for mental distress, malpractice, whatever?<p>What the hell.<p>Edit: Oh, and like half the HN community are asthmatics and are on inhalers. Can one of us be whisked off by the government for lab fuckups? Can this go on our permanent record due to their incompetence?<p>And as for that woman, can she get this expunged off her record? Once you&#x27;re tagged by CPS, unless you deal with them with a firm hand, they <i>love</i> to fuck up children&#x27;s lives.<p>Disclaimer: I grew up in Maine, I&#x27;ve seen repeatedly what CPS has done to families due to their incompetence, I have no reason to think that CPS in other states are any better.<p>If you&#x27;re a parent, and you care about your child, treat the CPS like a terrorist threat. Do not talk to them unless you&#x27;re with your lawyer, do not answer their questions, and teach your child the same. Their job is to make you guilty to justify their budget, not protect children.", "parent": 11721889.0, "deleted": null, "dead": null, "descendants": null, "id": 11721914, "ranking": null, "date": 1463579593000, "year": 2016}, {"by": "sickbeard", "score": null, "time": 1463580927, "timestamp": 1463580927000, "title": "", "type": "comment", "url": "", "text": "It&#x27;s not about innocent or guilt. CPS wasn&#x27;t called. If a test is positive then they take certain precautions. The baby tested negative but she was treated like positive.", "parent": 11721946.0, "deleted": null, "dead": null, "descendants": null, "id": 11722079, "ranking": null, "date": 1463580927000, "year": 2016}, {"by": "pigpaws", "score": null, "time": 1463581938, "timestamp": 1463581938000, "title": "", "type": "comment", "url": "", "text": "CPS has basically unlimited power to take the kid for any contrived reason they can imagine BEFORE it goes through any kind of court... all based on their perceived notion of &#x27;what&#x27;s best&#x27; for the child.<p>And if you don&#x27;t believe in raising your kid the same way THEY want you to, watch out...<p><a href=\"http:&#x2F;&#x2F;www.usatoday.com&#x2F;story&#x2F;news&#x2F;nation&#x2F;2015&#x2F;04&#x2F;13&#x2F;parents-investigated-letting-children-walk-alone&#x2F;25700823&#x2F;\" rel=\"nofollow\">http:&#x2F;&#x2F;www.usatoday.com&#x2F;story&#x2F;news&#x2F;nation&#x2F;2015&#x2F;04&#x2F;13&#x2F;parents...</a><p><a href=\"http:&#x2F;&#x2F;insider.foxnews.com&#x2F;2015&#x2F;06&#x2F;14&#x2F;florida-parents-charged-felony-neglect-after-11-year-old-son-plays-backyard-90-minutes\" rel=\"nofollow\">http:&#x2F;&#x2F;insider.foxnews.com&#x2F;2015&#x2F;06&#x2F;14&#x2F;florida-parents-charge...</a>", "parent": 11722054.0, "deleted": null, "dead": null, "descendants": null, "id": 11722220, "ranking": null, "date": 1463581938000, "year": 2016}, {"by": "zer00eyz", "score": null, "time": 1463582144, "timestamp": 1463582144000, "title": "", "type": "comment", "url": "", "text": "When I was a kid:<p>I rode a bike without a helmet<p>I played outside, by my self, and would sometimes go MILES from my house.<p>We did stupid stuff, with fire, fireworks and the like.<p>My parents left me home alone after school, I was a latch key kid.<p>Today, the police would bring my kids home and I would get a visit from CPS for any of these things.<p>Welcome to having children in the new millennium.", "parent": 11721601.0, "deleted": null, "dead": null, "descendants": null, "id": 11722251, "ranking": null, "date": 1463582144000, "year": 2016}, {"by": "sickbeard", "score": null, "time": 1463582238, "timestamp": 1463582238000, "title": "", "type": "comment", "url": "", "text": "It wasn&#x27;t CPS that took their kids away. It was the police who took them away and handed them to CPS.", "parent": 11722220.0, "deleted": null, "dead": null, "descendants": null, "id": 11722268, "ranking": null, "date": 1463582238000, "year": 2016}, {"by": "ryandrake", "score": null, "time": 1463582645, "timestamp": 1463582645000, "title": "", "type": "comment", "url": "", "text": "Sorry to be negative, but I&#x27;m not sure I understand what I should be outraged about. She tested positive for meth. The hospital advised her on all the things they probably advise to everyone else in that situation, they tested the baby for meth (came back negative), and they did an additional, more thorough test later (came back negative), and finally mom and dad are off to be parents. CPS was never even involved. I guess the article is about how a few nurses were mean and made her feel sad, because not much else seemed to happen.<p>If you really want to feel injustice and helplessness, why not try getting arrested for something you didn&#x27;t do. Spend a few nights in jail, and deal with police, lawyers, judges, lose your job and friends because of it, find yourself on a bunch of lists you&#x27;ve never been on before, etc. That&#x27;s what &quot;being crushed by a system&quot; is like.", "parent": 11721601.0, "deleted": null, "dead": null, "descendants": null, "id": 11722305, "ranking": null, "date": 1463582645000, "year": 2016}, {"by": "sickbeard", "score": null, "time": 1463584789, "timestamp": 1463584789000, "title": "", "type": "comment", "url": "", "text": "that&#x27;s what cops do when they find unattended children. They don&#x27;t drive them home, they give them to CPS to sort it out.", "parent": 11722280.0, "deleted": null, "dead": null, "descendants": null, "id": 11722558, "ranking": null, "date": 1463584789000, "year": 2016}, {"by": "burfog", "score": null, "time": 1463585095, "timestamp": 1463585095000, "title": "", "type": "comment", "url": "", "text": "This is a big part of why homebirth is gaining popularity. It&#x27;s just family and maybe a midwife. Nobody is going to do a meth test. The doors don&#x27;t lock you inside, unable to escape without permission. (that security is NOT to protect the baby from strangers; it&#x27;s so CPS can take your baby)<p>Also: There is no need to drive madly to the hospital. There will be no incentive to keep you for exactly how long your insurance will pay, nor to perform surgery. You get to sleep in your own bed, without constant beeping and light from the hallway. You can have as many visitors as you want. You will never be separated from your baby, not even for a moment. You won&#x27;t be treated like a potential criminal. You get respect.", "parent": 11721601.0, "deleted": null, "dead": null, "descendants": null, "id": 11722593, "ranking": null, "date": 1463585095000, "year": 2016}, {"by": "powercf", "score": null, "time": 1463585962, "timestamp": 1463585962000, "title": "", "type": "comment", "url": "", "text": "From the article:<p>&gt; All three days, the nurses are reluctant to hand over the baby, saying my actions are irresponsible.<p>&gt; Every shift change, two nurses stand by my bed and inform another two nurses of my status as a combative patient. \u201cThis woman tested positive for methamphetamine,\u201d<p>This does not strike me as very professional. The medical staff should have considered the possibility of a false positive, and given the mother the benefit of the doubt when she said she wasn&#x27;t taking methamphetamine. Telling the mother that she shouldn&#x27;t breastfeed and that CPS have been called, while not stopping her from breastfeeding (presumably they have no legal power) is the worst of both worlds: increase stress&#x2F;worry (which is something the child would pick up on), draw everyone&#x27;s focus away from the actual birth and the child, while simultaneously allowing her to potentially pass this, presumably harmful, drug to the child. Madness.", "parent": 11722094.0, "deleted": null, "dead": null, "descendants": null, "id": 11722698, "ranking": null, "date": 1463585962000, "year": 2016}, {"by": "masklinn", "score": null, "time": 1463591960, "timestamp": 1463591960000, "title": "", "type": "comment", "url": "", "text": "And if there&#x27;s trouble and the kid[0] dies[1] you can just say that was &quot;their journey&quot; and wash your hands from it. Hell, you might even &quot;get respect&quot; and praises for having killed your kid, go you.<p>But hey, CPS didn&#x27;t get to take your kid[2], so there&#x27;s that.<p>[0] or the mother, or both<p>[1] which is anything but rare, even in the UK under obstetric care[3]<p>&gt; The risk of dying on the day of birth (0.43 per 1000, or 430 micromorts) exceeds that of any other average day of life until the 92nd year.<p>and matches the risks of major surgery. Homebirth, especially with completely unqualified midwives (which is the rule in the US) is almost an order of magnitude more risky[4].<p>[2] the coroner did, to check for foul play<p>[3] <a href=\"http:&#x2F;&#x2F;onlinelibrary.wiley.com&#x2F;doi&#x2F;10.1111&#x2F;1471-0528.12544&#x2F;full\" rel=\"nofollow\">http:&#x2F;&#x2F;onlinelibrary.wiley.com&#x2F;doi&#x2F;10.1111&#x2F;1471-0528.12544&#x2F;f...</a><p>[4] <a href=\"https:&#x2F;&#x2F;olis.leg.state.or.us&#x2F;liz&#x2F;2013R1&#x2F;Downloads&#x2F;CommitteeMeetingDocument&#x2F;8585\" rel=\"nofollow\">https:&#x2F;&#x2F;olis.leg.state.or.us&#x2F;liz&#x2F;2013R1&#x2F;Downloads&#x2F;CommitteeM...</a>", "parent": 11722593.0, "deleted": null, "dead": null, "descendants": null, "id": 11723644, "ranking": null, "date": 1463591960000, "year": 2016}, {"by": "hellogoodbyeeee", "score": null, "time": 1463593929, "timestamp": 1463593929000, "title": "", "type": "comment", "url": "", "text": "No I&#x27;m not. Honestly I&#x27;m astonished  that people are calling for a lawsuit. What happened? Some nurses gave her a disapproving look? Someone made an appointment with cps that was later cancelled? So what? I&#x27;d be more sympathetic if CPS actually took the child away, but they didn&#x27;t. The hospital clearly acted unprofessionally, but that is hardly grounds for a lawsuit.", "parent": 11723912.0, "deleted": null, "dead": null, "descendants": null, "id": 11724037, "ranking": null, "date": 1463593929000, "year": 2016}, {"by": "serge2k", "score": null, "time": 1463595537, "timestamp": 1463595537000, "title": "", "type": "comment", "url": "", "text": "Which is why they did a second test, tested the baby, and did a third test.<p>More screwed up is the fact that it took weeks to get the correct result, and that innocent people have to live in fear of CPS coming and taking away their newborn.", "parent": 11723031.0, "deleted": null, "dead": null, "descendants": null, "id": 11724354, "ranking": null, "date": 1463595537000, "year": 2016}, {"by": "Delmania", "score": null, "time": 1463597102, "timestamp": 1463597102000, "title": "", "type": "comment", "url": "", "text": "&gt; CPS has basically unlimited power to take the kid for any contrived reason they can imagine BEFORE it goes through any kind of court... all based on their perceived notion of &#x27;what&#x27;s best&#x27; for the child.<p>This is 100% absolutely false, but it&#x27;s a misconception CPS agents love to abuse.  CPS is NOT a law enforcement agency. If they want to remove a child from a house, they need to have the police and judge&#x27;s order to do so. In fact, they can only enter your house with your permission or with a warrant with police present. However, some of their worse agents thrive on threatening parents with child removal.<p>If you ever, ever get wind of CPS coming to visit you, consult a lawyer, and record any conversations you have with them (on your property).  You need to stand up to them.  Source: I&#x27;ve been through this.  Fortunately, the person I worked with understood she was entering a hostile environment.", "parent": 11722220.0, "deleted": null, "dead": null, "descendants": null, "id": 11724608, "ranking": null, "date": 1463597102000, "year": 2016}, {"by": "Delmania", "score": null, "time": 1463597516, "timestamp": 1463597516000, "title": "", "type": "comment", "url": "", "text": "&gt; What&#x27;s so scary about CPS?<p>CPS is like the police.  In general, a large number of the agents are decent people who are trying to do what&#x27;s best for the children.  However, you will get some agents that tend to be over zealous and will abuse their position to threaten and force the parents into submission, under the assumed auspices of taking away the children. Most people who deal with CPS tend to be poor and do not realize a CPS agent is not a law enforcement agent, and thus need a warrant and police to take away children.", "parent": 11722054.0, "deleted": null, "dead": null, "descendants": null, "id": 11724669, "ranking": null, "date": 1463597516000, "year": 2016}, {"by": "hackbinary", "score": null, "time": 1463600200, "timestamp": 1463600200000, "title": "", "type": "comment", "url": "", "text": "CPS means something different in the UK, Crown Prosecution Service.", "parent": 11724354.0, "deleted": null, "dead": null, "descendants": null, "id": 11725111, "ranking": null, "date": 1463600200000, "year": 2016}, {"by": "strictnein", "score": null, "time": 1463601886, "timestamp": 1463601886000, "title": "", "type": "comment", "url": "", "text": "&gt; &quot;(that security is NOT to protect the baby from strangers; it&#x27;s so CPS can take your baby)&quot;<p>Uh no, it&#x27;s really not.", "parent": 11722593.0, "deleted": null, "dead": null, "descendants": null, "id": 11725404, "ranking": null, "date": 1463601886000, "year": 2016}, {"by": "khedoros", "score": null, "time": 1463602043, "timestamp": 1463602043000, "title": "", "type": "comment", "url": "", "text": "Are you making an argument that distress and psychological harm aren&#x27;t a form of &quot;damage&quot;? They added some fairly traumatic experiences to an already stressful time in these peoples&#x27; lives without sufficient cause. You&#x27;re trying to say that the little things (glances, the temporary threat of CPS taking away the newborn, being told more than once not to breastfeed your child, being described as a &quot;combative patient&quot; just for doing what&#x27;s best for the child) don&#x27;t add up to a big thing. I don&#x27;t think you understand the stresses involved in this situation.<p>Maybe a lawsuit is going too far, especially if this incident isn&#x27;t in some permanent CPS record. But if it is, the hospital has them set up for some serious problems down the road.", "parent": 11724037.0, "deleted": null, "dead": null, "descendants": null, "id": 11725428, "ranking": null, "date": 1463602043000, "year": 2016}, {"by": "SteveGerencser", "score": null, "time": 1463602539, "timestamp": 1463602539000, "title": "", "type": "comment", "url": "", "text": "I have had to deal with CPS in behalf of family members more than once and I have come to the conclusion that there is no group more terrifying than one that was supposed to protect children and has turned into something entirely different.", "parent": 11724354.0, "deleted": null, "dead": null, "descendants": null, "id": 11725502, "ranking": null, "date": 1463602539000, "year": 2016}, {"by": "masklinn", "score": null, "time": 1463603594, "timestamp": 1463603594000, "title": "", "type": "comment", "url": "", "text": "Had they been certain the test was right, CPS would have been hovering over the birthing bed and the parents would have risked carting to a cell. That&#x27;s not what happened.", "parent": 11723895.0, "deleted": null, "dead": null, "descendants": null, "id": 11725662, "ranking": null, "date": 1463603594000, "year": 2016}, {"by": "pigpaws", "score": null, "time": 1463653555, "timestamp": 1463653555000, "title": "", "type": "comment", "url": "", "text": "I&#x27;ve been an EMT for 15 years, in 3 states. I&#x27;ve reported suspicions, as required. I&#x27;ve also seen CPS take kids. All it takes to get a judge&#x27;s &#x27;order&#x27; is a phone call. cops at least need to present <i>something</i> before getting a warrant.", "parent": 11724608.0, "deleted": null, "dead": null, "descendants": null, "id": 11729160, "ranking": null, "date": 1463653555000, "year": 2016}, {"by": "rayiner", "score": null, "time": 1463785568, "timestamp": 1463785568000, "title": "", "type": "comment", "url": "", "text": "Fun fact: In Chicago, the second largest school system is the Archdiocese of Chicago catholic schools (which has 40k students to CPS&#x27;s 400k). They spent about half what CPS does per pupil.", "parent": 11742194.0, "deleted": null, "dead": null, "descendants": null, "id": 11742248, "ranking": null, "date": 1463785568000, "year": 2016}, {"by": "tptacek", "score": null, "time": 1463787965, "timestamp": 1463787965000, "title": "", "type": "comment", "url": "", "text": "Though consider also that:<p>* They benefit from the enormous selection bias of &quot;parents who take financial pains to send their kids to Catholic school&quot;.<p>* They have carte blanche to dismiss problematic and challenging students back to the public school system.<p>* They generally don&#x27;t offer programs for learning disabled and behaviorally disabled students.<p>* They aren&#x27;t obliged to honor the CPS students per classroom maximum.<p>* Catholic school teachers take a pay cut to serve in that system.<p>* They generally have poorer facilities than the Chicago public schools.<p>I&#x27;m a product of Chicago Catholic schools, and I was pretty amazed to see what the local public school system offered my own kids.", "parent": 11742248.0, "deleted": null, "dead": null, "descendants": null, "id": 11742414, "ranking": null, "date": 1463787965000, "year": 2016}, {"by": "Aoreias", "score": null, "time": 1464303649, "timestamp": 1464303649000, "title": "", "type": "comment", "url": "", "text": "This isn&#x27;t necessarily as nefarious as it seems - Blue Coat is going to have to comply with Symantec&#x27;s Certification Practice Statement(CPS) which prohibits the issuance of MitM certificates. In all likelihood it&#x27;s to allow Blue Coat to roll out a service that allows it to create certificates for clients of its security services. Any deviation from that CPS would necessitate revoking this intermediate certificate.<p>That said, I&#x27;m quite curious though if Google is going to require that Blue Coat submit all issued certificates to be submitted to Certificate Transparency logs like the rest of Symantec&#x27;s certificates[0].<p>[0] <a href=\"https:&#x2F;&#x2F;security.googleblog.com&#x2F;2015&#x2F;10&#x2F;sustaining-digital-certificate-security.html\" rel=\"nofollow\">https:&#x2F;&#x2F;security.googleblog.com&#x2F;2015&#x2F;10&#x2F;sustaining-digital-c...</a>", "parent": 11781915.0, "deleted": null, "dead": null, "descendants": null, "id": 11782384, "ranking": null, "date": 1464303649000, "year": 2016}, {"by": "vardump", "score": null, "time": 1464304350, "timestamp": 1464304350000, "title": "", "type": "comment", "url": "", "text": "&gt; In all likelihood it&#x27;s to allow Blue Coat to roll out a service that allows it to create certificates for clients of its security services. Any deviation from that CPS would necessitate revoking this intermediate certificate.<p>So why doesn&#x27;t Blue Coat establish their own CA for this purpose?", "parent": 11782384.0, "deleted": null, "dead": null, "descendants": null, "id": 11782447, "ranking": null, "date": 1464304350000, "year": 2016}, {"by": "facetube", "score": null, "time": 1464312758, "timestamp": 1464312758000, "title": "", "type": "comment", "url": "", "text": "The certificate has this in it, which would seem to confirm what you&#x27;re saying: &quot;Explicit Text: In the event that the BlueCoat CPS and Symantec CPS conflict, the Symantec CPS governs.&quot;", "parent": 11782384.0, "deleted": null, "dead": null, "descendants": null, "id": 11783256, "ranking": null, "date": 1464312758000, "year": 2016}, {"by": "prdonahue", "score": null, "time": 1464322428, "timestamp": 1464322428000, "title": "", "type": "comment", "url": "", "text": "We have relationships with Comodo, DigiCert, and GlobalSign. A large part of our Universal SSL issuance is currently through Comodo, which is probably what you noticed. (We&#x27;ve considered acquiring our own CA or subCA in the past but the audit requirements are quite onerous, at least after the first year, and sometimes it&#x27;s nice to have someone handle certain aspects for you.)<p>The most important thing to pay attention to here, with respect to Blue Coat, is the subscriber agreement they have signed with the CA <i>AND</i> the CPS that they write for their auditors. It&#x27;ll dictate what they are and are not allowed to do with this subCA. If these are publicly trusted certificates, they will still need to pass\u2014at minimum\u2014domain control validation, e.g., can BC&#x2F;their customers add an arbitrary DNS record or HTTP-accessible file for the zone being issued? If not, CA&#x2F;B prohibits their issuance, so Symantec would get in huge trouble for allowing this. When you run your own subCA you are supposed to perform these checks yourself; it&#x27;s up to their auditors (more in a sec) and Symantec to make sure they are performing these each and every time.<p>Additionally, Blue Coat will need to pass a WebTrust audit as mandated by the CA&#x2F;B Forum. The thoroughness of this audit depends on how much Blue Coat is taking over from Symantec. If they&#x27;re, e.g., handling key material, the audit will be much the same the CAs themselves must do. If doing considerably less, the scope of the audit is considerably more constrained. I <i>think</i> these audits are released to the public as I remember Let&#x27;s Encrypt doing so, but that may just be because i) they aren&#x27;t a full blown directly browser trusted CA or ii) LE just decided to do so as it fits their ethos.<p>You can find the relevant regulations that are imposed on public CAs here (look specifically for references to Subscriber Agreements): <a href=\"https:&#x2F;&#x2F;github.com&#x2F;cabforum&#x2F;documents&#x2F;tree&#x2F;master&#x2F;docs\" rel=\"nofollow\">https:&#x2F;&#x2F;github.com&#x2F;cabforum&#x2F;documents&#x2F;tree&#x2F;master&#x2F;docs</a>. I&#x27;d start with the &quot;BRs&quot; (Baseline Requirements) doc; the other, EV Guidelines are irrelevant here, and Bylaws apply to CA&#x2F;B itself.<p>Source: I manage CloudFlare&#x27;s relationship with CAs and product manage our SSL&#x2F;TLS related offerings.<p>EDIT: Added reference to CPS, the Certification Practice Statement. This document is written and provided to the auditors, and includes controls to test, etc. Here&#x27;s Symantec&#x27;s for example (as linked within X509v3 in crt.sh): <a href=\"https:&#x2F;&#x2F;www.symauth.com&#x2F;cps\" rel=\"nofollow\">https:&#x2F;&#x2F;www.symauth.com&#x2F;cps</a>.", "parent": 11782674.0, "deleted": null, "dead": null, "descendants": null, "id": 11783867, "ranking": null, "date": 1464322428000, "year": 2016}, {"by": "devishard", "score": null, "time": 1464335754, "timestamp": 1464335754000, "title": "", "type": "comment", "url": "", "text": "You&#x27;re making a lot of assumptions about the terms under which this certificate was issued, which you don&#x27;t know. Without seeing the contract between Symantec and Blue Coat you can&#x27;t claim that they&#x27;re bound by Symantec&#x27;s CPS.<p>And even if they are bound by Symantec&#x27;s CPS, they can do a lot of damage before the CPS can be enforced.", "parent": 11782384.0, "deleted": null, "dead": null, "descendants": null, "id": 11784531, "ranking": null, "date": 1464335754000, "year": 2016}, {"by": "goda90", "score": null, "time": 1464716378, "timestamp": 1464716378000, "title": "", "type": "comment", "url": "", "text": "I&#x27;ve brought up this idea before. Have part of the UBI of children go into a fund that they can then access at 18 to use for schooling or whatever they please. With CPS helping with neglect cases while they are young, the child then isn&#x27;t stuck in perpetual poverty, because at age 18 they will have savings and full UBI in hand to make their own life. The money not in the fund either is used responsibly for child rearing by the parents, or foster parents if it comes down to that.", "parent": 11808000.0, "deleted": null, "dead": null, "descendants": null, "id": 11808329, "ranking": null, "date": 1464716378000, "year": 2016}, {"by": "tn13", "score": null, "time": 1464720289, "timestamp": 1464720289000, "title": "", "type": "comment", "url": "", "text": "Many of those cases are about law and order and not necessarily welfare. I do not see CPS as a welfare organization.", "parent": 11807896.0, "deleted": null, "dead": null, "descendants": null, "id": 11808969, "ranking": null, "date": 1464720289000, "year": 2016}, {"by": "animeweedlord", "score": null, "time": 1464727879, "timestamp": 1464727879000, "title": "", "type": "comment", "url": "", "text": "At which point CPS intervenes. The other piece of the puzzle would be high quality orphanages, operated with expectation that the chidren will not be adopted, instead dedicated to providing the best possible environment for development.<p>Our current system tries to fill the role of the orphanage as best it can without taking the children away from their parents, and I don&#x27;t think it works for anyone involved. Bad parents are enabled, poor kids rarely overcome their upbringing and continue the viscious cycle, well adjusted kids from stable homes have their education disrupted and often violence inflicted on them by the poor kids, and it only gets worse as time goes by.", "parent": 11809864.0, "deleted": null, "dead": null, "descendants": null, "id": 11810113, "ranking": null, "date": 1464727879000, "year": 2016}, {"by": "Grishnakh", "score": null, "time": 1464733252, "timestamp": 1464733252000, "title": "", "type": "comment", "url": "", "text": "I think a <i>good</i> UBI program will eliminate the crappy social programs, and will keep some around to help transition people to the new society and also to help people who aren&#x27;t helped just by having money to spend.  For instance, child abuse: we have CPS for a reason, but giving everyone a monthly check isn&#x27;t going to magically eliminate child abuse, so obviously we still need CPS for that.  There&#x27;s plenty of other places where we&#x27;ll still need social workers to help people.  But the savings we&#x27;ll realize by not having armies of government workers making sure someone isn&#x27;t &quot;cheating&quot; by getting a welfare check and then trying to supplement that with another source of income, along with various other benefits, will help pay for UBI.  And <i>eventually</i>, by eliminating poverty and changing the culture (with both UBI and social workers), we won&#x27;t need so many social workers.", "parent": 11808780.0, "deleted": null, "dead": null, "descendants": null, "id": 11810748, "ranking": null, "date": 1464733252000, "year": 2016}, {"by": "barrkel", "score": null, "time": 1464886262, "timestamp": 1464886262000, "title": "", "type": "comment", "url": "", "text": "Await typically uses a CPS transform to rewrite methods into continuations. Effectively the remainder of the method after the await is passed as a callback to the async operation. The async operation can resume when it completes.<p>Erlang&#x27;s waiting will interact with the VM&#x27;s scheduler, and pause the green process until a message is available. Logically though, there&#x27;s little difference between a stack treated as data by a scheduler, and the closure captured by the continuation after the CPS induced by await. The chief practical difference is a continuation could be called more than once. Resuming a green process with the same stack location more than once won&#x27;t work very well because the stack gets reused. But you could get around that by storing the stack not as a reused vector, but as a linked list of heap-allocated activation records (an exact parallel to nested closures, which happens in anything beyond the most trivial CPS transform). Erlang wouldn&#x27;t do that because (a) it&#x27;s slower and (b) it&#x27;s not necessary since it can&#x27;t continue more than once.<p>(I implemented anonymous methods in the Delphi compiler and got intimately familiar with lots of these details.)", "parent": 11823846.0, "deleted": null, "dead": null, "descendants": null, "id": 11824032, "ranking": null, "date": 1464886262000, "year": 2016}, {"by": "aluciani", "score": 1.0, "time": 1467137733, "timestamp": 1467137733000, "title": "What's New in Acropolis 4.7 \u2013 Docker, Microsoft CPS and More", "type": "story", "url": "http://next.nutanix.com/t5/Nutanix-Connect-Blog/What-s-New-in-Acropolis-4-7/ba-p/11215#.V3K-rBdO6Sw.hackernews", "text": "", "parent": null, "deleted": null, "dead": true, "descendants": null, "id": 11996113, "ranking": null, "date": 1467137733000, "year": 2016}, {"by": "anandrm", "score": null, "time": 1467481026, "timestamp": 1467481026000, "title": "", "type": "comment", "url": "", "text": "The problem here mostly is not about the throughput,which i guess most of the highend hardware could help, but in terms of how many connections it can handle per second is where the bottleneck is on the Linux Kernel.I cannot imagine a 1 million CPS linux kernel support now .. But the same is possible with a UserSpace TCP Stack .", "parent": 12021574.0, "deleted": null, "dead": null, "descendants": null, "id": 12023213, "ranking": null, "date": 1467481026000, "year": 2016}, {"by": "lettercarrier", "score": null, "time": 1467755828, "timestamp": 1467755828000, "title": "", "type": "comment", "url": "", "text": "Since each punch card meant something, you really learned code.  Watching out for memory and keeping track of registers was paramount (COMPASS was my HS and Freshman initial class).  Syntax killed, but was overcome by hand writing code.   The science of CPS courses had to be taught just to be able to pass the class via assignments.  Writing an OS with punch cards was an entire term.<p>We could get same day runs if we paid more or had our own account.  There were 3 tiers of cost..", "parent": 12037270.0, "deleted": null, "dead": null, "descendants": null, "id": 12039818, "ranking": null, "date": 1467755828000, "year": 2016}, {"by": "ceejayoz", "score": null, "time": 1468594876, "timestamp": 1468594876000, "title": "", "type": "comment", "url": "", "text": "Try that today and CPS will show up.", "parent": 12101406.0, "deleted": null, "dead": null, "descendants": null, "id": 12101452, "ranking": null, "date": 1468594876000, "year": 2016}, {"by": "groovy2shoes", "score": null, "time": 1469650070, "timestamp": 1469650070000, "title": "", "type": "comment", "url": "", "text": "You&#x27;re trying to draw a line between them, but there is no line.  Virtual machines <i>are</i> abstract machines, but not necessarily the other way around.  The most common distinction I&#x27;ve seen, when a distinction has been made at all, is that a virtual machine is either  1) a software simulation of a physical machine;  or 2) a software simulation of an abstract machine (as is the case for the JVM, for example).  More often, though, I&#x27;ve witnessed the terms be used interchangeably.<p>Case in point, in the example of OCODE, the BCPL machine does not exist <i>only</i> as a specification -- OCODE had both an interpreter and a multitude of native-code translators by the time the book was published -- yet Richards refers to it as an abstract machine.  Frontends for the Amsterdam Compiler Kit (ACK) by Andrew Tanenbaum (once the native compiler toolchain for MINIX -- I&#x27;m not sure if that is still the case) have an IR analogous to OCODE called EM, but the papers describing it refer to it as code for a virtual machine, rather than as code for an abstract machine as Richards described it.<p>Your definition is not incompatible with the definition I give above.  By such a definition, any abstract machine will immediately become a virtual machine as soon as someone implements the specification.  In my mind, that makes the distinction <i>even less important</i>, as the only thing standing between the two is someone spending a few hours writing code.<p>I get a feeling that the two terms likely originate from two independent discoveries of the same concept, but I&#x27;m not that well-versed in their history.<p>&gt; <i>If you want to argue that intermediate representations that compilers use for optimisations can be virtual machines go ahead, but to me that waters down the definition of what a virtual machine is.</i><p>First, not <i>every</i> intermediate representation constitutes code for an abstract&#x2F;virtual machine.  There are high-level IRs where it would be a bit of a stretch to specify a machine which directly accepts that code.  An example is code where the only translation has been to expand derived forms (for example, macro expansion).  This code is technically in IR, but often remains at <i>nearly</i> the same level as the original code.  Another example might be the CPS representation commonly used by Scheme compilers (among others), though I&#x27;m willing to bet an abstract machine <i>could</i> be described for such code.  Typically, the IR intended to be fed into a code generator will be suitable for simulation by an abstract machine.<p>Second, the IR <i>itself</i> is not a virtual machine.  The IR represents <i>code</i> for an abstract&#x2F;virtual machine.  This is <i>necessarily</i> the case because the IR must preserve the meaning of the program it represents, and the execution of the program involves the operation or simulation of some machine [0].  It is then the case that, so long as the IR is too low-level to qualify as a high-level programming language (and in some other cases regardless, see above), the IR represents code for an abstract machine, and vice versa.  The LLVM IR qualifies.<p>[0]:  This follows from the Church-Turing thesis coupled with the fact that the programs are intended to eventually be executed by machine.  It then follows that any time a representation of the program is lowered into a lower-level representation, its description becomes more suitable for direct execution by some machine.", "parent": 12157481.0, "deleted": null, "dead": null, "descendants": null, "id": 12176108, "ranking": null, "date": 1469650070000, "year": 2016}, {"by": "joubert", "score": 1.0, "time": 1470245051, "timestamp": 1470245051000, "title": "Acumen \u2013 simulate mathematical models of cyber-physical systems", "type": "story", "url": "http://www.acumen-language.org/", "text": "", "parent": null, "deleted": null, "dead": null, "descendants": 0.0, "id": 12219711, "ranking": null, "date": 1470245051000, "year": 2016}, {"by": "catnaroek", "score": null, "time": 1470486475, "timestamp": 1470486475000, "title": "", "type": "comment", "url": "", "text": "&gt; Yes, but you seemed to have an objection to eq existing at all.<p>I have an objection to equality (and, more generally, value manipulation) being broken. If you can&#x27;t define it correctly, then don&#x27;t define it at all.<p>&gt; No, it isn&#x27;t. Because sometimes you need that information. Which is why refcells exist in the first place.<p>You still misunderstand. Reference cells only let me manipulate the physical identity of objects. Normal values <i>don&#x27;t</i> have a physical identity. Just like numbers don&#x27;t have a physical identity in Lisp - except this applies to a much larger class of values in ML.<p>&gt; Every language, even your beloved ML, has this valve in some way.<p>There is no abstraction violation in ML: You can&#x27;t query the physical location of a list in ML. You can only query the physical location of an <i>object</i> whose state <i>happens</i> to be a list. A `foo list` and a `foo list ref` are very different things, and the type checker will let you know if you accidentally conflate them.<p>&gt; Second off, that just seems like an argument for typing,<p>Yes. (Just to be clear: whether it&#x27;s static or dynamic typing matters very little.)<p>&gt; dynamic dispatch,<p>Dynamic dispatch is only one possible implementation strategy. Another is monomorphization, which removes all second-class polymorphism at compile time, but requires whole program analysis. Standard ML doesn&#x27;t have first-class polymorphism.<p>In any case, as a language user, I <i>absolutely don&#x27;t care</i> how this is implemented. That&#x27;s a problem for compiler writers. As Dijkstra said, the specification acts as a contract between users and implementors, defining precisely the rights and responsibilities of each part.<p>&gt; and a ref type.<p>Yes.<p>&gt; As for the most convenient solution in lisp, do you want convenient, or efficent?<p>Both. This dichotomy is an argument by lack of imagination.<p>&gt; It took one extra line of code and wasn&#x27;t &quot;tricky&quot; at all.<p>Have you ever tried actually proving anything about code that uses call&#x2F;cc? Effectively, you need to first CPS-convert your code, and only then prove whatever you want to prove about the result of such CPS conversion. If testing two data structures for equality requires call&#x2F;cc, the language is broken.<p>&gt; Sure, we don&#x27;t have types, so it&#x27;s not automatic,<p>Let me repeat: <i>This isn&#x27;t an argument over static types.</i> What I&#x27;m asking for can be done correctly in a dynamically typed setting too. Lisp, for some reason that&#x27;s hard to understand, chooses not to.<p>&gt; but it&#x27;s still pretty simple.<p>Writing code that&#x27;s generic over a comparator (more generally, generic over the realization of some algebraic or relational structure) is tedious and easy to do wrong in Lisp.", "parent": 12237725.0, "deleted": null, "dead": null, "descendants": null, "id": 12237884, "ranking": null, "date": 1470486475000, "year": 2016}, {"by": "wahern", "score": null, "time": 1471066226, "timestamp": 1471066226000, "title": "", "type": "comment", "url": "", "text": "I&#x27;ve been writing async I&#x2F;O networking software for about 15 years now. Early on most of that was in C, now it&#x27;s split about 50&#x2F;50 between C and Lua. Most of my C I&#x2F;O code is still in C because I prefer my libraries to be reuseable outside of Lua or any particular event loop, and they often are. Lua&#x27;s coroutines are usually higher up the stack, juggling more abstract state; and I use them for more than asynchronous I&#x2F;O or asynchronous tasks.<p>The thing about async&#x2F;await is that in a language like C, I can already accomplish much of that with tricks like Duff&#x27;s Device and macros. It has its limitations, but IME they&#x27;re not much more onerous than the limitations of async&#x2F;await, especially in the context of a language lacking GC. I have to manually keep state off the stack (or otherwise copy&#x2F;restore it), but you do that anyhow when you don&#x27;t have lexical closures and GC, and often even when you do.<p>The beautiful thing about coroutines in Lua is that it&#x27;s based on a threading model, but not one bound to the C stack or a kernel thread, which are completely orthogonal concerns left to the application to deal with or not deal with. And it does this while preserving functions as first-class objects. Neither callers nor callees need to know anything about coroutines. That kind of composability makes coroutines useful and convenient for many more things than simulating green threading or managing CPU parallelism. Among other things, it means I can mix-and-match functional and imperative styles according to the problem, and not whether it will be convenient to then make use of coroutines. It means that I have a single, natural call stack--not an implicit stack and an explicit stack. async&#x2F;await and futures unify your data stack, but you&#x27;re still manually managing the call stack through syntactic devices or otherwise formalized calling conventions. However heavily sugared, it will hinder the design of your software no less than if you had to manually manage the data stack, too.<p>Coroutines that aren&#x27;t stackful aren&#x27;t nearly as powerful in terms of problem solving. Without them being stackful, it&#x27;s a horribly leaky abstraction for non-trivial uses. Most people would agree that the C preprocessor is a mess, and that functions as first-class objects are powerful. So modern languages strive to create templating systems that allow you to construct _real_ functions that are indistinguishable from any another function. But then they introduce monstrosities like futures or async&#x2F;await, that beautiful symmetry is broken. It&#x27;s like bringing back C&#x27;s macro preprocessor--now you have regular functions and these weird things with different syntactic and control follow semantics, whether you wanted it or not. The decision is no longer yours, which means you&#x27;re bending to the language&#x27;s deficiencies.<p>Why even bother with such half-baked solutions? In almost every case it&#x27;s utterly transparent that these solutions exist for the benefit of the compiler and runtime author, usually because of intentional or unintentional technical debt--a direct or indirect dependency on the C or kernel stack. For C++ it&#x27;s understandably a difficult dilemma, but for every other language it&#x27;s a total cop-out.<p>Then these solutions are sold to the public by prettifying the implementations with fancy terminology and beguiling examples showing how they can be used to implement async I&#x2F;O or parallel CPU jobs. But few, if any, language features are so narrowly tailored to such specific use cases. Why? Because languages are supposed to provide simple building blocks that compose as seamlessly as possible at a much higher level of abstraction than, e.g., a slightly nicer way to implement HTTP long-polling servers. Such contrivances are as removed from the basic simplicity of the function as C&#x27;s macros are from first-class functions. In both cases you can implement solutions for a certain subset of problems that superficially look convenient and nice; but in the real world the limitations become swiftly apparent, and you realize a lot of effort was spent in design and implementation for little real-world gain.<p>With Lua&#x27;s coroutines, I can implement a futures pattern easily when it&#x27;s appropriate, and it will be more powerful because the futures themselves can make use of coroutines both internally and externally. But in my use of coroutines in Lua futures are rarely the most natural design pattern. Sometime you want a full-blown CPS solution, sometimes you simply want to be able to arbitrarily swap producer&#x2F;consumer control flow, for example in a lexer. Often you want a mixture of all of these. Coroutines--stackful coroutines--provide all that and more, seamlessly.<p>Futures only look nice and elegant in contrast to event loop oriented, callback-style programming. But that&#x27;s a really, really low bar. Please aim higher, people!", "parent": 12271696.0, "deleted": null, "dead": null, "descendants": null, "id": 12280399, "ranking": null, "date": 1471066226000, "year": 2016}, {"by": "rayiner", "score": null, "time": 1471217561, "timestamp": 1471217561000, "title": "", "type": "comment", "url": "", "text": "My pet theory is that schools are so dysfunctional because of a massive agency problem. The principals--the kids--lack capacity, so the agents run amok. Actually serving kids&#x27; needs becomes a side-show to cosmic debates over the social condition.<p>Publicly-run schools can&#x27;t even make basic operational decisions (hiring and firing, closing down unnecessary facilities, etc) without dealing with the last stand of the labor movement or the repercussions of decades of racial oppression. CPS didn&#x27;t create the excesses of unregulated capitalism, but we punish it by forcing it to pay far more for the same level of credentials than the private sector. CPS didn&#x27;t segregate the black population of Chicago into the south side, but when CPS tries to close down under-capacity schools, we make it pay for those sins. We impose regulation on the business of educating kids that are so stifling that we&#x27;d never dream of imposing similar ones on a private-sector industry, for fear of killing it.<p>Which is not to say that those cosmic issues are unimportant. Maybe people with English degrees should be paid more and maybe black communities need more resources to deal with the impacts of segregation. But school districts are entirely the wrong level of abstraction for dealing with those problems.<p>Privately-run education doesn&#x27;t entirely solve the agency problem, but it insulates the business of teach kids from the irrelevant politics.", "parent": 12287715.0, "deleted": null, "dead": null, "descendants": null, "id": 12287804, "ranking": null, "date": 1471217561000, "year": 2016}, {"by": "Tehnix", "score": null, "time": 1471313094, "timestamp": 1471313094000, "title": "", "type": "comment", "url": "", "text": "&gt;A new compiler back end, based on static single-assignment form (SSA), has been under development for the past year<p>Huh, I was under the impression that either SSA or CPS was pretty standard for any serious compiler. Does anyone know why they didn&#x27;t design it for this from the beginning? It&#x27;s like one of the earlier things you learn when making actual compilers.", "parent": 12294350.0, "deleted": null, "dead": null, "descendants": null, "id": 12295030, "ranking": null, "date": 1471313094000, "year": 2016}, {"by": "pcwalton", "score": null, "time": 1471313127, "timestamp": 1471313127000, "title": "", "type": "comment", "url": "", "text": "&gt; Huh, I was under the impression that either SSA or CPS was pretty standard for any serious compiler.<p>It was based on the Plan 9 compilers, which didn&#x27;t use SSA.", "parent": 12295030.0, "deleted": null, "dead": null, "descendants": null, "id": 12295033, "ranking": null, "date": 1471313127000, "year": 2016}, {"by": "katiabachko", "score": 1.0, "time": 1471451911, "timestamp": 1471451911000, "title": "A Family Matter: Why California's CPS agencies may face class-action lawsuits", "type": "story", "url": "http://read.atavist.com/a-family-matter", "text": "", "parent": null, "deleted": null, "dead": true, "descendants": null, "id": 12305963, "ranking": null, "date": 1471451911000, "year": 2016}, {"by": "Afton", "score": null, "time": 1471975929, "timestamp": 1471975929000, "title": "", "type": "comment", "url": "", "text": "I&#x27;m most interested in the enshrinement into law of these risk assessments, where if you disagree with the risk assessments you get flagged for CPS or criminal judgement. Even if you &#x27;win&#x27;, society just imposed a massive, <i>massive</i> cost on you (and your children) for disagreeing about the relative risk of an action.<p>There needs to be some way of walking this back, but I can&#x27;t think what that might be except literally trying to get a law in place giving parents broad immunity. I can&#x27;t even really imagine how such a law would be worded without completely gutting CPS and related organizations in other countries.", "parent": 12345598.0, "deleted": null, "dead": null, "descendants": null, "id": 12346002, "ranking": null, "date": 1471975929000, "year": 2016}, {"by": "tn13", "score": null, "time": 1471976936, "timestamp": 1471976936000, "title": "", "type": "comment", "url": "", "text": "Bodies like CPS have to justify their existence and increase in budgets. If my job is to go to office everyday and find parents to arrest the best way is to lower the bar for &quot;putting kids in danger&quot;.<p>It is okay to send your kids to play soccer or the hand-football americans play where they can possibly receive life threatening injuries but it is not okay to let them walk back home from school because all it takes a evil guy with a van and candies to kidnap that kid.", "parent": 12345598.0, "deleted": null, "dead": null, "descendants": null, "id": 12346182, "ranking": null, "date": 1471976936000, "year": 2016}, {"by": "rdtsc", "score": null, "time": 1471978641, "timestamp": 1471978641000, "title": "", "type": "comment", "url": "", "text": "Even since I was 10 or so I would often come back to school on my own. Then let myself into our apartment. Eat some lunch, do homework, play until my parents came home in the evening. I was effectively often alone for about 4 or so hours.<p>I wouldn&#x27;t let my kid do it here in US. Not because I wouldn&#x27;t trust them or think it is dangerous. But because I am afraid what neighbors, school, CPS would do.<p>My co-worker let his kids play in the cul-de-sac for an hour while they watched from the house. An anonymous neighbor reported them to police, and a sequence of embarrassing calls at work ensued, statements to police, follow up visits from police, etc.<p>And this is not some dangerous part of the city. This is suburbs, as safe as they come.<p>But apparently you are never safe from neighbors with an agenda.<p>And the thing is, there is nothing you can say or do, even if you knew this neighbor. &quot;Well I was worried for the children!&quot;. Unless they openly confessed it was because you cut the lawn wrong or they don&#x27;t like the color of your house, there is nothing you can do to them (well maybe turn evil and report them for other irrational fears -- terrorism &quot;but I was worried about this country&#x27;s safety, swear heard them talk about buying a lot of fertilizer&quot;).<p>The interesting thing is, once those in power act irrationally about something. There will always be people to exploit that element. I heard from my grandparents how neighbors would rat on each other imaginary things during Stalin&#x27;s times. The results were usually the neighbors family would be taken in the middle the night and sent to Siberia never to be seen again. This is of course, an extreme example but it illustrates, how irrationality can and will be exploited.", "parent": 12345598.0, "deleted": null, "dead": null, "descendants": null, "id": 12346455, "ranking": null, "date": 1471978641000, "year": 2016}, {"by": "harryh", "score": null, "time": 1471978887, "timestamp": 1471978887000, "title": "", "type": "comment", "url": "", "text": "<i>But because I am afraid what neighbors, school, CPS would do.</i><p>Speaking of &quot;perceived but unreal risk&quot;....", "parent": 12346455.0, "deleted": null, "dead": null, "descendants": null, "id": 12346488, "ranking": null, "date": 1471978887000, "year": 2016}, {"by": "Nadya", "score": null, "time": 1471981498, "timestamp": 1471981498000, "title": "", "type": "comment", "url": "", "text": "I personally disagree and coming entirely from my own personal experience - the nannying comes from a stereotypical, overprotective stay-at-home-parent.<p>It is {thing} the parent would never in a million years let their kids do (generally due to a perceived risk) and therefore other parents are <i>actively endangering their kids</i> if they let their kid do {thing}. Whether or not the risk exists and whether or not some small amount of risk is &quot;better for the development of the child&quot; (eg: independence&#x2F;navigational skills developed by being able to walk to&#x2F;from school unattended)<p>My own mother is one of those overprotective judging types. She&#x27;d never report to CPS unless it was clear-cut endangering the child (eg: physically beating them&#x2F;doing hard drugs). But she still looks down on the neighbors for letting their kids play in the front lawn. The street being dangerous - kids should only play in the back yard! And only under adult supervision. My mother refuses to use a babysitter (even family) lest they let her children do something she would consider &quot;too dangerous&quot; or &quot;stupid&quot;. I&#x27;ve gotten into a few arguments with her how I think that is doing more harm than good but they&#x27;re not my kids so I don&#x27;t have a say in it.<p>E:<p>And what CodeMage said. 100% agree there as well.", "parent": 12346736.0, "deleted": null, "dead": null, "descendants": null, "id": 12346862, "ranking": null, "date": 1471981498000, "year": 2016}, {"by": "Someone1234", "score": null, "time": 1471982464, "timestamp": 1471982464000, "title": "", "type": "comment", "url": "", "text": "And if CPS agrees about the manner you deem appropriate?", "parent": 12346533.0, "deleted": null, "dead": null, "descendants": null, "id": 12347029, "ranking": null, "date": 1471982464000, "year": 2016}, {"by": "galdosdi", "score": null, "time": 1471983864, "timestamp": 1471983864000, "title": "", "type": "comment", "url": "", "text": "See my post above... I feel there is less of a culture of giving a damn what other people are doing and more of a culture of just letting them go about their business in NYC than more suburban areas.<p>Children growing up in many neighborhoods in NYC seem more autonomous. Of course, that&#x27;s technology too -- they have access to public transit and a dense bikable&#x2F;walkable environment, while suburban kids are stuck living with outdated misplanned car-centric infrastructure and basically live like prisoners reliant on their parents to ferry them everywhere until they turn 16, or even much later depending on their access to driver&#x27;s education.<p>Just one example, I&#x27;m sure there&#x27;s suburbs in the US where CPS would be called if someone was biking around with their child in the back of the bike [1] but that&#x27;s perfectly commonplace and OK in NYC.<p>[1] Here&#x27;s an example of something just as bad if not worse (and doubly tragic) <a href=\"http:&#x2F;&#x2F;www.huffingtonpost.com&#x2F;radley-balko&#x2F;raquel-nelson-jail-for-jaywalking_b_905925.html\" rel=\"nofollow\">http:&#x2F;&#x2F;www.huffingtonpost.com&#x2F;radley-balko&#x2F;raquel-nelson-jai...</a>", "parent": 12346868.0, "deleted": null, "dead": null, "descendants": null, "id": 12347258, "ranking": null, "date": 1471983864000, "year": 2016}, {"by": "dangoor", "score": null, "time": 1471984450, "timestamp": 1471984450000, "title": "", "type": "comment", "url": "", "text": "It would be interesting to see data on stuff like number of random calls to CPS vs. number of kids kidnapped by strangers. They&#x27;re probably both small risks, possibly with similar incidence.<p>I&#x27;m also curious if calls to CPS, etc. are more common today because suburban dwellers know their neighbors less than in the past?", "parent": 12346488.0, "deleted": null, "dead": null, "descendants": null, "id": 12347331, "ranking": null, "date": 1471984450000, "year": 2016}, {"by": "mcherm", "score": null, "time": 1471985025, "timestamp": 1471985025000, "title": "", "type": "comment", "url": "", "text": "That&#x27;s a fairly good argument. I would like to see some actual statistics the frequency of CPS overreacting in an unreasonable fashion. I certainly read many news stories about it, but that is misleading in exactly the same way as the stories we hear about child abductions.<p>I <i>do</i> however have <i>some</i> level of knowledge here. I have spoken with people involved in child protection about questions like this. I have been told that if this person saw a parent allowing their 11-year-old child to cross the street to play on a playground unsupervised that they would have to write it up. They backed this up with citations of specific laws (Maryland - which does, indeed, have absurd laws on this subject). So while statistics might convince me that this is an anomaly, I <i>do</i> have personal experience that suggests the CPS risk is real.", "parent": 12347338.0, "deleted": null, "dead": null, "descendants": null, "id": 12347440, "ranking": null, "date": 1471985025000, "year": 2016}, {"by": "johnnyhillbilly", "score": null, "time": 1471985195, "timestamp": 1471985195000, "title": "", "type": "comment", "url": "", "text": "The CPS should have a focus on parents that are unreasonable in their protection. Unfortunately, they have to be policy based. One child out of 500,000 that is snatched when alone creates much more attention than 50,000 children (out of 500,000) that never get the joy of developing into reasonable, competent and calm grown-ups...", "parent": 12346761.0, "deleted": null, "dead": null, "descendants": null, "id": 12347464, "ranking": null, "date": 1471985195000, "year": 2016}, {"by": "mcherm", "score": null, "time": 1471985438, "timestamp": 1471985438000, "title": "", "type": "comment", "url": "", "text": "Sort of.<p>There are two claims someone might make. &quot;X is common, and it poses a meaningful risk&quot;, or &quot;X exists, and it poses a non-zero risk&quot;. Anecdotes do not help much with the first claim, but they do help with the second.<p>So perhaps we can agree that child abductions CAN happen, and that CPS overreach DOES occur. Then we can review the real risks of both.<p>I&#x27;ve seen data on the real risk of child abductions. I have never seen data on the real risks of CPS overreach. (And it would be difficult to define &quot;overreach&quot;.) Does anyone know of any such data?<p>(Because also, in the complete absence of actual data, anecdotes are better than nothing.)", "parent": 12347033.0, "deleted": null, "dead": null, "descendants": null, "id": 12347501, "ranking": null, "date": 1471985438000, "year": 2016}, {"by": "paulrpotts", "score": null, "time": 1471985748, "timestamp": 1471985748000, "title": "", "type": "comment", "url": "", "text": "It&#x27;s not an unreal risk. CPS really does have the power to take your children away. A CPS investigation is not a pleasant thing to go through.<p>Imagine having to sit through a serious conversation in which every aspect of your home life is inspected. For example, a (former) family friend reported that in our 100-year-old house, there were some ants in our kitchen. Not thousands of ants, but a handful. Imagine having to defend this as if it was a serious threat to your children&#x27;s safety by someone who could legally remove them.", "parent": 12346488.0, "deleted": null, "dead": null, "descendants": null, "id": 12347554, "ranking": null, "date": 1471985748000, "year": 2016}, {"by": "harryh", "score": null, "time": 1471985772, "timestamp": 1471985772000, "title": "", "type": "comment", "url": "", "text": "And in the absence of meaningful data BETTER TO BE SAFE THAN SORRY! said the overprotective parent that wouldn&#x27;t let their 12 year old kid bike 5 blocks to school.<p>Seriously, once you see the parallels between how parents afraid of criminals and parents afraid of CPS talk about the risks you can&#x27;t un-see them.", "parent": 12347501.0, "deleted": null, "dead": null, "descendants": null, "id": 12347559, "ranking": null, "date": 1471985772000, "year": 2016}, {"by": "b_t_s", "score": null, "time": 1471988175, "timestamp": 1471988175000, "title": "", "type": "comment", "url": "", "text": "Never attribute to malice...   My mother was a CPS worker for a while so here&#x27;s a little perspective from the inside.  CPS is generally wildly underfunded, underpaid, and understaffed.  It&#x27;s staffed largely by bleeding hearts straight out of college, most of whom will burn&#x2F;churn out in a year or two. They&#x27;ve never had kids; most are still kids themselves.  There are a few lifers and first job in a second career people, but they&#x27;re the minority.  It&#x27;s one of the more systematically dysfunctional branches of government.", "parent": 12346182.0, "deleted": null, "dead": null, "descendants": null, "id": 12347897, "ranking": null, "date": 1471988175000, "year": 2016}, {"by": "lukeschlather", "score": null, "time": 1471988611, "timestamp": 1471988611000, "title": "", "type": "comment", "url": "", "text": "Realistically, CPS is overloaded. I know people who&#x27;ve worked with CPS, and I think if you went and worked with CPS for a few months you would change your tune pretty quickly. They don&#x27;t have the resources to take children and put them into foster care on a hunch.", "parent": 12347171.0, "deleted": null, "dead": null, "descendants": null, "id": 12347958, "ranking": null, "date": 1471988611000, "year": 2016}, {"by": "stcredzero", "score": null, "time": 1471988760, "timestamp": 1471988760000, "title": "", "type": "comment", "url": "", "text": "<i>Even since I was 10 or so I would often come back to school on my own. Then let myself into our apartment. Eat some lunch, do homework, play until my parents came home in the evening. I was effectively often alone for about 4 or so hours.</i><p><i>I wouldn&#x27;t let my kid do it here in US. Not because I wouldn&#x27;t trust them or think it is dangerous. But because I am afraid what neighbors, school, CPS would do.</i><p>In grade school, my sister and I and our friend would sometimes spend the entire day in the woods in the dead of winter. The real danger in this country isn&#x27;t the criminal and the bogeyman. The real danger in this country is the evaporation of real community and a broken pseudo-society of mutual disdain suspicion. Who is your real community? If you had a pet, who could you ask to watch your pet for a week? Who would you ask to watch your kids for an afternoon for no payment? That&#x27;s your real community. Large numbers of Americans have no real community at all.<p><i>But apparently you are never safe from neighbors with an agenda.</i><p>Because they are &quot;neighbors&quot; and you are not in real community with them.", "parent": 12346455.0, "deleted": null, "dead": null, "descendants": null, "id": 12347983, "ranking": null, "date": 1471988760000, "year": 2016}, {"by": "dragonwriter", "score": null, "time": 1471990938, "timestamp": 1471990938000, "title": "", "type": "comment", "url": "", "text": "&gt; CPS really does have the power to take your children away.<p>Strictly speaking, AFAIK, in most jurisdictions they actually don&#x27;t have the power to do so, even temporarily, on their own judgement -- they either need a warrant issued by a judge on a finding of probable cause, or law enforcement action in an emergency situation where a warrant isn&#x27;t practical. So, really, the <i>police</i> and&#x2F;or <i>courts</i> have the power to take your children away.", "parent": 12347554.0, "deleted": null, "dead": null, "descendants": null, "id": 12348257, "ranking": null, "date": 1471990938000, "year": 2016}, {"by": "JamesBarney", "score": null, "time": 1472007764, "timestamp": 1472007764000, "title": "", "type": "comment", "url": "", "text": "Number of kids abducted by strangers per year 115.<p>Number of kids investigated by the CPS 3.2 million.<p><a href=\"https:&#x2F;&#x2F;www.ncjrs.gov&#x2F;pdffiles1&#x2F;ojjdp&#x2F;196467.pdf\" rel=\"nofollow\">https:&#x2F;&#x2F;www.ncjrs.gov&#x2F;pdffiles1&#x2F;ojjdp&#x2F;196467.pdf</a>", "parent": 12347559.0, "deleted": null, "dead": null, "descendants": null, "id": 12349394, "ranking": null, "date": 1472007764000, "year": 2016}, {"by": "lberlin", "score": null, "time": 1472011701, "timestamp": 1472011701000, "title": "", "type": "comment", "url": "", "text": "I meant the risk of being reported to CPS (or being called out in general) rather than the risk of CPS overreacting. Once it gets to them it sounds like they go by the book, but fair point.", "parent": 12347440.0, "deleted": null, "dead": null, "descendants": null, "id": 12349615, "ranking": null, "date": 1472011701000, "year": 2016}, {"by": "tbihl", "score": null, "time": 1472013008, "timestamp": 1472013008000, "title": "", "type": "comment", "url": "", "text": "Well, I grew up in a small town of 20000 in Virginia, and I don&#x27;t think things are, or were, like this at all. When I go home, I see children arrive at the YMCA to play basketball unaccompanied. They also arrive at the library alone. When I worked at the town pool as recently as 5 years ago, our most common swimmers were kids who showed up alone on their bikes or skateboards. Thinking back about 10-15 years ago when I was younger, I&#x27;d walk the 30 minutes to school alone if I didn&#x27;t want to ride the bus. My younger brothers did likewise. The four of us would have firework battles in the yard; in hindsight perhaps someone should have come out to discourage us on that last activity. In the early 2000s, at age 7-10, I would spend most summer days down by the creek with a friend or two. We&#x27;d set off by bike after summer swim team in mornings, take our lunches, and spend most of the day there.<p>I guess that&#x27;s all a decade in the past, but I would wager that it&#x27;s media portrayal that&#x27;s more likely to have done most of the recent changing, not crazy people. There have always been crazy people, but it seems like they all organized to abuse CPS together suddenly over the last 10 years.", "parent": 12346531.0, "deleted": null, "dead": null, "descendants": null, "id": 12349680, "ranking": null, "date": 1472013008000, "year": 2016}, {"by": "laughinghan", "score": null, "time": 1472058192, "timestamp": 1472058192000, "title": "", "type": "comment", "url": "", "text": "Of course it&#x27;s relevant. I am certain that I am far from alone in expecting CPS to incorrectly take children more than 115&#x2F;3.2 million = 0.0036% of the time, which means that even without knowing the exact percentage of the time that CPS is mistaken, I was convinced by those numbers that a random kid has a higher chance of being mistakenly taken by CPS than abducted by a stranger.<p>Are you telling me that even though you, like me, don&#x27;t know the exact percentage of the time that CPS is mistaken, you expect it to be less that 0.0036%?", "parent": 12351578.0, "deleted": null, "dead": null, "descendants": null, "id": 12353464, "ranking": null, "date": 1472058192000, "year": 2016}, {"by": "harryh", "score": null, "time": 1472060159, "timestamp": 1472060159000, "title": "", "type": "comment", "url": "", "text": "Yes, I do think it&#x27;s less than 0.0036%.<p>First we see from the data that CPS declared 2.5 million of those 3.2 as &quot;non-victims&quot; so we can eliminate type 1 errors from almost 80% of the population right there.<p>Of the remaining 700k it&#x27;s not inconceivable at all that in a big percentage of cases there were actually significant parental problems. Frankly I bet that type 2 errors are much more common that type 1 for this population.", "parent": 12353464.0, "deleted": null, "dead": null, "descendants": null, "id": 12353730, "ranking": null, "date": 1472060159000, "year": 2016}, {"by": "fweespeech", "score": null, "time": 1472162130, "timestamp": 1472162130000, "title": "", "type": "comment", "url": "", "text": "&gt;  A couple of very slightly uncomfortable conversations seems like a small price to pay for raising your kids in the manner you deem appropriate.<p>That is what I responded to.<p>&gt;  You know how if you talk to an overprotective parent about how it&#x27;s really ok to let their kids wander around outside on their own a little they&#x27;re always at the ready with a link to a news story about something horrible happening? And you know how that news story is always anecdote and not data?<p>You implied the extent of the risk was a couple uncomfortable conversations based on an anecdote. Hypocrisy much?<p>Based on personal experience, I don&#x27;t have much faith in the quality of CPS investigations.<p><a href=\"http:&#x2F;&#x2F;www.theatlantic.com&#x2F;national&#x2F;archive&#x2F;2014&#x2F;07&#x2F;in-a-year-child-protective-services-conducted-32-million-investigations&#x2F;374809&#x2F;\" rel=\"nofollow\">http:&#x2F;&#x2F;www.theatlantic.com&#x2F;national&#x2F;archive&#x2F;2014&#x2F;07&#x2F;in-a-yea...</a><p>&gt; One statistic that stood out in the report: since 2008, the number of referrals to child protective service agencies (hereafter CPS) has increased by 8.3 percent, even as overall rates of actual child victimization declined by 3.3 percent during the same period. There is no system that can totally avoid putting parents who don&#x27;t deserve it through investigations, despite the fact that even the best moms and dads would regard the ordeal as nightmarish. Over time, however, the number of undeserving parents so burdened seems to be increasing\u2013and the number is large (note that &quot;screened out&quot; referrals are the ones deemed not even worth investigating):<p>The numbers are clearly moving in the wrong direction for the rate of reporting.<p>&gt; He goes on to explain that while taking kids from parents in this fashion is only permitted in emergencies as a matter of law, the way things play out in practice is very different. &quot;According to statistics published by the U.S. Department of Health and Human Services, more than 100,000 children who were removed in 2001\u2013more than one in three\u2013were later found not to have been maltreated at all,&quot;<p>Given CPS investigates gets ~3.4 million complaints a year and there are ~74 million kids, a substantial number of these complaints are screened out because they are basically random&#x2F;irrelevant.<p>I&#x27;m not in the habit of ignoring 1 in 20 odds, especially if I&#x27;ve got a 1 in 5 shot at it being something serious.<p>That is alot higher than the risk of terrorism, for instance, affecting me personally.", "parent": 12347033.0, "deleted": null, "dead": null, "descendants": null, "id": 12362803, "ranking": null, "date": 1472162130000, "year": 2016}, {"by": "harryh", "score": null, "time": 1472170246, "timestamp": 1472170246000, "title": "", "type": "comment", "url": "", "text": "Does CPS have problems? Sure. No doubt. And as a society we should work on fixing these problems.<p>But when it comes to your own individual life, you can either live your life in fear of the boogeyman or you can live your life the way you want to live it. Let your kids live their lives the way you think they should.<p>And if CPS shows up one day when they shouldn&#x27;t, you lawyer up and fight.<p>That&#x27;s what a grownup does.", "parent": 12362803.0, "deleted": null, "dead": null, "descendants": null, "id": 12363440, "ranking": null, "date": 1472170246000, "year": 2016}, {"by": "DanBC", "score": null, "time": 1472171487, "timestamp": 1472171487000, "title": "", "type": "comment", "url": "", "text": "You might want to look at the burden of proof needed to remove a child from a family; or at the disruption a family experiences with a full on CPS investigation.<p>And that&#x27;s ignoring the huge cost involved.", "parent": 12363440.0, "deleted": null, "dead": null, "descendants": null, "id": 12363516, "ranking": null, "date": 1472171487000, "year": 2016}, {"by": "fweespeech", "score": null, "time": 1472224527, "timestamp": 1472224527000, "title": "", "type": "comment", "url": "", "text": "&gt; But when it comes to your own individual life, you can either live your life in fear of the boogeyman or you can live your life the way you want to live it. Let your kids live their lives the way you think they should.<p>&gt; That&#x27;s what a grownup does.<p>The sheer condescension and lack of empathy you packed into a single comment is quite sad, tbh.<p>I tell you I have personal experience with CPS...and your response is I am terrified of a monster under my bed that isn&#x27;t real.<p>K.<p>&gt; And if CPS shows up one day when they shouldn&#x27;t, you lawyer up and fight.<p>Most people can&#x27;t afford $50k legal bills to fight the government. Are you really this isolated and ignorant that this doesn&#x27;t even occur to you?<p>Look, Harry, you say things like this:<p>&gt;  Yes, I do think it&#x27;s less than 0.0036%.<p>I show you the false negative rate is a helluva alot higher than that and you still spout when you clearly have no clue what you are talking about.<p>Just walk away before you continue to embarrass yourself.", "parent": 12363440.0, "deleted": null, "dead": null, "descendants": null, "id": 12366808, "ranking": null, "date": 1472224527000, "year": 2016}, {"by": "wonder_er", "score": null, "time": 1472240680, "timestamp": 1472240680000, "title": "", "type": "comment", "url": "", "text": "I built &quot;forts&quot; throughout what felt like miles and miles of empty woods. Leave the house in the morning, get back sometime later that day.<p>I&#x27;d want the same for my future children, but my greatest fear is a nosy neighbor calling CPS due to my seemingly negligent parenting style. (As inferred from my children having copious amounts of free time, bereft of adult supervision.)", "parent": 12368647.0, "deleted": null, "dead": null, "descendants": null, "id": 12368812, "ranking": null, "date": 1472240680000, "year": 2016}, {"by": "toyg", "score": null, "time": 1472267125, "timestamp": 1472267125000, "title": "", "type": "comment", "url": "", "text": "<i>&gt; my greatest fear is a nosy neighbor calling CPS </i><p>Ditto. My kids are now old enough that they can both ride a bike, so I let them circle around the block on their own. Every time they go, my heart is gripped by terror that some neighbour will report &quot;feral&quot; children.<p>I grew up in a block of small &quot;working class&quot; flats with large communal gardens and a small park; I could safely ride and play with other kids, and most of them were going to the same school as me. Now I live in middle-class suburbia, in a larger house with a nice private garden; but my kids cannot wander around without risking to be hit by a car, their &quot;parks&quot; are just playgrounds with lawns, and because they attend a &quot;better&quot; school a bit further away, don&#x27;t really know anyone in the area.<p>This is the product of an individualist culture, of which I am a prime representative. I don&#x27;t like conflict, not even the occasional low-intensity friction which is inevitable when you share anything (a block, a garden, a parking lot); so I bought a house where People Shall Leave Me Alone and where Kids Shall Be Safe. This makes it much more difficult for my kids to be social and &quot;explore the wilderness&quot;. And no, virtual realities are not a replacement.", "parent": 12368812.0, "deleted": null, "dead": null, "descendants": null, "id": 12370734, "ranking": null, "date": 1472267125000, "year": 2016}, {"by": "rubicon33", "score": null, "time": 1472605351, "timestamp": 1472605351000, "title": "", "type": "comment", "url": "", "text": "Was it not your choice to have the kids?<p>I&#x27;m tired of this cultural excuse of &quot;what about the kids!&quot;<p>If you chose to have kids, either explicitly, or through choice of recklessness, you deserve to own up to your decision.  If you can&#x27;t, or won&#x27;t, that&#x27;s what CPS is for.<p>Let&#x27;s stop giving people excuses just because they brought another person into the world.  In fact, lets hold them to an even higher standard for choosing to invoke a LIFE without themselves being able to support it.", "parent": 12393847.0, "deleted": null, "dead": null, "descendants": null, "id": 12395173, "ranking": null, "date": 1472605351000, "year": 2016}, {"by": "losteverything", "score": null, "time": 1472748711, "timestamp": 1472748711000, "title": "", "type": "comment", "url": "", "text": "Before keyboards everyone taking CPS at my university (1978)  were taught to write out code in yellow lined paper.<p>We handed in our code to the (female) adjunct for review. Run time was expensive.  Then we made our deck of run cards.<p>I used this &quot;write it out by hand first &quot; method during my entire tech career.<p>For me, writing it out was a really good way to learn (next to actually teaching others)", "parent": 12406775.0, "deleted": null, "dead": null, "descendants": null, "id": 12406872, "ranking": null, "date": 1472748711000, "year": 2016}, {"by": "qwertyuiop924", "score": null, "time": 1473528778, "timestamp": 1473528778000, "title": "", "type": "comment", "url": "", "text": "What&#x27;s so novel about Chicken&#x27;s GC? Cheney on the MTA is quite clearly novel (Chicken compiles to CPS and essentially GCs its stack frames IIRC, making call&#x2F;cc as fast as any other procedure call), but the algorithm itself is quite ordinary, IIRC.", "parent": 12470108.0, "deleted": null, "dead": null, "descendants": null, "id": 12470158, "ranking": null, "date": 1473528778000, "year": 2016}, {"by": "MatthewWilkes", "score": null, "time": 1474470504, "timestamp": 1474470504000, "title": "", "type": "comment", "url": "", "text": "Private prosecutions in the UK are at the discretion of the director of public prosecutions. Specifically, the CPS can take a private prosecution over and then discontinue it. They will do this if the prosecution is not considered to be &quot;in the public interest&quot;", "parent": 12547870.0, "deleted": null, "dead": null, "descendants": null, "id": 12548837, "ranking": null, "date": 1474470504000, "year": 2016}, {"by": "pka", "score": null, "time": 1474545508, "timestamp": 1474545508000, "title": "", "type": "comment", "url": "", "text": "I&#x27;m thinking a lot of the complexity of writing a compiler stems from the usage of inappropriate tools. I.e. I would rather kill myself than write a lexer in C (without yacc &#x2F; bison), but using parser combinators it&#x27;s a rather trivial task.<p>Similarly, annotating, transforming, folding, pattern matching on, CPS transforming etc. the produced AST is pretty trivial in a language that supports these constructs. And again, a nightmare in C.<p>That leaves codegen, but using the right abstractions it turns into a very manageable task as well.<p>Here&#x27;s a compiler written in Haskell for LLVM [0].<p>[0] <a href=\"http:&#x2F;&#x2F;www.stephendiehl.com&#x2F;llvm\" rel=\"nofollow\">http:&#x2F;&#x2F;www.stephendiehl.com&#x2F;llvm</a>", "parent": 12553591.0, "deleted": null, "dead": null, "descendants": null, "id": 12556184, "ranking": null, "date": 1474545508000, "year": 2016}, {"by": "jerf", "score": null, "time": 1474815960, "timestamp": 1474815960000, "title": "", "type": "comment", "url": "", "text": "I live in a suburb and I have kids. It isn&#x27;t what you say it is. It is fear about children being unsafe and metafear that if you aren&#x27;t seen as watching your children someone will call the cops. We all think this is stupid, except for the one or two busybodies who call the cops.<p>It isn&#x27;t something stupid about how inconceivable walking is or how foreign the idea of &quot;standing outside&quot; is. That&#x27;s just you insulting a group of people that I presume you don&#x27;t like.<p>I think if we&#x27;re going to see this end, we need institutional change; we need the police to be able to see a situation and tell off the person calling them for being stupid. As long as there&#x27;s an extremely good chance CPS will take your kid away because some asshat called the cops for something stupid, we parents can not afford to act otherwise.", "parent": 12574343.0, "deleted": null, "dead": null, "descendants": null, "id": 12575624, "ranking": null, "date": 1474815960000, "year": 2016}, {"by": "tptacek", "score": null, "time": 1476295209, "timestamp": 1476295209000, "title": "", "type": "comment", "url": "", "text": "I live in a city-adjacent suburb in Chicago, Oak Park, directly butting up against Austin, the largest high-crime overwhelmingly black neighborhood in the city of Chicago.<p>Oak Park is tiny and known for its school system.<p>The western side Austin Ave, which divides Chicago from Oak Park, hosts an unbroken row of multi-family dwellings, many of them large apartment buildings. The occupants of those buildings are people who would otherwise live in Austin, but move to Oak Park to get their kids into Oak Park schools.<p>This has been going on for decades in Oak Park, and we continue to have excellent schools, and continue to be a high-status magnet for professionals who want to live somewhere connected to the CTA trains but not part of CPS schools.<p>It doesn&#x27;t happen in Kennilworth or Wilmette, because those suburbs aren&#x27;t directly adjacent to troubled neighborhoods in Chicago. But there is absolutely no reason to believe that the carrying capacity for lower-income students of those suburbs --- the majority of Chicago suburbs, which like Wilmette and unlike Oak Park, aren&#x27;t city-adjacent --- is any less than that of Oak Park.<p>So, no, I don&#x27;t think your hypothesis about inner-city kids disrupting suburban schools is accurate, nor do I think &quot;instant white flight&quot; is going to happen.<p>&quot;White flight&quot; was an irrational, racist reaction to housing integration. It&#x27;s not a law of nature; it was&#x2F;is a growing pain of the US getting over centuries of segregation.", "parent": 12694649.0, "deleted": null, "dead": null, "descendants": null, "id": 12695131, "ranking": null, "date": 1476295209000, "year": 2016}, {"by": "pmyteh", "score": null, "time": 1476878281, "timestamp": 1476878281000, "title": "", "type": "comment", "url": "", "text": "That&#x27;s right. The Crown Prosecution Service (the national body which prosecutes essentially all criminal cases on behalf of the state) takes the view that charging under-18s for genuinely consensual sexual activity is generally not in the public interest. This policy (and guidance on essentially all other charging decisions) is helpfully published online as part of the CPS legal manual.<p>It&#x27;s still a matter of prosecutorial discretion rather than being actually legal, though.", "parent": 12742780.0, "deleted": null, "dead": null, "descendants": null, "id": 12742976, "ranking": null, "date": 1476878281000, "year": 2016}, {"by": "goodJobWalrus", "score": null, "time": 1476888363, "timestamp": 1476888363000, "title": "", "type": "comment", "url": "", "text": "Of what happening? Having CPS called on you? I don&#x27;t know, but I am as terrified of it, as your average helicopter mom would be of having their child scrape their knee, or be abducted by a stranger. I really hope the risk is as low as being abducted, though.", "parent": 12744185.0, "deleted": null, "dead": null, "descendants": null, "id": 12744229, "ranking": null, "date": 1476888363000, "year": 2016}, {"by": "Diederich", "score": null, "time": 1476888667, "timestamp": 1476888667000, "title": "", "type": "comment", "url": "", "text": "I hear you and my wife and I struggle with similar feelings!  But taking a step back, I think it&#x27;s plain that the actual risk from CPS over-reach is extremely low.<p>I posted my comment here: <a href=\"https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=12744241\" rel=\"nofollow\">https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=12744241</a> at the top level FYI.", "parent": 12744229.0, "deleted": null, "dead": null, "descendants": null, "id": 12744279, "ranking": null, "date": 1476888667000, "year": 2016}, {"by": "saosebastiao", "score": null, "time": 1476889355, "timestamp": 1476889355000, "title": "", "type": "comment", "url": "", "text": "I know this is presumptive but next time you take your kid to a playground, let them play on the playground with you barely in sight. Stay 200+ feet away. Watch your kid play, and then wait for some other parent to intervene in your child&#x27;s play. That parent will soon be looking around for you. When they can&#x27;t find someone who has their eyes fixated on your child, they will ask your child where their parents are. That person is the person who will turn you in to CPS.<p>I&#x27;m not kidding in the slightest when I say this literally happens at least once every single time I take my kid to the park. My kid is pretty advanced physically and takes parkour classes and gymnastics classes. He&#x27;s very capable of handling situations that other parents freak out at. And he knows his limits probably better than those parents know <i>their own</i>. But they still act like they need to save my kid from himself, and you wouldn&#x27;t believe the looks of disgust I get from them when I actually reveal myself. I really do not have to worry about him jumping off the monkey bars, but unfortunately I truly believe I can&#x27;t let him do it on his own without a <i>significant</i> risk of CPS getting called.", "parent": 12744241.0, "deleted": null, "dead": null, "descendants": null, "id": 12744393, "ranking": null, "date": 1476889355000, "year": 2016}, {"by": "Diederich", "score": null, "time": 1476891856, "timestamp": 1476891856000, "title": "", "type": "comment", "url": "", "text": "Thanks for the links!  I don&#x27;t have time to go through them at the moment though.<p>It&#x27;s almost certain that one of those 3.2 million incidents has our name on it.<p>In 2014, at a time when our son, who has high functional autism, was going down a mental rabbit hole about what foods he would eat.  When the list got down to three foods, we told him that it could not go down any further, period.<p>So he asked for one of those foods for dinner, and we served it, and he decided that he didn&#x27;t want it, that he would only eat one of the other two foods on his &#x27;list&#x27;.<p>We refused to accommodate and reminded him that he wasn&#x27;t allowed to go below three foods.  That the food in front of him was on his list, and that he had specifically asked for it.  So he would not be served anything different for dinner.<p>So he ate a little bit of it, and went to bed hungry and unhappy.<p>The next day at school, he told a teacher that we were starving him, that we were refusing to feed him.<p>This generated a mandatory CPS incident.<p>We received a call, and my wife went to the school and talked to someone and contextualized the situation.<p>The incident was subsequently closed without prejudice.<p>So, given that rather in-depth bit of &quot;anecdata&quot;: of that 3.2 million, based on our direct experience with the reporting requirements schools have to follow, most of them are specious.<p>Of the ones that aren&#x27;t, I suspect only a tiny fraction are in any way related to &#x27;free range parenting&#x27;.<p>In short: I strongly suspect that the danger of inappropriate child services intervention associated with various &#x27;free range parenting&#x27; activities is vanishingly small, even though it <i>feels</i> like a constant and potent danger.<p>PS: I&#x27;m 110% open and willing to answer any questions about anything mentioned here, including the autism, the &#x27;food list&#x27;, the seemingly strange behaviour, whatever.  I feel that there are a lot of misconceptions surrounding the realities of parenting autistic children, and I am more than happy to help with that.  Direct e-mail is fine too: diederich@gmail.com", "parent": 12744382.0, "deleted": null, "dead": null, "descendants": null, "id": 12744792, "ranking": null, "date": 1476891856000, "year": 2016}, {"by": "ansible", "score": null, "time": 1476893045, "timestamp": 1476893045000, "title": "", "type": "comment", "url": "", "text": "Well, the issue is the media reporting.<p>Most of the time, if a child is abducted, it is the other parent in a post-divorce situation, rather than a kidnapper &#x2F; molester.  But we do see stories about those occasionally in the national news, so most people are &quot;aware of the danger&quot;.<p>Ditto, I suppose, for CPS getting called by an over-reactive neighbor upon seeing a child wandering around without supervision.  These types of stories also make the national news, for whatever reason, so most people are &quot;aware of the danger&quot;.<p>And thus, we live in a climate of fear.  Yay!<p>For the record, I spent some parts of my childhood wandering around in the woods alone (or with friends) where I could have: fallen down a hill, drown in a stream, fallen out of a tree, etc., etc., etc. without a reasonable possibility of timely rescue (no mobile phones back then).  And I somehow survived.  It is a shame that most kids in urban or suburban areas won&#x27;t get a chance to do this anymore.", "parent": 12744185.0, "deleted": null, "dead": null, "descendants": null, "id": 12745010, "ranking": null, "date": 1476893045000, "year": 2016}, {"by": "fweespeech", "score": null, "time": 1476895307, "timestamp": 1476895307000, "title": "", "type": "comment", "url": "", "text": "<a href=\"http:&#x2F;&#x2F;www.pollyklaas.org&#x2F;about&#x2F;national-child-kidnapping.html\" rel=\"nofollow\">http:&#x2F;&#x2F;www.pollyklaas.org&#x2F;about&#x2F;national-child-kidnapping.ht...</a><p>&gt; 99.8% of the children who go missing do come home.<p>&gt; Only about 100 children (a fraction of 1%) are kidnapped each year in the stereotypical stranger abductions you hear about in the news.<p><a href=\"http:&#x2F;&#x2F;www.theatlantic.com&#x2F;national&#x2F;archive&#x2F;2014&#x2F;07&#x2F;in-a-year-child-protective-services-conducted-32-million-investigations&#x2F;374809&#x2F;\" rel=\"nofollow\">http:&#x2F;&#x2F;www.theatlantic.com&#x2F;national&#x2F;archive&#x2F;2014&#x2F;07&#x2F;in-a-yea...</a><p>&gt; In a Year, Child-Protective Services Checked Up on 3.2 Million Children<p>&gt; 2.5 million of those kids were declared &#x27;non-victims.&#x27; Another 686,000 were &#x27;abused&#x27; or &#x27;neglected.&#x27; And an estimated 1,640 kids died as a result.<p>To be fair, one of these has a much higher rate of incident than the other.<p>Personally, I&#x27;m more concerned with the quality and accuracy of CPS than I am about child abduction simply because a 10% improvement in CPS would save more lives than a 100% reduction in child abductions.<p>Then again, I feel that way about medical errors vs. terrorism and the value of spending money to save lives. A 10% reduction of medical errors would save more lies than a 100% reduction in terrorism. :&#x2F;", "parent": 12744531.0, "deleted": null, "dead": null, "descendants": null, "id": 12745328, "ranking": null, "date": 1476895307000, "year": 2016}, {"by": "rocqua", "score": null, "time": 1476902931, "timestamp": 1476902931000, "title": "", "type": "comment", "url": "", "text": "I read it as him &#x27;engineering&#x27; the situation to avoid over concerned parents from calling the cops &#x2F; calling CPS &#x2F; freaking out the child by telling him this is dangerous.", "parent": 12746316.0, "deleted": null, "dead": null, "descendants": null, "id": 12746552, "ranking": null, "date": 1476902931000, "year": 2016}, {"by": "Grishnakh", "score": null, "time": 1476908153, "timestamp": 1476908153000, "title": "", "type": "comment", "url": "", "text": "The risk of your child abduction is very, very, very high in America these days.  All you have to do is read news stories about what happens when parents let their kids go somewhere without supervision: the cops are called, CPS is called, and the kids are seized (or threatened to be seized).<p>Yes, there is a <i>huge</i> danger of your children being abducted, if you are not a helicopter parent.  It&#x27;s not some shadowy molester however, it&#x27;s the government which will abduct your child.", "parent": 12744185.0, "deleted": null, "dead": null, "descendants": null, "id": 12747312, "ranking": null, "date": 1476908153000, "year": 2016}, {"by": "pmyteh", "score": null, "time": 1476924806, "timestamp": 1476924806000, "title": "", "type": "comment", "url": "", "text": "Because it&#x27;s a sexual activity, illegal if done with pictures of under 18s (but not generally considered in the public interest to prosecute by the CPS if the pics are of the perpetrators themselves and it was consensual - so no &quot;revenge porn&quot; setting or whatever).", "parent": 12746871.0, "deleted": null, "dead": null, "descendants": null, "id": 12749101, "ranking": null, "date": 1476924806000, "year": 2016}, {"by": "qwertyuiop924", "score": null, "time": 1477243755, "timestamp": 1477243755000, "title": "", "type": "comment", "url": "", "text": "It actually generates C, which can then be pushed through the $CC of your choice. Usually GCC. You can examine the generated C by passing a flag to the compiler, telling it not to compile it beyond that stage. However, reading the generated code isn&#x27;t a task for the feint of heart: It generates CPS code, and it uses Cheney on the MTA (a really bizarre hack thought up by Henry Baker, and describe in his paper &quot;CONS should not CONS its arguments, Part II: Cheney on the MTA,&quot; which is essentially required reading if you want to even have a hope of understanding what&#x27;s going on.)<p>However, it makes heavy use of ELF and dynamic linking by default (although you <i>can</i> link statically), and libchicken, the runtime system, depends upon libc by default.<p>So yes, you probably could make use of it for OS work, but it&#x27;s not ideal for that context.", "parent": 12774392.0, "deleted": null, "dead": null, "descendants": null, "id": 12774435, "ranking": null, "date": 1477243755000, "year": 2016}, {"by": "jfoutz", "score": null, "time": 1477508700, "timestamp": 1477508700000, "title": "", "type": "comment", "url": "", "text": "If you don&#x27;t have a solution, or you&#x27;re not happy with your current solution, take a look at parsec style parsing. you can  make a lot of progress with just a few combinators, and those style parsers are pretty easy to read.<p>You can get an implementation working with a fairly high level of confidence that it&#x27;s right.<p>If it&#x27;s not fast enough, make a pretty printer for your AST. Then do a CPS transform (by hand) on your library and parser, so you can make the stack explicit. Make sure the transformed version pretty prints exactly the same way.<p>Then make a third version that prints out the code that should run when parsing a document, rather than doing the parsing directly. You&#x27;ll get a big case switch for each grammar you want to parse. Your pretty printer will help you find many bugs.<p>It&#x27;s a pretty achievable path to get your grammar correct, and then get a specialized parser for it.", "parent": 12798661.0, "deleted": null, "dead": null, "descendants": null, "id": 12799423, "ranking": null, "date": 1477508700000, "year": 2016}, {"by": "int_19h", "score": null, "time": 1477878166, "timestamp": 1477878166000, "title": "", "type": "comment", "url": "", "text": "Well, I don&#x27;t really think that async&#x2F;await is goto. For one thing, it cannot really be reduced to that - it&#x27;s rather a syntactic sugar for CPS.<p>Now, CPS is <i>like</i> goto in that it&#x27;s also a very powerful and occasionally useful tool, that&#x27;s prone to making a mess when used improperly. But async&#x2F;await fixes that exact problem - it lets you get the benefits of CPS without most of its disadvantages in terms of code readability, messiness, and ease of mistake.<p>So it&#x27;s really more like what structured programming (loops etc) were to goto + conditionals back in the day - syntactic sugar that enforces some structure to avoid the mess that&#x27;s otherwise so easy to make.<p>So I don&#x27;t really have much problem with smearing it all over anything. It does solve a very real problem, and it seems to be the most pragmatic available choice that solves that problem (more so than, say, green threads).", "parent": 12832321.0, "deleted": null, "dead": null, "descendants": null, "id": 12833715, "ranking": null, "date": 1477878166000, "year": 2016}, {"by": "int_19h", "score": null, "time": 1477989364, "timestamp": 1477989364000, "title": "", "type": "comment", "url": "", "text": "CPS <i>is</i> one approach to asynchrony, since you can interleave continuations when scheduling them in the event loop. And that&#x27;s exactly what this thing does.<p>As to why it&#x27;s better as part of the core library - I&#x27;d say the biggest benefit is that there&#x27;s a standard API for a future&#x2F;task abstraction. This way, any async library is composable with any other library (in theory; there are still some warts that make it harder than it should be, some of which are described in this article).", "parent": 12840740.0, "deleted": null, "dead": null, "descendants": null, "id": 12844179, "ranking": null, "date": 1477989364000, "year": 2016}, {"by": "dbaupp", "score": null, "time": 1478373102, "timestamp": 1478373102000, "title": "", "type": "comment", "url": "", "text": "The wrapper function controlling the lifetime is exactly why that scheme has both of the problems I mentioned.<p>It all comes down to: how do you write a fn connection() -&gt; DB? You can&#x27;t (or, at least, it doesn&#x27;t make sense to) return the parameter from withDBConnection: the whole point is the wrapper function does the clean-up when it is done, invalidating the connection object. The only way to pass the value along is to have `connection` also take a closure, i.e. manual continuation passing style&#x2F;node.js&#x27;s &quot;closure-hell&quot;. This can, in some cases, be addressed with async&#x2F;await style sugar, but there&#x27;s still semantic (mainly around composition) and performance issues with it.<p>Anyways, going back to the data type: if one has a type Foo with a constructor like fn create() -&gt; Foo, and Foo is updated to contain a database connection, that constructor no longer works, and needs to also be converted to use CPS. That is, the interface of the Foo object has be infected by &quot;private&quot; details, meaning needs to to preemptively decide whether there is any chance of each datatype needing to hold one of these CPS objects.<p>(Of course, the code you suggest works fine in Rust now, and is even used for certain special cases, but that is very different to baking it into the language as a whole new syntactic construct.)", "parent": 12880865.0, "deleted": null, "dead": null, "descendants": null, "id": 12881351, "ranking": null, "date": 1478373102000, "year": 2016}, {"by": "quotemstr", "score": null, "time": 1478495855, "timestamp": 1478495855000, "title": "", "type": "comment", "url": "", "text": "Who cares how it&#x27;s implemented? Python lets you write straight-line code that does more than one IO-bound thing at a time. So does Haskell. That one is using a CPS transform under the hood and the other stack-switching via OS threads is irrelevant.", "parent": 12888953.0, "deleted": null, "dead": null, "descendants": null, "id": 12888972, "ranking": null, "date": 1478495855000, "year": 2016}, {"by": "barrkel", "score": null, "time": 1478533379, "timestamp": 1478533379000, "title": "", "type": "comment", "url": "", "text": "Green threads &#x2F; coroutines &#x2F; fibers are  isomorphic with async keyword transparently implemented as a continuation passing style transform, which is how async callbacks usually work. Actual CPU-style stacks in a green thread scenario are nested closure activation records in an explicit continuation passing style scenario, and are implicit closure activation records (but look like stacks) when using an &#x27;async&#x27; compiler-implemented CPS.<p>Properly composed awaits (where each function entered is entered via an await) build a linked list of activation records in the continuations as they drill down. This linked list is the same as the stack (i.e. serves the same purpose and contains the same data in slightly different layout) in a green threads scenario.<p>What makes all these things different is how much they expose the underlying mechanics, and the metaphors they use in that exposition. But they&#x27;re not orthogonal.<p>(If you meant &#x27;async&#x27; as in async IO explicitly, rather than the async &#x2F; await keyword with CPS transform as implemented in C#, Python, Javascript, etc., then apologies.)", "parent": 12890313.0, "deleted": null, "dead": null, "descendants": null, "id": 12891888, "ranking": null, "date": 1478533379000, "year": 2016}, {"by": "gpderetta", "score": null, "time": 1478859222, "timestamp": 1478859222000, "title": "", "type": "comment", "url": "", "text": "Amen, they have the same expressive power.<p>The thing is that exceptions do not require the manual CPS transform required to handle Result objects, which results in nicer code.<p>Even with syntactic sugar like do notation, the syntax is still different from &#x27;normal&#x27; code.<p>Also the escape hatch to unchecked exceptions is convenient too (then again Rust has some form of it already).", "parent": 12925586.0, "deleted": null, "dead": null, "descendants": null, "id": 12929374, "ranking": null, "date": 1478859222000, "year": 2016}, {"by": "guelo", "score": null, "time": 1479397754, "timestamp": 1479397754000, "title": "", "type": "comment", "url": "", "text": "Just a side point that exit polls are unreliable. Most academic studies of elections wait until the CPS and voter file data comes out.", "parent": 12977633.0, "deleted": null, "dead": null, "descendants": null, "id": 12978455, "ranking": null, "date": 1479397754000, "year": 2016}, {"by": "pbhjpbhj", "score": null, "time": 1479417423, "timestamp": 1479417423000, "title": "", "type": "comment", "url": "", "text": "This doesn&#x27;t read as very convincing to me. Do you have experience of the justice system?<p>There&#x27;s no way the CPS in the UK would take a &quot;well he was probably in the general area based on his number-plate, and he reads the Toadygraph newspaper and is in the 52% who are for Brexit&quot;, even along with matching a general profile for criminals, and seek a prosecution on that basis. Not to mention it would be a huge miscarriage of justice to convict. And that the courts don&#x27;t have time for arsing around with people who may have a tenuous link to an area where a crime may have been committed; we don&#x27;t have time, seemingly, for the &quot;certain&quot; cases.<p>But what about the people who don&#x27;t support racism&#x2F;xenophobia, read a mix of news sources, aren&#x27;t male (and so don&#x27;t match with crime profiling). Are you saying their argument for not needing strong encryption is valid? That would seem to be a corollary of your hypothetical situation, you&#x27;ve cherry picked long-shot situations compounded together that would lead to a case laughed out of court - no motive, no evidence, no credible witnesses.<p>&gt;Still think you have nothing to hide? &#x2F;&#x2F;<p>Seems like ~99% of people reading that who weren&#x27;t convinced before hand would say &quot;yes&quot;.<p>Also, if they&#x27;re savvy they know that the store where you went has your MAC address logged for customer tracking and corroborates your story (due to &quot;privacy violation&quot;), the car-park away from the scene on their number-plate cam shows you stayed in the area long after the alleged crime and so weren&#x27;t fleeing, another shop has you on their instore tapes at the time the police say the crime was committed.<p>Now the Toadygraph has picked up your story and someone leaked that you wouldn&#x27;t have been picked up if you weren&#x27;t a reader; the Barclay brothers are threatening to pull their Tory party funding and so the PM is putting pressure on the presiding Chief of Police to make an example of the department responsible.<p>Lawyers are starting to contact you (they got your info because you left your friend list open on Facebook) and are offering to lodge a case for unlawful arrest for you and the compensation they&#x27;re suggesting looks promising ...<p>Meanwhile people are wondering why the police didn&#x27;t catch the perp; the police say it&#x27;s because they don&#x27;t have access to all the data they need due to public privacy concerns ...", "parent": 12980027.0, "deleted": null, "dead": null, "descendants": null, "id": 12981690, "ranking": null, "date": 1479417423000, "year": 2016}, {"by": "DanBC", "score": null, "time": 1479802122, "timestamp": 1479802122000, "title": "", "type": "comment", "url": "", "text": "&gt; Also, did the people who made this up think it was a joke? I really don&#x27;t see how else a hair brain idea like this could be made.<p>No, there are people who have their children removed who sincerely believe there&#x27;s a shadowy organisation who steals babies for paedophile rings, or to sell babies.<p>When you look at people who have CPS involved in their families you&#x27;re going to find a larger proportion of people consumed by conspiracy theory.  That sometimes makes them aggressive to people who want to make simple checks, which increases the amount of scrutiny the family comes under.<p>I hate linking to videos because they often identify the children, but here&#x27;s one:<p><a href=\"https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=MNBv6Z8ZSPQ\" rel=\"nofollow\">https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=MNBv6Z8ZSPQ</a><p>A Google search for [cps pedophile] will return many many hits.", "parent": 13011934.0, "deleted": null, "dead": null, "descendants": null, "id": 13012501, "ranking": null, "date": 1479802122000, "year": 2016}, {"by": "jcrites", "score": null, "time": 1479876755, "timestamp": 1479876755000, "title": "", "type": "comment", "url": "", "text": "The fact that two styles or concepts are formally dual does not make them equally practical or useful in all circumstances.<p>Consider: in calling conventions, the continuation passing style is dual to the &quot;direct&quot; calling convention (i.e., call stack with return values); the call-by-name style is dual to call-by-value style; Lambda Calculus and Turing Machines are dual in their ability to compute all effectively calculable functions.<p>These dualities do not mean it&#x27;s equally practical to build systems in both ways. Sometimes one approach ends up being more practically useful.<p>Most programmers prefer to use the direct calling convention, and find complex continuation passing style to be difficult to read and maintain. JavaScript programmers may be familiar with the pain of CPS due to excessive use of callbacks (not strictly CPS but has similar drawbacks). Similarly, writing code purely in call-by-name style can be confusing and have difficult to predict performance impacts (e.g., Haskell lazy evaluation semantics).<p>In their article the article &quot;On the Duality of Operating System Structures&quot;, Lauer and Needham present a similar conclusion [3]:<p>&gt; &quot;The principal conclusion we will draw from these observations is that the considerations for choosing which model to adopt in a given system [...] [are] a function of which set of primitive operations and mechanisms are easier to build or better suited to the constraints imposed by the machine architecture and hardware.&quot;<p>In that passage they are describing message passing vs. procedure call systems, and I interpret this to be their acknowledgment that, though the systems are dual, one architecture or another is more appropriate in certain circumstances.<p>Getting back to our original topic: this thread was about the decision of a Rust library to offer async or sync IO as its choice of primary primitive. I think async is the better general-purpose choice, because it&#x27;s clean, simply, and straightforward to expose a synchronous interface on top of an async interfaces with futures; and the other way around is messy and difficult.<p>Can you elaborate on the lightweight co-routine library that can be used to convert anything synchronous into async? I&#x27;m curious about that, because Rust previously had support for coroutines (green threads), and decided to remove them due to a number of problems [1]. Meanwhile, Rust developers were able to devise a zero-cost futures abstraction on top of asynchronous IO [2]. Unlikely the problematic green threads strategy, this approach doesn&#x27;t impose any complicated constraints on the systems that use it (FFI requirements), and doesn&#x27;t add runtime overhead.<p>What co-routine library would you recommend that avoids the downsides in [1]?<p>[1] <a href=\"https:&#x2F;&#x2F;github.com&#x2F;aturon&#x2F;rfcs&#x2F;blob&#x2F;remove-runtime&#x2F;active&#x2F;0000-remove-runtime.md\" rel=\"nofollow\">https:&#x2F;&#x2F;github.com&#x2F;aturon&#x2F;rfcs&#x2F;blob&#x2F;remove-runtime&#x2F;active&#x2F;00...</a> describes some pretty tricky challenges.<p>[2] <a href=\"https:&#x2F;&#x2F;aturon.github.io&#x2F;blog&#x2F;2016&#x2F;08&#x2F;11&#x2F;futures&#x2F;\" rel=\"nofollow\">https:&#x2F;&#x2F;aturon.github.io&#x2F;blog&#x2F;2016&#x2F;08&#x2F;11&#x2F;futures&#x2F;</a><p>[3] <a href=\"https:&#x2F;&#x2F;pdfs.semanticscholar.org&#x2F;2948&#x2F;a0d014852ba47dd115fcc70202c840d71cac.pdf\" rel=\"nofollow\">https:&#x2F;&#x2F;pdfs.semanticscholar.org&#x2F;2948&#x2F;a0d014852ba47dd115fcc7...</a>", "parent": 12974112.0, "deleted": null, "dead": null, "descendants": null, "id": 13020144, "ranking": null, "date": 1479876755000, "year": 2016}, {"by": "pbhjpbhj", "score": null, "time": 1479914048, "timestamp": 1479914048000, "title": "", "type": "comment", "url": "", "text": "Which is why the measure used for criminal law is beyond reasonable doubt: if there is no other evidence than an historic visit to a domain that the police can&#x27;t show contained criminal content then there&#x27;s not going to be a conviction (indeed the CPS wouldn&#x27;t even entertain carrying such a case). If on looking at your hard drive the police then find a cache of content supporting criminal activity you&#x27;re certainly going to have a hard time if you&#x27;re innocent.<p>Do you know of any UK caselaw covering situations where people were convicted on the basis of having visited a particular domain and no corroborating evidence was found? Would be interested in reading how that went down.", "parent": 13022763.0, "deleted": null, "dead": null, "descendants": null, "id": 13023155, "ranking": null, "date": 1479914048000, "year": 2016}, {"by": "DanBC", "score": null, "time": 1479994318, "timestamp": 1479994318000, "title": "", "type": "comment", "url": "", "text": "The &quot;evil paedophile elites are kidnapping children to abuse them&quot; (alternatively, CPS kidnap children to sell for adoption) conspiracy theory has existed for a long time.<p>Six years ago: <a href=\"https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=dh-dNAby174\" rel=\"nofollow\">https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=dh-dNAby174</a><p>Four years ago: <a href=\"https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=C5LyzuVUweU\" rel=\"nofollow\">https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=C5LyzuVUweU</a><p>Eight years ago: <a href=\"https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=s_C75RO6LL4\" rel=\"nofollow\">https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=s_C75RO6LL4</a><p>Once the conspiracy theory exists you&#x27;re going to get a mix of people who really believe it finding subreddits to share &quot;proof&quot;; trolls who like the lulz; people who don&#x27;t know and don&#x27;t care but who hate that politician and will share anything negative about them; and baffled people on the outside who can&#x27;t tell the difference and can&#x27;t understand how anyone can think that politicians order children for abuse by email.", "parent": 13030158.0, "deleted": null, "dead": null, "descendants": null, "id": 13030219, "ranking": null, "date": 1479994318000, "year": 2016}, {"by": "pbhjpbhj", "score": null, "time": 1480086569, "timestamp": 1480086569000, "title": "", "type": "comment", "url": "", "text": "Why do you want to watch me through the window. You can come and look if you want as long as you&#x27;re not doing it to perv over me I couldn&#x27;t really care less.<p>To keep the analogy don&#x27;t we need to add two provisos though: you can&#x27;t tell anyone about it or you lose your job and face prosecution (unless you can convince the CPS that there&#x27;s a case against me, then you have your say in court); and you&#x27;ll need to convince a judge that you have a legal need, that also serves the public interest, to observe me.<p>&gt;Our email conversations with our friends and family, our video chats etc should be private. (They&#x27;re not of course, they&#x27;re all intercepted and stored forever, but they should be private). &#x2F;&#x2F;<p>AIUI the UK Investigatory Powers Act is storing domains visited for a limited time and requires a warrant to enable access, access then only being granted to officers of a particular standing (so they can&#x27;t pass the details around and the named officer is responsible if the info is leaked). Am I getting the wrong message? I&#x27;ve not had time to read the Act yet.<p>Security services are almost certainly able to access that data, but then that&#x27;s been true for a long time and is covered by far more generic laws, the IPA isn&#x27;t addressing that (is it?).<p>tl;dr - if I don&#x27;t care if you sit and watch me watching Masterchef, or playing on Steam, or if you read my emails to customers, or see what I buy (just like you can if I go to a shop), then ... is there anything left that you can say to convince me I should be hiding what I do online. &quot;I don&#x27;t hide what I do IRL, why hide online&quot;?", "parent": 13036525.0, "deleted": null, "dead": null, "descendants": null, "id": 13037206, "ranking": null, "date": 1480086569000, "year": 2016}, {"by": "tn13", "score": null, "time": 1480728886, "timestamp": 1480728886000, "title": "", "type": "comment", "url": "", "text": "It sounds like common sense but education remains a heavily regulation sector in USA and lets not even get started with child related regulation.<p>I am worried that cop visits, CPS visits etc. etc. might deter parents from doing this especially given that teachers union is a powerful political force.<p>Problem with America&#x27;s education is entirely some nonsensical level of &quot;we know what is good for your kids&quot; regulation that is simply taking out freedom from parents.", "parent": 13091832.0, "deleted": null, "dead": null, "descendants": null, "id": 13093715, "ranking": null, "date": 1480728886000, "year": 2016}, {"by": "ohyoutravel", "score": null, "time": 1480948655, "timestamp": 1480948655000, "title": "", "type": "comment", "url": "", "text": "This is what rational me says I should do, because it makes sense. But I can&#x27;t imagine my wife understanding, and the questions at pre-school, etc. Assuming it was a small burn, because that&#x27;s what would cause a child to cry. Plus I might hate myself for doing it. It&#x27;s a short jump from &quot;I touched my son&#x27;s hand to the hot stove to teach him it&#x27;s bad&quot; to CPS knocking on my door.", "parent": 13105528.0, "deleted": null, "dead": null, "descendants": null, "id": 13105562, "ranking": null, "date": 1480948655000, "year": 2016}, {"by": "omaranto", "score": null, "time": 1481236627, "timestamp": 1481236627000, "title": "", "type": "comment", "url": "", "text": "An example of a language implementation that does full TCO and targets the JVM: <a href=\"http:&#x2F;&#x2F;sisc-scheme.org&#x2F;\" rel=\"nofollow\">http:&#x2F;&#x2F;sisc-scheme.org&#x2F;</a><p>I couldn&#x27;t find this right away, but vaguely recall reading SISC transforms to CPS to anable this (and call&#x2F;cc).<p>I think Kawa scheme supports two calling conventions: the standard JVM one and a second one for which it can do full TCO. The second one is a bit slower so the default in Kawa is not to do full TCO.", "parent": 13132188.0, "deleted": null, "dead": null, "descendants": null, "id": 13134954, "ranking": null, "date": 1481236627000, "year": 2016}, {"by": "drzaiusapelord", "score": null, "time": 1482245145, "timestamp": 1482245145000, "title": "", "type": "comment", "url": "", "text": "Everyone seems to be obsessed with paying more into the education system. Chicago Public Schools have an average  teachers salary of around $75,000. This in a city where the average household income is around $43,000. Clearly the money is there and teaching in Chicago isn&#x27;t some poverty inducing measure.<p>The outcomes are fairly poor. For students that bother with the ACT the average score is 18, but for Illinois as a whole its 21. 18 is a score that only gets you into the most poorly ranked of colleges. CPS teachers also average 18-19 on the ACT as well.  Graduation rate floats are 50% and the powerful Chicago teachers union fights against any performance testing of teachers impossible to implement.<p>The reality is that we absolutely don&#x27;t need more education or more education dollars. We need higher quality education. Public sector unions have made sure to make this all about tax dollars, when it should be about teacher performance and student outcomes. This means teachers taking responsibility and administrators firing poor performing teachers. It means a lot of politically difficult things, thus why it doesn&#x27;t really happen and why anyone with means in Chicago goes to private or charter schools. Or more commonly, white collar professionals move to the suburbs when they have children.<p>Also the mayor just wrote a op-ed piece against vouchers for private schools. What public school do his kids go to? None. They go to private school in Chicago.", "parent": 13219535.0, "deleted": null, "dead": null, "descendants": null, "id": 13220191, "ranking": null, "date": 1482245145000, "year": 2016}, {"by": "upen", "score": 1.0, "time": 1483028634, "timestamp": 1483028634000, "title": "Streamlining the Internet of Things and Other Cyber-Physical Systems", "type": "story", "url": "http://sciencebulletin.org/archives/8692.html", "text": "", "parent": null, "deleted": null, "dead": null, "descendants": 0.0, "id": 13278147, "ranking": null, "date": 1483028634000, "year": 2016}, {"by": "willtim", "score": null, "time": 1483093714, "timestamp": 1483093714000, "title": "", "type": "comment", "url": "", "text": "No Clojure does not have TCO, due to the JVM. It allows you to manually optimise self-recursion via recur. This is not enough for many advanced FP techniques, such as CPS. For example, using CPS and TCO, I can traverse a tree in constant stack space.<p>I agree with the parent that lack of TCO in Clojure is probably not an issue for most.", "parent": 13283634.0, "deleted": null, "dead": null, "descendants": null, "id": 13283682, "ranking": null, "date": 1483093714000, "year": 2016}, {"by": "willtim", "score": null, "time": 1483134241, "timestamp": 1483134241000, "title": "", "type": "comment", "url": "", "text": "No, I have been disputing the following parent claim:<p>&gt; The idea that TCO is needed to &quot;fully&quot; leverage anything is silly.<p>I provided two examples, monads and CPS transforms, which require TCO to fully leverage in a strict language. But really any example where functions are dyamically composed as a pipeline needs TCO to avoid leaking stack. \nYour examples of a couple of test libraries in Clojure hardly constitute evidence that TCO is of limited utility.", "parent": 13287559.0, "deleted": null, "dead": null, "descendants": null, "id": 13287724, "ranking": null, "date": 1483134241000, "year": 2016}, {"by": "willtim", "score": null, "time": 1483171903, "timestamp": 1483171903000, "title": "", "type": "comment", "url": "", "text": "I disagree it is always trivial to work around. Typically trampolines are used, but these have a large efficiency hit, up to 1000 times slower. Not a problem in many scenarios, but clearly not good for e.g. a concurrency monad.\nFor your pipeline example, you gave a trivial statically determined one. Try an example where each function decides the transistion (tail calls the next one). This is of course also what my Monad and CPS examples in essence do.<p>Regarding your comments on replacing function composition with data structures. In essence, this is what trampolining does. But it does have a performance cost and is not appropriate in all cases. IIRC correctly the performance of &quot;Extensible Effects&quot; is still an outstanding issue.\nIncidently, the primary author  of that work, Oleg K, has published a lot of work in which he seeks to avoid intermediate data with &quot;finally tagless&quot;.", "parent": 13288490.0, "deleted": null, "dead": null, "descendants": null, "id": 13290100, "ranking": null, "date": 1483171903000, "year": 2016}, {"by": "gpderetta", "score": null, "time": 1484306034, "timestamp": 1484306034000, "title": "", "type": "comment", "url": "", "text": "Ah, that&#x27;s a common misconception. Even with coroutines you  still want explicit async calls and futures, otherwise if you restrict yourself only sync calls, you either have to artificially serialize operations or have to spawn artificial coroutines.<p>What do you do not want are explicit uses of &#x27;future::then&#x27; and the required manual CPS transform. Instead you want a wait-for-{any,all} future operations.", "parent": 13388004.0, "deleted": null, "dead": null, "descendants": null, "id": 13389954, "ranking": null, "date": 1484306034000, "year": 2017}, {"by": "hajile", "score": null, "time": 1485808744, "timestamp": 1485808744000, "title": "", "type": "comment", "url": "", "text": "&gt; The tail call feature from ES6 is already being revisited because it caused problems<p>Proper tail calls being in the spec don&#x27;t cause problems. Safari shipped with them a while ago. Chrome&#x2F;node has them behind a flag. Google wants them to be explicit and everyone&#x27;s bikeshedding about which bloated syntax is the correct one (or if it should even have its own syntax).<p>The actual debugging issues they talk about are non-issues in my book. Catering to new devs who don&#x27;t understand tail calls is stupid (by that metric, we should get rid of a lot of other things too). We don&#x27;t need stack traces for tail calls that loop (just like we don&#x27;t need them in a for loop). A shadow stack works just fine for CPS (continuous passing systems) and is still better than the debugging tools we have for stuff executing across the event loop (aka nothing worth mentioning).", "parent": 13518956.0, "deleted": null, "dead": null, "descendants": null, "id": 13524790, "ranking": null, "date": 1485808744000, "year": 2017}, {"by": "mbroncano", "score": null, "time": 1486000783, "timestamp": 1486000783000, "title": "", "type": "comment", "url": "", "text": "Yup, one of the things I dearly miss from living in NL and&#x2F;or Spain is really having our kids safely roaming around with no worries of CPS or worse.<p>Here is the US it&#x27;d be mental to allow them more than a hundred feet away.<p>So much for the land of the brave and the free!", "parent": 13547347.0, "deleted": null, "dead": null, "descendants": null, "id": 13547432, "ranking": null, "date": 1486000783000, "year": 2017}, {"by": "jedberg", "score": null, "time": 1486003478, "timestamp": 1486003478000, "title": "", "type": "comment", "url": "", "text": "The biggest issue is the courts.  I have a two year old, and her grandma lives one mile away.  I fully intend to let her walk there by herself when she is 6 or 7.  Crime rate data supports me in that this is perfectly safe.<p>But I&#x27;ll always have this nagging feeling in my mind of some local busybody parent (and there are a lot) reporting me to CPS and then having to defend my decision and hope that I get a data driven judge.", "parent": 13547089.0, "deleted": null, "dead": null, "descendants": null, "id": 13547642, "ranking": null, "date": 1486003478000, "year": 2017}, {"by": "m_mueller", "score": null, "time": 1486005993, "timestamp": 1486005993000, "title": "", "type": "comment", "url": "", "text": "That&#x27;s good to hear. Some of the things I hear from the UK sound at least as authoritarian as the US, so I thought that CPS has similarly harsh measures - apparently it&#x27;s not that big of an issue?", "parent": 13547780.0, "deleted": null, "dead": null, "descendants": null, "id": 13547854, "ranking": null, "date": 1486005993000, "year": 2017}, {"by": "daxfohl", "score": null, "time": 1486024983, "timestamp": 1486024983000, "title": "", "type": "comment", "url": "", "text": "The strange thing is that CPS is considered the enemy here.  It seems like CPS should be a group that listens to the needs of parents and helps build a community to cater to those needs, not some kind of self-important authority figure.  Maybe it should be rebranded as Child Development Services or something.", "parent": 13547089.0, "deleted": null, "dead": null, "descendants": null, "id": 13549054, "ranking": null, "date": 1486024983000, "year": 2017}, {"by": "TheGrumpyBrit", "score": null, "time": 1486037986, "timestamp": 1486037986000, "title": "", "type": "comment", "url": "", "text": "He didn&#x27;t search his backpack without consent - he asked for, and was presumably given, consent.<p>There are certainly scenarios where you should consider the police to be your adversary and enforce every right you have to its fullest extent, but choosing your battles is just as important. The police have far more rights to detain a juvenile compared to an adult, and an unaccompanied 13 year old with a backpack at 5am is out of the ordinary. The officer was already starting from a place with a reasonable assumption that the child may be lost or a runaway, in which case he can probably already take him back home (or to the station for CPS to talk to if he&#x27;s completely uncooperative).<p>Allowing a quick search to confirm that you&#x27;re just pursuing a harmless hobby and are not putting yourself in any danger or likely to be reported missing a couple of hours later, seems like the easiest and fastest way to deal with that particular encounter.", "parent": 13548014.0, "deleted": null, "dead": null, "descendants": null, "id": 13550006, "ranking": null, "date": 1486037986000, "year": 2017}, {"by": "basseq", "score": null, "time": 1486048537, "timestamp": 1486048537000, "title": "", "type": "comment", "url": "", "text": "And then it spitballs. The police &#x2F; CPS will <i>listen</i>, and we&#x27;ve all heard horror stories about &quot;good people&quot; getting slapped with lawsuits, fines, community service[1], or straight up <i>losing their kids</i>[2] because of a system gone mad.<p>And the sad part is that we&#x27;ve been conditioned to it. The parent that lets their kids roam with that kind of societal norm and social pressure? You start wondering...<p>[1] <a href=\"http:&#x2F;&#x2F;www.salon.com&#x2F;2014&#x2F;06&#x2F;03&#x2F;the_day_i_left_my_son_in_the_car&#x2F;\" rel=\"nofollow\">http:&#x2F;&#x2F;www.salon.com&#x2F;2014&#x2F;06&#x2F;03&#x2F;the_day_i_left_my_son_in_the...</a>\n[2] <a href=\"http:&#x2F;&#x2F;www.sunherald.com&#x2F;news&#x2F;special-reports&#x2F;dhs&#x2F;article95083217.html\" rel=\"nofollow\">http:&#x2F;&#x2F;www.sunherald.com&#x2F;news&#x2F;special-reports&#x2F;dhs&#x2F;article950...</a>", "parent": 13550932.0, "deleted": null, "dead": null, "descendants": null, "id": 13551031, "ranking": null, "date": 1486048537000, "year": 2017}, {"by": "hlandau", "score": null, "time": 1486308995, "timestamp": 1486308995000, "title": "", "type": "comment", "url": "", "text": "Personally I like Go; it&#x27;s a very fun language for me. It&#x27;s true that it sometimes feels like a language designed for the precise purpose of writing daemons, but that&#x27;s exactly why I like it.<p>The thing about Go is that its opinions on concurrency are ones I share, to the point where I was practically waiting for something like Go to be invented.\nOther than say, Erlang, I&#x27;m not aware of many alternatives which provide\na) ultra-cheap coroutines (10,000 coroutines? fine!),\nb) an I&#x2F;O system which is seamlessly integrated with that concurrency system (and in a totalitarian manner at that; if you&#x27;re using Go, you&#x27;re using its event-based I&#x2F;O scheduler, no exceptions), and\nc) a rock-solid runtime.<p>[IO SYSTEM.] The imposition of Go&#x27;s I&#x2F;O system is important, because it means all Go code is written using the same I&#x2F;O system, which makes code reuse much more feasible. The chances of you being able to integrate a random OSS library that you discover in say, C++ into your C++ project is much lower:<p>I call design decisions that pervade every line of code in a project &quot;cross-cutting considerations&quot; (CCCs). These are design decisions where changing your mind means rewriting every line of code, or at least reviewing every line to see if it needs rewriting. Your ability to consume a library depends on where your project and the library sit in CCC-space, an n-dimensional space. If your project is written using an asynchronous I&#x2F;O reactor, and the library uses a traditional synchronous, sockets-based programming model, you&#x27;re screwed. You can&#x27;t use that code, unless you maintain a fork (and in that case you&#x27;d have to transform the library into the continuation-passing style, etc.). If the I&#x2F;O is pluggable, you have to go through the effort of plumbing it into the reactor library you&#x27;ve chosen to use, just to be able to consume that library.<p>Not only does &quot;using Go&quot; imply the I&#x2F;O system that goes with it, Go&#x27;s tightness in language design means you don&#x27;t see the feature rejection that you see in a language like C++. C++ isn&#x27;t a language, it&#x27;s a family of languages; everyone chooses their own subset of C++ to code in. Some people think exceptions are bad and avoid them, and some people think templates are bad and avoid them, etc.<p>What this means is that the statement &quot;this library is written in Go&quot; is a hell of a lot more meaningful than the statement &quot;this library is written in C++&quot;. It&#x27;s not just C++ either; Python for example now offers a wide variety of choices for I&#x2F;O, which inflates the CCC-space across which the language&#x27;s ecosystem of libraries are distributed. One library could use asyncio, one something Twisted-like, one synchronous calls, one threads, etc.<p>[COROUTINES.] It&#x27;s the right way to do concurrency. Not the continuation passing style; it&#x27;s truly preposterous that programmers have been made to write in a format originally intended to be implemented as a compiler transformation. Only recently are we seeing languages augmented with async&#x2F;await keywords to allow this transformation to be performed behind the scenes (JavaScript, Python 3, C#). Erlang has been around a long time making the CPS look ridiculous, and later there was Stackless Python, an ignored gift horse to the Python community. Stackless Python failed to be a real alternative to Erlang, Go, etc. because it never managed to get a thriving ecosystem or IIRC, a standard I&#x2F;O system around it.<p>I also perceive that Go has almost completely accidentially obtained some additional fondness for the fact that it produces statically linked, portable binaries. If you&#x27;re shipping only Go code, you may often be able to get away without using containers when they&#x27;d otherwise be essential. You see Go binaries for Linux being distributed officially by OSS projects when normally for Linux that&#x27;s very rare; it&#x27;s left to package managers, and you have distro differences making compatibility potentially tricky.<p>The fact that Go shipped with a standard, configuration-free build system also makes creating new libraries, or bringing in existing ones almost completely frictionless. Even if you think Go is boring as a language, what really makes it stand out is its execution. Just look at how they&#x27;re improving the GC with every release.<p>(This turned into an essay... I guess my ultimate point is that getting a coroutine-based highly-scalable I&#x2F;O programming environment to work as an ecosystem requires you to standardize on one runtime completely and utterly, and be able to trust that runtime with production workloads. The only such systems I can think of which are stack based and which formed successful ecosystems are Go and Erlang; though now we&#x27;re seeing a lot more CPS-based systems using async&#x2F;await annotation, which are probably more than good enough for the same applications. Although I would point out that neither Python 3 nor JavaScript are trying to occupy the multi-thread m:n scheduling space in the same way that Go and (I think?) Erlang are. They&#x27;re constrained to essentially single-thread operation.)", "parent": 13572648.0, "deleted": null, "dead": null, "descendants": null, "id": 13572768, "ranking": null, "date": 1486308995000, "year": 2017}, {"by": "gfisher", "score": null, "time": 1487026322, "timestamp": 1487026322000, "title": "", "type": "comment", "url": "", "text": "I wish it were that easy. I am an ex-foster parent, and the thought of losing my children when I had them as foster children tore me up. It takes months and months of waiting, courts, CPS visits, parent visits; and, all the while, you (the parent) are living in a limbo. Should you plan the Christmas vacation for 3 people or 4? Should you buy birthday gifts a few months out if a gift is on sale? Every single one of the families in my foster placing agency felt the same way.<p>I am sorry, but your statement just doesn&#x27;t hold true at all. I think that when people report facts like those, it makes it that much harder for foster parents, and for the system to recruit parents and volunteers.", "parent": 13638893.0, "deleted": null, "dead": null, "descendants": null, "id": 13639575, "ranking": null, "date": 1487026322000, "year": 2017}, {"by": "nickik", "score": null, "time": 1487230738, "timestamp": 1487230738000, "title": "", "type": "comment", "url": "", "text": "ClojureScript compiles to JavaScript and you can have the exact same CPS style programming, with the exception of missing parallelism of course.<p>Async&#x2F;await are not really what you want either. There is no fundamental reason JS could not have added a CSP model.", "parent": 13653101.0, "deleted": null, "dead": null, "descendants": null, "id": 13658305, "ranking": null, "date": 1487230738000, "year": 2017}, {"by": "losteverything", "score": null, "time": 1487346824, "timestamp": 1487346824000, "title": "", "type": "comment", "url": "", "text": "Comments<p>Ease of selecting and reading &quot;stuff&quot; (and not reading)<p>Subject matter.  I have a degree in math and CPS back in the Herman Hollerith days and enjoy the subject matter.", "parent": 13668870.0, "deleted": null, "dead": null, "descendants": null, "id": 13669046, "ranking": null, "date": 1487346824000, "year": 2017}, {"by": "swsieber", "score": null, "time": 1487354038, "timestamp": 1487354038000, "title": "", "type": "comment", "url": "", "text": "The linked article also leaves out the fact that somebody recognized the mother and called CPS on him (for her history of domestic violence), while the Ars one includes it.<p>It gives a different view to the incident.<p>Edit: Recognized the mother, not the father.", "parent": 13668992.0, "deleted": null, "dead": null, "descendants": null, "id": 13670210, "ranking": null, "date": 1487354038000, "year": 2017}, {"by": "Avenger42", "score": null, "time": 1487356753, "timestamp": 1487356753000, "title": "", "type": "comment", "url": "", "text": "Actually, they recognized the father, it seems:<p>&gt; Someone from a past relationship had recognized Kanongataa on Facebook and reported to CPS that he had domestic violence allegations against him. Kanongataa denies those allegations.", "parent": 13670210.0, "deleted": null, "dead": null, "descendants": null, "id": 13670580, "ranking": null, "date": 1487356753000, "year": 2017}, {"by": "rhizome", "score": null, "time": 1487360923, "timestamp": 1487360923000, "title": "", "type": "comment", "url": "", "text": "Read the article: CPS took their baby away.", "parent": 13668894.0, "deleted": null, "dead": null, "descendants": null, "id": 13671122, "ranking": null, "date": 1487360923000, "year": 2017}, {"by": "cr0sh", "score": null, "time": 1487365608, "timestamp": 1487365608000, "title": "", "type": "comment", "url": "", "text": "If you read the comments below the article, the reason CPS was called was because someone recognised the couple from an earlier case. In 2015, they both were apparently arrested after blowing up a shed in their backyard while attempting to make &quot;honey oil&quot; (hash oil made using a solvent, typically butane or propane). Dome&#x27;s kids (at the time) were taken away by CPS after the incident. Both Dome and her (now) baby-daddy were arrested, along with some other person.", "parent": 13671122.0, "deleted": null, "dead": null, "descendants": null, "id": 13671712, "ranking": null, "date": 1487365608000, "year": 2017}, {"by": "mod", "score": null, "time": 1487369869, "timestamp": 1487369869000, "title": "", "type": "comment", "url": "", "text": "Normally I would assume they had followed up and ensured they were not just accusations, but a confirmed history.<p>But, this is CPS we&#x27;re talking about. They take a lot of kids out of a lot of homes for a lot of sub-par reasons.", "parent": 13671634.0, "deleted": null, "dead": null, "descendants": null, "id": 13672209, "ranking": null, "date": 1487369869000, "year": 2017}, {"by": "danieltillett", "score": null, "time": 1487369956, "timestamp": 1487369956000, "title": "", "type": "comment", "url": "", "text": "I agree that that babies should be taken out of dangerous situations, but was there any evidence that the baby was in harm? How could this possibly be determined by CPS one day after the birth? How much damage is done to the baby and mother by removing the baby from its mother.<p>If this is SOP for CPS imagine how much damage a vindictive ex could cause?", "parent": 13671962.0, "deleted": null, "dead": null, "descendants": null, "id": 13672221, "ranking": null, "date": 1487369956000, "year": 2017}, {"by": "danieltillett", "score": null, "time": 1487370233, "timestamp": 1487370233000, "title": "", "type": "comment", "url": "", "text": "We have a situation where a third party has made an accusation of domestic violence, nobody has yet been convicted, the father denies it, and CPS takes one day to take the baby away from its mother? I would hope it would take more than an accusation from a potentially disgruntled ex-partner to cause this trauma on a mother and a baby.", "parent": 13671934.0, "deleted": null, "dead": null, "descendants": null, "id": 13672255, "ranking": null, "date": 1487370233000, "year": 2017}, {"by": "danieltillett", "score": null, "time": 1487370881, "timestamp": 1487370881000, "title": "", "type": "comment", "url": "", "text": "Assuming the accusation was made in the past then yes they would have a file on him, but he appears to not have been convicted of the offence. I can\u2019t see how it would have been possible to have had the case heard in court given CPS was unaware of the situation until the live streaming and took the baby one day later.<p>As someone with children I would hope it would take a little more than an accusation from a potentially disgruntled ex-partner to have CPS to swoop in and remove my children from their mother.", "parent": 13672238.0, "deleted": null, "dead": null, "descendants": null, "id": 13672318, "ranking": null, "date": 1487370881000, "year": 2017}, {"by": "DanBC", "score": null, "time": 1487372462, "timestamp": 1487372462000, "title": "", "type": "comment", "url": "", "text": "First of all this is likely to be a temporary removal to address immediate risk while an investigation and court case is ongoing. In England this could be voluntary, but would need to go in front of a judge if the parents did not agree to it. There&#x27;s a reasonably high bar to do this, because of the child&#x27;s convention rights.<p>Also, I can&#x27;t speak much about the US system, but in the UK it&#x27;s possible to not be convicted of a crime and still have your children removed for that crime. (I&#x27;ll find an English case that illustrates this later).<p>This is because criminal courts use &quot;beyond all reasonable doubt&quot; and family courts use &quot;balance of probabilities&quot;.  (Yes, it&#x27;s weird. There are some extra protections in place because of this. Removing children is a measure of last resort and should only happen when nothing else will do.)<p>&gt; I can\u2019t see how it would have been possible to have had the case heard in court given CPS was unaware of the situation until the live streaming and took the baby one day later.<p>In the UK there are emergency applications for temporary removals, and long drawn out cases for other removals.  Judges are happy to refuse unless the standards have been met, even if the parents are difficult people.<p>EDIT: very roughly: here&#x27;s a case where the father was accused of sexually abusing his children; he was prosecuted for it and acquitted; the family court had a &quot;finding of fact&quot; session and said that he did in fact do it and child protection followed on. <a href=\"http:&#x2F;&#x2F;www.bailii.org&#x2F;ew&#x2F;cases&#x2F;EWFC&#x2F;OJ&#x2F;2016&#x2F;B95.html\" rel=\"nofollow\">http:&#x2F;&#x2F;www.bailii.org&#x2F;ew&#x2F;cases&#x2F;EWFC&#x2F;OJ&#x2F;2016&#x2F;B95.html</a>", "parent": 13672318.0, "deleted": null, "dead": null, "descendants": null, "id": 13672465, "ranking": null, "date": 1487372462000, "year": 2017}, {"by": "danieltillett", "score": null, "time": 1487378842, "timestamp": 1487378842000, "title": "", "type": "comment", "url": "", "text": "There is a huge difference between a court using the balance of probability in a case of sexual abuse and a third party accusation made against the father for domestic abuse and the CPS swooping in and removing the baby from the mother one day after birth.", "parent": 13672465.0, "deleted": null, "dead": null, "descendants": null, "id": 13672983, "ranking": null, "date": 1487378842000, "year": 2017}, {"by": "hinkley", "score": null, "time": 1488827880, "timestamp": 1488827880000, "title": "", "type": "comment", "url": "", "text": "That&#x27;s an interesting read.  One of only a handful of tech books I&#x27;ve read twice.  It&#x27;s thin and doesn&#x27;t repeat itself all that much so if you read it twice it&#x27;s still faster than reading most tech books once.<p>More recently though I heard someone proved mathematically that CPS can be transformed one-for-one into one of the more conventional models.  That doesn&#x27;t mean it might not still be easier for the humans to deal with however.", "parent": 13804716.0, "deleted": null, "dead": null, "descendants": null, "id": 13805209, "ranking": null, "date": 1488827880000, "year": 2017}, {"by": "hornetblack", "score": null, "time": 1489299392, "timestamp": 1489299392000, "title": "", "type": "comment", "url": "", "text": "From memory I solved it using more CPS and currying. Well manually currying with functions like curry1, curry2, etc...<p>Although I&#x27;m pretty sure you can overload the Fn* traits to implement currying in Rust. (Fn traits are unstable). Which is neat.<p><pre><code>    &#x2F;&#x2F; Something like this:\n    impl&lt;F, A, B, R&gt; (FnOnce(A) -&gt; Curry&lt;F, A, B&gt;)  for  F\n        where F: FnOnce(A, B) -&gt; R,\n    { ... }\n\n    &#x2F;&#x2F; and\n    impl&lt;F, A, B, R&gt; (FnOnce(B) -&gt; R) for Curry&lt;F, A, B&gt;\n        where F: FnOnce(A, B) -&gt; R\n\n</code></pre>\nI think I got it working... but you would need some work for more arguments. (And it worked different on different versions of rust-nightly :&#x2F;)", "parent": 13846709.0, "deleted": null, "dead": null, "descendants": null, "id": 13849370, "ranking": null, "date": 1489299392000, "year": 2017}, {"by": "VLM", "score": null, "time": 1489496625, "timestamp": 1489496625000, "title": "", "type": "comment", "url": "", "text": "&quot;Black Friday&quot;<p>The fleet issue is critical to the failure of shared cars.  The problem of the rich young urbanite traveling a few blocks on a statistically random time frame (bar hopping perhaps) is solved by car sharing services, yet they&#x27;re a vanishingly small fraction of the population.  For example the kind of employer that is so geologic in thinking that they don&#x27;t allow remote work is going to be so backwards as to forbid flex time hours, so two hundred 9-5 jobs implies someone has to own two hundred individual cars, and if the employees don&#x27;t directly own the two hundred cars all you get is a useless middleman skimming off profit.  Public grade school isn&#x27;t remote or flex time and observation shows roughly one parent-car per kid.  No matter how time flexible life is for rich young adult urbanites, normie life isn&#x27;t like that.  Too much of normie life involves hundreds to tens of thousands of people running on a tight fixed schedule.<p>Back in the bad old days of limited long distance telecom bandwidth, you couldn&#x27;t financially provision to survive mothers day, for example, so on mothers day people got fast busy signals sometimes.  That also made it extremely expensive and encouraged companies to set up their own LD routings.  In the long run this will happen with shared cars and after enough firings for failure to get to work and enough CPS calls for failure to pick up little kids people will get tired of the expense of shared cars and save a lot of money by owning their own car.", "parent": 13866932.0, "deleted": null, "dead": null, "descendants": null, "id": 13867137, "ranking": null, "date": 1489496625000, "year": 2017}, {"by": "dreamcompiler", "score": null, "time": 1489538431, "timestamp": 1489538431000, "title": "", "type": "comment", "url": "", "text": "There are two very different (yet of course functionally equivalent) paradigms for general computation: Turing Machines and Lambda Calculus (Turing vs. Church). All schools teach TMs but not all teach LC. Which is a shame, because some wonderful insights like Functional Programming and Lisp and CPS come mostly from the LC paradigm.", "parent": 13835818.0, "deleted": null, "dead": null, "descendants": null, "id": 13872906, "ranking": null, "date": 1489538431000, "year": 2017}, {"by": "__s", "score": null, "time": 1489840816, "timestamp": 1489840816000, "title": "", "type": "comment", "url": "", "text": "I&#x27;ve got a Befunge JIT compiling directly to WASM: <a href=\"https:&#x2F;&#x2F;github.com&#x2F;serprex&#x2F;Befunge&#x2F;tree&#x2F;master&#x2F;js\" rel=\"nofollow\">https:&#x2F;&#x2F;github.com&#x2F;serprex&#x2F;Befunge&#x2F;tree&#x2F;master&#x2F;js</a> (hosted: <a href=\"http:&#x2F;&#x2F;etg.dek.im&#x2F;funge&#x2F;funge.html\" rel=\"nofollow\">http:&#x2F;&#x2F;etg.dek.im&#x2F;funge&#x2F;funge.html</a> )<p>Maybe I should move on to something a little more practical<p>Note that there seems a lot of misinterpretation of WASM as a good VM bytecode target. You&#x27;re stuck with i32&#x2F;i64&#x2F;f32&#x2F;f64. Strings have to be manually managed through byte indexing. There&#x27;s no GC. Targeting WASM directly is really close to targeting an actual ISA directly. So efficient implementation to WASM is going to come off closer to something like LuaJIT. It also doesn&#x27;t facillitate self modifying code so lazily compiling will imply either using a trampoline to jump between multiple WASM modules or recompiling everything<p>There&#x27;s no jump instruction in WASM, so arbitrary goto has to be converted into loop-and-switch. The Befunge VM I linked breaks that down to only relooping between basic blocks. Browsers optimize that pattern. There&#x27;s room to play around &amp; see if they can optimize something like a CPS VM. Instead of dispatching based on the value of a memory cell, encode an instruction as a &#x27;store-next-instruction to local, break to instruction implementation (if not short bytecode), have that instruction end by looping back, where we switch to next instruction which repeats the store-next-instruction to local&#x27;. Where next-instruction encodes this dance repeatedly. Hot areas of the VM may then be inlined by the browser&#x27;s JIT<p>To summarize the above paragraph: instead of compiling to bytecode, compile to threaded gotos", "parent": 13900104.0, "deleted": null, "dead": null, "descendants": null, "id": 13901019, "ranking": null, "date": 1489840816000, "year": 2017}, {"by": "addicted", "score": null, "time": 1490185154, "timestamp": 1490185154000, "title": "", "type": "comment", "url": "", "text": "Can&#x27;t you checksum verify installers and packages? You can&#x27;t do that with these curlpipesudos.<p>You are taking a leap of faith anytime you install something however you do it. The problem with the CPS seems to me that it&#x27;s much easier for you to correctly trust the originator of the content, but have the content hijacked by a 3rd malicious party.", "parent": 13927860.0, "deleted": null, "dead": null, "descendants": null, "id": 13930278, "ranking": null, "date": 1490185154000, "year": 2017}, {"by": "jnordwick", "score": null, "time": 1490511353, "timestamp": 1490511353000, "title": "", "type": "comment", "url": "", "text": "This seems too simple. Then what is all the business of using them to contain side effects, like the IO system? Others talk about controlling program flow.<p>What you described is flatMap in Java, or join() in other languages. Somebody above went into the CPS transform of a program. I&#x27;m so lost at how simple this is versus how complex all the descriptions are.", "parent": 13959511.0, "deleted": null, "dead": null, "descendants": null, "id": 13959583, "ranking": null, "date": 1490511353000, "year": 2017}, {"by": "tialaramex", "score": null, "time": 1490525897, "timestamp": 1490525897000, "title": "", "type": "comment", "url": "", "text": "Of course, this only works if the CA _actually_ makes sure they don&#x27;t use the root you pinned for DV issuance. Just because it says &quot;Ultra Great EV root&quot; in the CN doesn&#x27;t provide you that security, and it won&#x27;t count as mis-issuance so long as the DV certificate doesn&#x27;t have an EV policy OID baked into it.<p>If we&#x27;d asked in 2015, Symantec would probably have pointed us to CrossCert&#x27;s CPS which said they only use certain Symantec roots. In fact Symantec had no mechanism in place enforcing that, CrossCert could and did issue from any Symantec root, whether it was on the list or not. So, if you chose a root thinking &quot;I don&#x27;t trust CrossCert, but they don&#x27;t use this root so it&#x27;s fine&quot;, oops, too bad.", "parent": 13942041.0, "deleted": null, "dead": null, "descendants": null, "id": 13960131, "ranking": null, "date": 1490525897000, "year": 2017}, {"by": "pka", "score": null, "time": 1490601881, "timestamp": 1490601881000, "title": "", "type": "comment", "url": "", "text": "Compare again:<p><pre><code>    bind(StatefulFunction&lt;a&gt;, a =&gt; StatefulFunction&lt;b&gt;) =&gt; StatefulFunction&lt;b&gt;\n    flatMap(List&lt;a&gt;, a =&gt; List&lt;b&gt;) =&gt; List&lt;b&gt;\n</code></pre>\nLook at the structure. Don&#x27;t pay attention to what List or StatefulFunction actually are, that&#x27;s not important here. The thing to focus on is that if you can provide this kind of general function for <i>something</i>, then that something is probably a monad.<p>I.e. a function that takes in Something&lt;a&gt; and a function from a to Something&lt;b&gt; and produces Something&lt;b&gt;.<p>So why is this pattern so useful that everybody freaks out about it?<p>Well, that syntax sugar I showed you at the end, let&#x27;s look at it again:<p><pre><code>    do\n      a &lt;- f\n      b &lt;- g a\n      h b\n</code></pre>\nThe general idea here is that &quot;a &lt;- f&quot; is translated into bind(f, a =&gt; ...). The whole block would turn into<p><pre><code>    bind(f, a =&gt; bind(g(a), b =&gt; h(b)));\n</code></pre>\nBear with me. Now, let&#x27;s look at one more example:<p><pre><code>    bind(Optional&lt;a&gt;, a =&gt; Optional&lt;b&gt;) =&gt; Optional&lt;b&gt;\n</code></pre>\nOptional&lt;a&gt; is just a data type that <i>maybe</i> contains an &lt;a&gt;. Think of it as a safe replacement for null. So, bind for Optional looks at the first argumenta and passes it on to the function and returns its result, if the Optional is not empty. If it is, bind also returns an empty Optional.<p>Now let&#x27; say we have a bunch of Optional producing functions:<p><pre><code>    getUser(userId)    =&gt; Optional&lt;User&gt;      &#x2F;&#x2F; user may not exist\n    getAddress(User)   =&gt; Optional&lt;Address&gt;   &#x2F;&#x2F; user may not have entered an address\n    getStreet(Address) =&gt; Optional&lt;Street&gt;    &#x2F;&#x2F; address may be weird\n</code></pre>\nNow ok, what would we do in a language without monads?<p><pre><code>   user = getUser(userId);\n\n   if (user.hasValue()) {\n     address = getAddress(user.getValue());\n\n     if (address.hasValue()) {\n       street = getStreet(address);\n\n       &#x2F;&#x2F; do something\n     }\n  }\n</code></pre>\nWell, that&#x27;s not great. But because Optional is a monad and we have that nifty bind sugar, that&#x27;s how that code would look like in Haskell:<p><pre><code>    do\n      user    &lt;- getUser userId\n      address &lt;- getAddress user\n      street  &lt;- getStreet address\n</code></pre>\nMuch better.<p>More generally, it turns out monads are literally everywhere. The guy that talked about CPS transformed programs being monads is right - that&#x27;s the continuation monad.<p>Let&#x27;s look at that. If you know node.js, you know that its API is basically asynchronous:<p><pre><code>    fs.open(path, callback)\n    fs.read(fd, ..., callback)\n    fs.close(fs, callback)\n</code></pre>\nNow, let&#x27;s read some file in node:<p><pre><code>    fs.open(path, function(fd) {\n      fs.read(fd, ..., function(result) {\n        &#x2F;&#x2F; do something with result\n\n        fs.close(fs, function() {\n          &#x2F;&#x2F; file closed\n        }\n      }\n    }\n</code></pre>\nWell, that&#x27;s ridiculous. But becase we have the continuation monad, we can write exactly the same thing in Haskell:<p><pre><code>    do\n      fd &lt;- open path\n      result &lt;- read fd\n\n      &#x2F;&#x2F; do something\n\n      close fd\n</code></pre>\nSo why are monads so useful? Because they are so general. They can be used to abstract over many many things that exhibit the basic pattern (S&lt;a&gt;, a =&gt; S&lt;b&gt;) =&gt; S&lt;b&gt;. Not to mention that when you write a function to generally work with monads, it will work for ANY monad. List, State, Maybe, Cont - doesn&#x27;t matter.<p>There&#x27;s not much more to it than recognizing that pattern. That&#x27;s it. Once you see that <i>that&#x27;s literally it</i> you&#x27;ll start seeing monads everywhere :)", "parent": 13965707.0, "deleted": null, "dead": null, "descendants": null, "id": 13965917, "ranking": null, "date": 1490601881000, "year": 2017}, {"by": "mschuster91", "score": null, "time": 1491645351, "timestamp": 1491645351000, "title": "", "type": "comment", "url": "", "text": "&gt; \u201cWe need to recognize that children are movement-based,\u201d said Brian Gatens, the superintendent of schools in Emerson, N.J. \u201cIn schools, we sometimes are pushing against human nature in asking them to sit still and be quiet all the time.\u201d<p>Exactly: Schools are bending and breaking kids so that they will be perfectly quiet persons later in life - let&#x27;s face it, not many people will do work that will require moving around in the future. Also, these kids are likely to not rebel later in life or question authorities, when their resistance has been broken early in their youth.<p>Honestly, I&#x27;m 25 and I had ample time after school to go out and play (or, in later ages, get wasted). Now, when I&#x27;m looking at young school children - what the fuck? Sitting all day in school (in Germany we call it &quot;Ganztagsschule&quot;) and after school on homework? Or in the US, where regular threads on HN show up about parents getting into all sorts of trouble with CPS because they let their kids play unsupervised? What dystopia is this?<p>And this &quot;let the kids have some movement through the school day&quot; stuff from the article. What a looooad of bullshxt, it&#x27;s the same &quot;bend and break them&quot; again. Let the children have time on their fucking own and not their entire wake day dictated from above (0800-1600 or such school, then sports being forced by their parents from 1600-1900 and then homework until midnight).<p>I&#x27;m scared for the future of our society.<p>Oh, and the biggest joke from the article is this masterpiece:<p>&gt; \u201cWe are not thinking about the child as an entire person, how physical activity helps them cope with the stresses of school and actually benefits them in the classroom.\u201d<p>What the ...? THEN REDUCE THE STRESS THEY GET IN SCHOOLS YOU ... INSTEAD OF &quot;TREATING&quot; THE SYMPTOMS.", "parent": 14065710.0, "deleted": null, "dead": null, "descendants": null, "id": 14066206, "ranking": null, "date": 1491645351000, "year": 2017}, {"by": "nommm-nommm", "score": null, "time": 1493168074, "timestamp": 1493168074000, "title": "", "type": "comment", "url": "", "text": "Its an open secret, if you want to murder someone just run them over with your car. As long as you don&#x27;t flee and aren&#x27;t drunk you can just shrug and say &quot;my bad&quot; and you&#x27;ll almost certainly get off with minimal to no penalities.<p><a href=\"http:&#x2F;&#x2F;www.philly.com&#x2F;philly&#x2F;columnists&#x2F;inga_saffron&#x2F;If-you-want-to-kill-someone-and-not-get-punished-use-a-car.html\" rel=\"nofollow\">http:&#x2F;&#x2F;www.philly.com&#x2F;philly&#x2F;columnists&#x2F;inga_saffron&#x2F;If-you-...</a><p>&gt;How many of this year\u2019s 63 fatalities will result in criminal charges? The four November deaths, some of the most horrific of 2016, are all still under investigation, according to police. But if history proves any guide, only in those cases in which the motorists committed other crimes, such as driving drunk or fleeing the scene, will police hold drivers accountable.<p>&gt;although  statistics are hard to come by,  every transportation official I spoke with cited anecdotal evidence suggesting that the odds of drivers&#x27; avoiding repercussions in fatal car crashes far outweighed the likelihood of criminal charges.<p>&gt;\u201cIf the driver isn\u2019t drunk, it just gets declared a terrible accident,\u201d says Andrew Stober, who helped oversee Mayor Michael Nutter\u2019s transportation office. Even when the driver is found to have been speeding, there are often no charges, adds Kate Fillin-Yeh, who runs the National Association of City Transportation Officials.<p><a href=\"https:&#x2F;&#x2F;www.vice.com&#x2F;en_us&#x2F;article&#x2F;you-can-kill-anyone-you-want-with-your-car-as-long-as-you-dont-really-mean-it\" rel=\"nofollow\">https:&#x2F;&#x2F;www.vice.com&#x2F;en_us&#x2F;article&#x2F;you-can-kill-anyone-you-w...</a><p>&gt;According to a recent report by the League of American Bicyclists, barely one in five drivers who end bicyclists\u2019 lives are charged with a crime. The low prosecution rate isn\u2019t a secret and has inspired many to wonder whether plowing into a cyclist with a car is a low-risk way to commit homicide.<p>&gt;Nationwide, incidents like Cann\u2019s often result in misdemeanor charges, tickets, or nothing. Leah Shahum from the San Francisco Bike Coalition told the New York Times last year that her organization does \u201cnot know of a single case of a cyclist fatality in which the driver was prosecuted, except for DUI or hit-and-run.\u201d Kristin Smith, also of the SF Coalition, says that \u201cLast year, four people were hit and killed in San Francisco and no charges were ever brought,\u201d including for a collision captured on video that showed the driver was at fault. Last year in New York City, the bike-advocacy organization Time\u2019s Up pushed for changes in police investigations of bicyclist deaths by painting chalk-body outlines on streets, marked with words familiar from NYPD reports: \u201cNo Criminality Suspected.\u201d<p><a href=\"https:&#x2F;&#x2F;www.citylab.com&#x2F;transportation&#x2F;2012&#x2F;04&#x2F;invention-jaywalking&#x2F;1837&#x2F;\" rel=\"nofollow\">https:&#x2F;&#x2F;www.citylab.com&#x2F;transportation&#x2F;2012&#x2F;04&#x2F;invention-jay...</a><p>&gt;This time, the driver of a Jaguar traveling down 42nd Street in Manhattan struck another car and lost control, flipping onto the sidewalk and striking several pedestrians. Amazingly, given that this is one of the most crowded parts of town, no one was killed. Less amazingly, given the New York Police Department\u2019s general approach toward car-pedestrian or car-bicycle crashes, the driver will apparently not face any criminal charges.<p>&gt;Despite remarkable recent gains in pedestrian safety \u2013 thanks in part to design changes aimed at slowing down drivers \u2013 cars still jump the curb nearly every day. Drivers who kill or maim pedestrians with their vehicles are still only rarely treated as criminals in New York, as long as they are not drunk and do not flee the scene. Even that is sometimes not enough to merit serious charges.<p>&gt;Twenty years ago, an out-of-control driver plowed through New York\u2019s Washington Square Park, killing 5 people and injuring 27 others. That horrific incident caused a public outcry and galvanized advocates in what has become known as the livable streets movement. But the driver, a 74-year-old woman, was not charged with any crime.<p><a href=\"http:&#x2F;&#x2F;startribune.com&#x2F;in-crashes-that-kill-pedestrians-the-majority-of-drivers-don-t-face-charges&#x2F;380345481&#x2F;\" rel=\"nofollow\">http:&#x2F;&#x2F;startribune.com&#x2F;in-crashes-that-kill-pedestrians-the-...</a><p>&gt;Carol Wiggins crossed Territorial Road every day at the crosswalk on her way home from work in Watertown. But the driver of the car that hit her one evening said he didn\u2019t see her until it was too late.<p>&gt;Wiggins never recovered from the traumatic brain injury from the 2011 crash, dying weeks later in a Minneapolis hospital. The driver never faced any charges \u2014 not even a traffic citation.<p>&gt;The decision not to cite the driver who struck Wiggins isn\u2019t unusual. The majority of drivers who killed pedestrians between 2010 and 2014 were not charged, according to Star Tribune analysis of metro area crash data. Those who were charged often faced misdemeanors \u2014 from speeding to careless driving \u2014 with minimal penalties, unless the driver knowingly fled or was intoxicated at the time of the crash.<p>&gt;Charles Roger Lord died after being struck by a van while checking out a Nice Ride bike on a north Minneapolis sidewalk in 2014. The van \u201creportedly driving at a high rate of speed\u201d jumped the curb, hit him and dragged his body across a vacant lot before crashing into a building, according to a police report.<p>&gt;The driver fled, but was later arrested. He said he did not know he had hit someone before fleeing and blamed the crash on problems with the van\u2019s steering. He was never charged.<p><a href=\"http:&#x2F;&#x2F;www.telegraph.co.uk&#x2F;men&#x2F;recreational-cycling&#x2F;why-do-drivers-get-away-with-attempted-murder&#x2F;\" rel=\"nofollow\">http:&#x2F;&#x2F;www.telegraph.co.uk&#x2F;men&#x2F;recreational-cycling&#x2F;why-do-d...</a><p>&gt;Despite the cyclist having clear, unambiguous footage of the incident, the CPS decided there was not enough evidence to prosecute.  The reason, apparently, is that it was a hire car and so they couldn\u2019t say for sure who was driving. Nottinghamshire police say the man and woman who were eligible to drive the car both ignored a legal request to provide driver details despite being summonsed to court. The man got six penalty points and a \u00a3150 fine for failing to provide details and no action was taken over the hit and run.", "parent": 14198931.0, "deleted": null, "dead": null, "descendants": null, "id": 14199644, "ranking": null, "date": 1493168074000, "year": 2017}, {"by": "sreque", "score": null, "time": 1493919501, "timestamp": 1493919501000, "title": "", "type": "comment", "url": "", "text": "I can only guess, but it is in general very difficult to retrofit what is essentially green threading, coroutines, and continuations into a runtime that was built without those features. Scala has tried at least a couple of times, and as is typical of the language and community, has come up short as the original contributors lost interest or decided the problem was too hard. This includes:<p>* Scala&#x27;s CPS compiler plugin, now deprecated and unmaintained.<p>* Macro-based async&#x2F;await library. It&#x27;s neat but has many more limitations than C#&#x27;s equivalent or Kotlin&#x27;s, and hasn&#x27;t had any updates in a couple of yaers.<p>It looks like Kotlin has recently added experimental support for async&#x2F;await. That language may be your best bet for now if you want to code in this style on the JVM.", "parent": 14266629.0, "deleted": null, "dead": null, "descendants": null, "id": 14266915, "ranking": null, "date": 1493919501000, "year": 2017}, {"by": "xfer", "score": null, "time": 1495152073, "timestamp": 1495152073000, "title": "", "type": "comment", "url": "", "text": "there is cl-cont which works by CPS transformation, so if performance is your concern it&#x27;s not ideal.", "parent": 14371612.0, "deleted": null, "dead": null, "descendants": null, "id": 14372043, "ranking": null, "date": 1495152073000, "year": 2017}, {"by": "Blackthorn", "score": null, "time": 1495168344, "timestamp": 1495168344000, "title": "", "type": "comment", "url": "", "text": "&gt; If we place a prompt at the top of the main function of the program and use that for making delimited continuations, we basically get regular continuations: continuations that can potentially return all the way to the top, just as far as regular continuations.<p>While this is certainly true in theory, in practice it doesn&#x27;t seem that simple. When you start dealing with already-compiled code (can&#x27;t apply a macro to it), first-class (built-into the language) continuations will work as you&#x27;d expect but delimited not at all. That can be a serious practical restriction.<p>I&#x27;m not used to Common Lisp but I assume you can customize how the &quot;compile&quot; command in ASDF works so maybe you can wrap your entire program, ASDF requirements at all, in that, and that&#x27;s convenient. But consider Clojure which has equally powerful macros, but whose require forms won&#x27;t customize like that. You could have your program&#x27;s compilation phase go through and recompile the entire Clojure distribution of course, but there&#x27;s some things you can only consume as bytecode (like anything Java related) and obviously you can&#x27;t help that via CPS transformation. You&#x27;ll need to get into bytecode manipulation like Quasar does. Not unlike those libraries in the C world that translate blocking system calls into nonblocking system calls for fiber &#x2F; green-thread &#x2F; whatever-you-want-to-call-it usage.<p>Coincidentally, this is exactly the reason I&#x27;ve found Clojure&#x27;s async module to be such a pain to work with, compared to Quasar.", "parent": 14372629.0, "deleted": null, "dead": null, "descendants": null, "id": 14373042, "ranking": null, "date": 1495168344000, "year": 2017}, {"by": "gsg", "score": null, "time": 1497157502, "timestamp": 1497157502000, "title": "", "type": "comment", "url": "", "text": "Those compilers use CPS as an intermediate language - a bit like SSA form for functional languages - which is (mostly) independent of supporting first class continuations.<p>Support for first class continuations is a matter of tradeoffs. It&#x27;s quite reasonable for an implementation to choose &#x27;slow&#x27; continuations (in which call&#x2F;cc copies the stack) in order to be able to use the more efficient native stack for function calls.<p>(EDIT: and in response to the linked post, it is quite possible to efficiently compile what would be contifiable functions in direct style - see the recent paper Compiling Without Continuations in which the GHC hackers do exactly that.)", "parent": 14529479.0, "deleted": null, "dead": null, "descendants": null, "id": 14530716, "ranking": null, "date": 1497157502000, "year": 2017}, {"by": "chriswarbo", "score": null, "time": 1497353195, "timestamp": 1497353195000, "title": "", "type": "comment", "url": "", "text": "Heh, I actually wrote something about continuations, then decided against it. I was going to say:<p>In a pure CPS setting, the caller&#x27;s &quot;only&quot; responsibility is to give the right arguments (in scare quotes because getting a continuation right is usually trickier than the &quot;plain&quot; values usually given to functions).<p>In languages with functions, the caller is also responsible for handling&#x2F;ignoring any return value and carrying out any subsequent computations, if the procedure returns.<p>In languages with exceptions, the caller is also responsible for handling&#x2F;passing-on any exceptions.<p>Out of these three sorts of language, my current preference is for the second. It&#x27;s probably fair to say that most procedures in a codebase will return a value (i.e. they&#x27;re not continuations) and will not throw an exception (they&#x27;re <i>exceptional</i>, after all). Hence it seems empirically desirable to allow `return`: it alters the semantics from a pure CPS scenario to one where we must always be vigilant that a procedure may return; but since <i>most</i> procedures (in such languages) return, that&#x27;s not an edge case (in fact it&#x27;s continuations, procedures <i>without</i> `return`, that are rare!); hence the benefits seem worth the cost.<p>When `throw` is introduced, we again must be vigilant when we&#x27;re calling procedures. However, since most procedures <i>don&#x27;t</i> `throw`, the benefit of having this ability is less than that of `return`. Also, since there may be many occurrences of `throw`, with different exception types, the cost of looking out for and handling these is greater than for `return`.<p>Hence my (current) opinion that `return` is very much a &quot;good GOTO&quot;, whilst `throw` is a &quot;bad GOTO&quot; :)<p>Then we get `call-cc`... ;)", "parent": 14543887.0, "deleted": null, "dead": null, "descendants": null, "id": 14544025, "ranking": null, "date": 1497353195000, "year": 2017}, {"by": "binocarlos", "score": null, "time": 1498050803, "timestamp": 1498050803000, "title": "", "type": "comment", "url": "", "text": "An example (from a case I was involved as a witness in only last week).  A jury must be 100% confident that the evidence presented confirms their beliefs.  The judge will say &quot;do not decide based on if you believe it happened but instead on the evidence presented&quot;.  There a world where the jury can believe it happened (and deliberate for 4.5 hours) but still come out with not guilty because the physical evidence is not there.  In historical sexual abuse cases (of which this was one) - the CPS (Criminal Prosecution Service here in the UK) will not take on the case if they did not think there was a good chance of winning and yet the only real evidence here was witness testimony and no forensics.  It didn&#x27;t matter that the jury obviously believed it happened - they did their job and realised that was only an opinion and not backed by evidence.", "parent": 14601762.0, "deleted": null, "dead": null, "descendants": null, "id": 14603427, "ranking": null, "date": 1498050803000, "year": 2017}, {"by": "qbrass", "score": null, "time": 1498352304, "timestamp": 1498352304000, "title": "", "type": "comment", "url": "", "text": "It doesn&#x27;t matter if you accept the babysitter&#x27;s excuse or not, CPS is taking your kids away from you either way.<p>That&#x27;s the proper analogy.", "parent": 14626547.0, "deleted": null, "dead": null, "descendants": null, "id": 14628122, "ranking": null, "date": 1498352304000, "year": 2017}, {"by": "mbrock", "score": null, "time": 1498974554, "timestamp": 1498974554000, "title": "", "type": "comment", "url": "", "text": "A common strategy for implementing compilers for continuation-enabled languages is transforming code into &quot;continuation-passing style&quot; (CPS).<p>That means, basically, converting it into total &quot;callback hell&quot;, so that functions don&#x27;t return, they just call other functions with callbacks.<p>(There&#x27;s a special &quot;exit&quot; callback that is implicitly the callback for the main function.)<p>Some imagination is required to see how, say, a for loop is rendered into CPS, but if you first imagine turning the loop into functional programming then it&#x27;s easier (like in JavaScript, if you want to wait for an asynchronous thing in your for loop body, you have to basically do a CPS transformation manually, or use async&#x2F;await which is closely related).<p>So basically in Scheme, your code is always in a callback-passing style, just that the language cleverly hides it, and then lets you explicitly access the current callback (using call&#x2F;cc).<p>If you have experience with async programming in JavaScript, it should make sense that this lets you easily implement things like concurrency, custom blocking operations, etc.<p>Just like how JavaScript callbacks can be called several times, so with continuations. Since the callbacks are implicit in Scheme, you can make what appears to be a function that returns several times (&quot;nondeterminism&quot;).<p>Callbacks can of course take several arguments. Most languages have an asymmetry where functions have several parameters but can only return one value. With continuations, it&#x27;s easy to imagine calling them with several arguments. So in a language with continuations, it makes sense to have multiple return values too.", "parent": 14680457.0, "deleted": null, "dead": null, "descendants": null, "id": 14681113, "ranking": null, "date": 1498974554000, "year": 2017}, {"by": "DanBC", "score": null, "time": 1500799755, "timestamp": 1500799755000, "title": "", "type": "comment", "url": "", "text": "This is from [2011], but those 6 characters didn&#x27;t fit in the title.<p>The original title is &quot;How the Presumption of Innocence Renders the Innocent Vulnerable to\nWrongful Convictions&quot;, which is a bit longer than the 80 character limit.<p>I&#x27;m submitting this because it&#x27;s interesting to see how normal policing that follows the rules can still lead to severe miscarriages of justice.<p>The document also mentions &quot;disclosure&quot; - the prosecution has to disclose information to the defence - and there has been recent work in the UK that shows the CPS and police do not understand disclosure and do not correctly disclose information, which has led to some miscarriages of justice.", "parent": 14831390.0, "deleted": null, "dead": null, "descendants": null, "id": 14831439, "ranking": null, "date": 1500799755000, "year": 2017}, {"by": "cryptonector", "score": null, "time": 1501565205, "timestamp": 1501565205000, "title": "", "type": "comment", "url": "", "text": "If all you want is generators and co-routines, then there&#x27;s a lot of literature on this for C.<p>The original Icon compiler compiled to CPS C.  That was pretty cool.<p>One can do much of what Icon did using GCC local functions and computed gotos to get something much closer to not-CPS.<p>There&#x27;s Simon Tatham&#x27;s PuTTY, which uses his co-routine macros, which are an extravagant meta-programming macros around a Duff&#x27;s device.  He also has an extensive set of meta-programming macros as well, not related to co-routines.<p>Some Schemes compile to C code where all functions always return immediately, but what they return is a continuation, and the top-level is a for(;;) { next = next(); }.<p>EDIT: I&#x27;m particularly fond of PuTTY.  Its SSHv2 implementation all the way up to the end of authentication is a single, huge function.  It looks completely synchronous, but it&#x27;s not, because it&#x27;s actually a co-routine.  As a result, and in spite of being a single huge function, it&#x27;s actually quite readable.", "parent": 14887341.0, "deleted": null, "dead": null, "descendants": null, "id": 14898105, "ranking": null, "date": 1501565205000, "year": 2017}, {"by": "KirinDave", "score": null, "time": 1501862344, "timestamp": 1501862344000, "title": "", "type": "comment", "url": "", "text": "&gt; In the past I also did some other work on bringing Clojure Transducers to C++ ...  consider it a much less important effort---without the data-structures the other parts of Clojure feel almost like just sugar.<p>Very few clojure programmers consider Transducers very important even in Clojure. While they&#x27;re convenient for implementing Clojure&#x27;s stdlib and they have some nice properties, they&#x27;re <i>very</i> difficult to work with. It takes a very experienced clojure programmer to use transducers. Heck, I know some famous clojure developers who admit they themselves don&#x27;t feel confident using them.<p>But the main challenge for  them is that transducers just scream for some basic type validation so that you don&#x27;t accidentally chain together nonsense. C++ could provide that, and you&#x27;d end up with all the same properties. In particular, they offer something like half the monad laws and a more easily composed form of CPS (how your continuation is called is more predictable).<p>I&#x27;d think that might be a really valuable thing in C++, as it&#x27;s a construction that reproduces stream fusion.", "parent": 14928938.0, "deleted": null, "dead": null, "descendants": null, "id": 14929645, "ranking": null, "date": 1501862344000, "year": 2017}, {"by": "millstone", "score": null, "time": 1504155848, "timestamp": 1504155848000, "title": "", "type": "comment", "url": "", "text": "That&#x27;s not the definition I had in mind. What I meant is that JavaScript lacks an easy way to allow for computation that doesn&#x27;t block the event loop.<p>We can imagine an old school cooperative multithreading architecture:<p><pre><code>    for (var i = 0; i &lt; arr.length; i++) {\n        someCalculation(arr[i]);\n        yieldToNextEvent();\n    }\n</code></pre>\nbut JavaScript does not support this. Instead you have to awkwardly re-structure your computation in CPS or an equivalent to do this sort of thing.", "parent": 15135103.0, "deleted": null, "dead": null, "descendants": null, "id": 15138271, "ranking": null, "date": 1504155848000, "year": 2017}, {"by": "abecedarius", "score": null, "time": 1504629634, "timestamp": 1504629634000, "title": "", "type": "comment", "url": "", "text": "I worked through most of the first edition (skipping much of the OO chapter) and read the later editions pretty lightly. They&#x27;re more polished and developed, e.g. explaining better code for the CPS transform, adding a chapter on types, and such. But they do give me a bit of a spoon-fed vibe compared to the first edition, I guess as a result of optimizing it from classroom feedback. I&#x27;m not sure depth is the right characterization of the difference -- I didn&#x27;t get that impression, besides the compiling chapter getting dropped. But then I didn&#x27;t study them as much (though I did report an erratum in the second edition).", "parent": 15175576.0, "deleted": null, "dead": null, "descendants": null, "id": 15176829, "ranking": null, "date": 1504629634000, "year": 2017}, {"by": "extra88", "score": null, "time": 1504698660, "timestamp": 1504698660000, "title": "", "type": "comment", "url": "", "text": "I&#x27;m skeptical that this is the whole story, CPS departments don&#x27;t have the staff to monitor every Duggar-wannabe. But if there was an incident that put you on their radar (even if it was actually nothing), I could see it taking a long time for them to take you off their list.", "parent": 15182786.0, "deleted": null, "dead": null, "descendants": null, "id": 15182889, "ranking": null, "date": 1504698660000, "year": 2017}, {"by": "Spooky23", "score": null, "time": 1504727405, "timestamp": 1504727405000, "title": "", "type": "comment", "url": "", "text": "Social workers, CPS and similar people have a lot of power, both through direct action like testimony and reports, or more indirect&#x2F;passive-aggressive action like filing anonymous complaints or withholding&#x2F;providing key data strategically.<p>Most judges are doing to hear &quot;child endangerment&quot; and do exactly what they recommend, or what is called for. People performing assessments have broad discretion in many types of determinations. When you suffer from a serious medical malady like a stroke, the social workers&#x2F;discharge planners in hospitals and rehab facilities have even greater power with less accountability.", "parent": 15182447.0, "deleted": null, "dead": null, "descendants": null, "id": 15186589, "ranking": null, "date": 1504727405000, "year": 2017}, {"by": "agumonkey", "score": null, "time": 1505069380, "timestamp": 1505069380000, "title": "", "type": "comment", "url": "", "text": "You&#x27;re totally right. I already forgot the deails.<p>I just put out my hp49.. god how I love these things.<p>ps: I just found out the latest attempt I did last years was a var called REC = &lt;&lt; -&gt; U &lt;&lt; U U EVAL &gt;&gt; &gt;&gt; .. pretty sure I was trying a fixpoint CPS factorial in RPN", "parent": 15213515.0, "deleted": null, "dead": null, "descendants": null, "id": 15213630, "ranking": null, "date": 1505069380000, "year": 2017}, {"by": "VeryAnonymous", "score": null, "time": 1506157249, "timestamp": 1506157249000, "title": "", "type": "comment", "url": "", "text": "Possible, but apparently more a theoretical risk. Certainly small compared to other birth risks.<p>Until a few years ago, C-section was recommended, but the current wisdom is that vaginal birth poses no greater risk for the baby.<p>Same with breastfeeding. Until a few years doctors would call CPS if a HIV+ woman admitted to breastfeeding her child. Now, our doctors encouraged my HIV+ wife to breastfeed.<p>OTOH she was the second (or third?) HIV+ woman in our city who dared to.<p>Worked out for us. Both kids are HIV-, as am I.", "parent": 15317467.0, "deleted": null, "dead": null, "descendants": null, "id": 15318892, "ranking": null, "date": 1506157249000, "year": 2017}, {"by": "TeMPOraL", "score": null, "time": 1506353313, "timestamp": 1506353313000, "title": "", "type": "comment", "url": "", "text": "Related, CPS suite from Continuum series.<p>A fun feature it had that I would love to have on real clothing - you could pop up a slider and change the color of the suit.<p>EDIT: here&#x27;s a video of its various features:<p><a href=\"https:&#x2F;&#x2F;vimeo.com&#x2F;64120587\" rel=\"nofollow\">https:&#x2F;&#x2F;vimeo.com&#x2F;64120587</a>", "parent": 15331195.0, "deleted": null, "dead": null, "descendants": null, "id": 15331223, "ranking": null, "date": 1506353313000, "year": 2017}, {"by": "mikelevins", "score": null, "time": 1506637823, "timestamp": 1506637823000, "title": "", "type": "comment", "url": "", "text": "Nah, it was Scheme plus (a stripped-down) CLOS. A possible point of confusion was that the development environment, including the CPS Scheme compoiler, was written in Common Lisp. Also, all values were instances of (mini-CLOS) classes.", "parent": 15360334.0, "deleted": null, "dead": null, "descendants": null, "id": 15361321, "ranking": null, "date": 1506637823000, "year": 2017}, {"by": "justinpombrio", "score": null, "time": 1508718465, "timestamp": 1508718465000, "title": "", "type": "comment", "url": "", "text": "&gt; free-form records, dynamically-sized arrays, no types<p>AFAIK, free form records and lack of types do not an easier compilation target make. It&#x27;s pretty easy to compile an untyped language to a typed language.<p>&gt; How so?<p>- There are a ton of implicit casts that are almost certainly not what you want. So, for example, if you&#x27;re going to use addition in the compiled code, it&#x27;s a 10-step process [1, section 12.8.3.1], and you should be careful not to trigger the 9 steps that do things other than addition.<p>- There is, last I heard, no way to determine the size of the stack.<p>- No integers.<p>- Say you have a demo page for some language, and someone using the page writes an infinite loop. Don&#x27;t want the page to crash? Welcome to advanced compilation techniques like CPS transformations and trampolining.<p>Overall, JS has a ~850 page spec, and any part of the language you target for which you don&#x27;t fully understand the spec is a potential bug. Instead, you want your target language to be dumb, tiny, and explicit.<p>[1] <a href=\"http:&#x2F;&#x2F;www.ecma-international.org&#x2F;publications&#x2F;files&#x2F;ECMA-ST&#x2F;Ecma-262.pdf\" rel=\"nofollow\">http:&#x2F;&#x2F;www.ecma-international.org&#x2F;publications&#x2F;files&#x2F;ECMA-ST...</a><p>Disclaimer: I have done research on JS, but I do not study or develop compilers.", "parent": 15529611.0, "deleted": null, "dead": null, "descendants": null, "id": 15529836, "ranking": null, "date": 1508718465000, "year": 2017}, {"by": "DiThi", "score": null, "time": 1508720475, "timestamp": 1508720475000, "title": "", "type": "comment", "url": "", "text": "&gt; There are a ton of implicit casts<p>Very easy to avoid if you&#x27;re compiling a statically typed language to JS.<p>&gt; No integers<p>Not in the JS specification (outside typed arrays), but every JS JIT works in a way you can actually declare variables as 32 bit signed integers, and made its way into the asm.js specification. They are declared like this:<p><pre><code>    var a = value|0;\n</code></pre>\nWhere the |0 is a no-op so not actually done, just a type hint.<p>If what worries you is precision and not performance, doubles allow 53 bit integers (not counting sign bit) with full precision.<p>&gt; Say you have a demo page for some language, and someone using the page writes an infinite loop. Don&#x27;t want the page to crash? Welcome to advanced compilation techniques like CPS transformations and trampolining.<p>Or just use a web worker, which you can terminate if you haven&#x27;t heard back in a while (pun intended).<p>&gt; and any part of the language you target for which you don&#x27;t fully understand the spec is a potential bug<p>It heavily depends on what type of language you do. If your compiler tracks the types and doesn&#x27;t mix them, edge cases are much, much easier to avoid.<p>Source: I did make a compiler for my own language that targeted JS.", "parent": 15529836.0, "deleted": null, "dead": null, "descendants": null, "id": 15529961, "ranking": null, "date": 1508720475000, "year": 2017}, {"by": "saltcured", "score": null, "time": 1509165637, "timestamp": 1509165637000, "title": "", "type": "comment", "url": "", "text": "I find it bizarre for you to invoke the niche E programming language as if it is obviously relevant to any use of unique identifiers for detecting replay of messages. Why don&#x27;t we criticize the author for his lack of Petri nets, or his glaring omission of a denotational semantics in the appendix to his article?<p>At this point in the discussion, I am unsure that you understand promises in distributed systems formalism, because you seem to be conflating it with the ones recently en vogue in Javascript and other popular languages. Those futures&#x2F;promises in every web browser in the world are a purely local asynchronous programming idiom, or what I like to think of as CPS unconversion. I didn&#x27;t suggest that browser programming is a niche concept, but it also has nothing to do with organizing idempotent remote state changes over a lossy message channel.<p>There is a vast literature using many different forms of explicit identifier tied to some form of idempotence. Do you run around the IETF and W3C telling them to stop saying &quot;Message-ID&quot; when they really mean futures&#x2F;promises? Or security researchers with their nonces?  How about those pesky IPv4 and IPv6 designers with their silly ports, SYN cookies, and sequence numbers?", "parent": 15572371.0, "deleted": null, "dead": null, "descendants": null, "id": 15574011, "ranking": null, "date": 1509165637000, "year": 2017}, {"by": "naasking", "score": null, "time": 1509202395, "timestamp": 1509202395000, "title": "", "type": "comment", "url": "", "text": "&gt; Why don&#x27;t we criticize the author for his lack of Petri nets, or his glaring omission of a denotational semantics in the appendix to his article?<p>Oh, was I asleep when Petri nets and denotational semantics are now used by millions of programmers around the world?<p>&gt; Those futures&#x2F;promises in every web browser in the world are a purely local asynchronous programming idiom, or what I like to think of as CPS unconversion. I didn&#x27;t suggest that browser programming is a niche concept, but it also has nothing to do with organizing idempotent remote state changes over a lossy message channel.<p>Of course it does, and I already made this point so I don&#x27;t know why you&#x27;re ignoring it. Add durability to browser promises, and there you go. The durability is irrelevant to the semantics.<p>&gt; Do you run around the IETF and W3C telling them to stop saying &quot;Message-ID&quot; when they really mean futures&#x2F;promises? Or security researchers with their nonces?<p>Nonces and Message-IDs have different semantics than promises. It&#x27;s like you&#x27;re not even listening.<p>Idempotency keys have the same semantics as promises. Ergo, they are promises. Promises are idempotent, but not every idempotent abstraction is a promise. It&#x27;s simple, I&#x27;m not sure where the confusion lies.", "parent": 15574011.0, "deleted": null, "dead": null, "descendants": null, "id": 15575304, "ranking": null, "date": 1509202395000, "year": 2017}, {"by": "megaman22", "score": null, "time": 1509211857, "timestamp": 1509211857000, "title": "", "type": "comment", "url": "", "text": "You know that, and I know that, but god protect you from the busybodies and CPS if you treat your children like they arent completely incompetent and made out of glass.", "parent": 15575896.0, "deleted": null, "dead": null, "descendants": null, "id": 15575916, "ranking": null, "date": 1509211857000, "year": 2017}, {"by": "dsfyu404ed", "score": null, "time": 1509230106, "timestamp": 1509230106000, "title": "", "type": "comment", "url": "", "text": "This.<p>The wide authority given to CPS doesn&#x27;t help either. If you come to their attention the CPS  will be  a terrible nuisance, waste your time in court and maybe take your kid.  A lot of parents probably would give their kids more freedom if they weren&#x27;t one busybody with a cell phone away from being on CPS bad list.<p>It&#x27;s one of the many issues that comes back to people trying to exert unnecessary control over others, &quot;you shouldn&#x27;t be raising your kid that way&quot; and so on.", "parent": 15576695.0, "deleted": null, "dead": null, "descendants": null, "id": 15577029, "ranking": null, "date": 1509230106000, "year": 2017}, {"by": "walshemj", "score": null, "time": 1509292421, "timestamp": 1509292421000, "title": "", "type": "comment", "url": "", "text": "There is a grim joke in the UK &quot;what&#x27;s the difference between a Rottweiler and the CPS A You might get your kids back from the Rottweiler&quot;", "parent": 15577029.0, "deleted": null, "dead": null, "descendants": null, "id": 15579747, "ranking": null, "date": 1509292421000, "year": 2017}, {"by": "timthelion", "score": null, "time": 1509359172, "timestamp": 1509359172000, "title": "", "type": "comment", "url": "", "text": "I agree, and from a different perspective, I would compare this to literature. In English literature we have many different paradigms: Victorian literature, Modernism, Post modernism, Post colonial ect. The language has to be expressive, and in being expressive, it can express any of these different paradigms. The fact that the vocabulary is shared between the &quot;eras&quot; of literature is only a bonus which makes authors more flexible and more able to experiment with actually new concepts, rather than simply reinventing the same old vocabulary.<p>We then have Chinese literature and Indian literature, and these have very different paradigms. Perhaps it is even hard to effectively translate from Chinese to English. But the actual variance within a given language is still greater than the variance between the languages.<p>And like human languages, the vocabulary is often arbitrary. In human languages a dog is called a dog not because it makes the sound &quot;dog&quot; and not because it looks like the letters &#x27;d&#x27;, &#x27;o&#x27;, and &#x27;g&#x27; but for entirely arbitrary reasons of phonetic shift and arbitrary initial designation.<p>And in lisp you take the &#x27;car&#x27; of a tuple and in Haskell you take the &#x27;head&#x27; of a list. But the two concepts are very much the same. However, the distinction between continuation passing style (CPS) concurrency and the actor model can be expressed in either langauge just as well. And the distinction between CPS and the actors is FAR grater than the distinction between calling the basic function &quot;head&quot; or &quot;car&quot;.", "parent": 15583324.0, "deleted": null, "dead": null, "descendants": null, "id": 15584043, "ranking": null, "date": 1509359172000, "year": 2017}, {"by": "phaedrus", "score": null, "time": 1509989511, "timestamp": 1509989511000, "title": "", "type": "comment", "url": "", "text": "I&#x27;ve been working on techniques to enable a low-level interpreter engine to present (meta level) user function names in stack traces and (meta level) user variables on the debugger watch window, instead of just spilling the guts of the interpreter when you break into it with a C++ debugger.  The basic idea is to design the API of the expression-building library so that the user code is always written in the form of callback functions which support staged execution.  The first stage builds the expression object to be interpreted; subsequent stages could be all nops yet still serve the purpose of tracing execution and explaining generated plans.<p>It&#x27;s encouraging to me that starting from a different goal, I reached a similar point in design-space as you describe in this paper.<p>I want to ask you about the role of continuation passing style (CPS) in towers of interpreters, and whether you view it as fundamental or merely a feature which is possible to support or not support?<p>The reason I ask is that in my work on improving debugging, I didn&#x27;t start out with the <i>a priori</i> intent to use CPS style, but I keep ending up with continuations popping up somewhere.  Even when I try to wring them out (to simplify the use of the library) they are still &quot;there&quot;, just maybe hidden or disguised.<p>The intuitive explanation is that, during &quot;tracing mode,&quot; it is not enough to simply invoke the callback (and allow it to return).  Instead, we want to jump to the callback function, and then leave it&#x27;s frame open and on the stack while we do additional work.  How does the interpreter regain control before the user&#x27;s callback function has returned?  Probably, via a continuation.<p>However I think there is also an interesting parallel or connection to coroutines.  Yes, CPS can be used to implement coroutines.  However, suppose coroutines are instead a language primitive, then similar staging and polymorphism techniques could be used to <i>debug</i> coroutines.  By inverting the relationship between &quot;main coroutine&quot; and &quot;worker coroutine&quot;, instead of treating the worker as a function called-by the outside world, redefine the worker as the thing driving the program and treat &quot;everything that the rest of the world does between coro-yield and resume&quot; as a subroutine call from the worker coroutine.<p>What I haven&#x27;t worked out yet is if and how the third leg of this triangle may be completed:  using coroutines to implement the staging and debug tracing mechanism (instead of CPS).", "parent": 15636000.0, "deleted": null, "dead": null, "descendants": null, "id": 15637063, "ranking": null, "date": 1509989511000, "year": 2017}, {"by": "tiarkrompf", "score": null, "time": 1509993545, "timestamp": 1509993545000, "title": "", "type": "comment", "url": "", "text": "Sounds interesting. About the role of CPS: for specialization purposes, CPS can have some benefits by splitting control flow. For example, if your input is &quot;if (c) a else b&quot; and c is a staged (=symbolic) value, then a CPS interpreter can ignore the control-flow join that&#x27;s implied by the if-then-else, and continue processing longer paths independently. However, this also quickly leads to exponential code blow-up, and hence, we do not use CPS for the core model described in the paper.", "parent": 15637063.0, "deleted": null, "dead": null, "descendants": null, "id": 15637682, "ranking": null, "date": 1509993545000, "year": 2017}, {"by": "jlgaddis", "score": null, "time": 1510965457, "timestamp": 1510965457000, "title": "", "type": "comment", "url": "", "text": "&gt; <i>I like Let&#x27;s Encrypt and have used it since, but it&#x27;s nowhere near as full featured of an offering.</i><p>Yet.<p>I think they&#x27;ll begin offering a non-free service inthe next two years or so. The free DV certs will remain but eventually they&#x27;ll need actual income (as opposed to donations and&#x2F;or corporate sponsorhips). EV certs may be one way that heppens, I don&#x27;t know.<p>For the longest time, we heard they wouldn&#x27;t be offering wildcart certificates. Then, I just happened to be looking at their (recently updated) CPS one day (I was working on building out an intenral PKI at the time) and saw mention of issuance of wildcard certificates. They announced those shortly after.<p>Anyways, like I said, st some point they&#x27;ll need actual income. I&#x27;m not sure what they&#x27;ll offer in order to do that, though. Maybe EV certs, maybe longer issuance periods after more in-depth organizational verification, maybe some subscription-based &quot;manage all your certs easily&quot; tool, who knows. But I expect them to follow the same &quot;automated == free&quot;, &quot;manual intervention&#x2F;work == not free&quot; business model.", "parent": 15724094.0, "deleted": null, "dead": null, "descendants": null, "id": 15727108, "ranking": null, "date": 1510965457000, "year": 2017}, {"by": "Spooky23", "score": null, "time": 1511216915, "timestamp": 1511216915000, "title": "", "type": "comment", "url": "", "text": "You can fire apointeees who run the place.<p>Nobody working in CPS wants to be in a place where child abuse is covered up and ignored. That\u2019s a leadership problem.", "parent": 15742701.0, "deleted": null, "dead": null, "descendants": null, "id": 15743918, "ranking": null, "date": 1511216915000, "year": 2017}, {"by": "mattbierner", "score": null, "time": 1511451158, "timestamp": 1511451158000, "title": "", "type": "comment", "url": "", "text": "As soon as I saw the title I suspected the exploit was probably markdown related, as I had fixed pretty much the exact same issues in VS Code. Two things to keep in mind when developing electron apps:<p>- The potential impact of an XSS or other security exploits is much higher. You can limit the impact of most of these with additional layers of security, such as running untrusted html in isolated environments with node integration disabled. However, also remember that...<p>- Many security features are opt-in. Content security policies (CSP) are a good example. Pages without a CPS default to allowing anything, which sort of makes sense in browser world for backwards compatibility, but is not a good idea for desktop apps.", "parent": 15764966.0, "deleted": null, "dead": null, "descendants": null, "id": 15765608, "ranking": null, "date": 1511451158000, "year": 2017}, {"by": "dontdothat", "score": null, "time": 1511462444, "timestamp": 1511462444000, "title": "", "type": "comment", "url": "", "text": "Ugh. A really ugly attempt at straw-persons and lectures on &quot;whacky&quot; moral universes all wrapped up with advocating hitting kids....<p>Just to make it crystal clear for the morally-challenged: if you &quot;smack something out of&quot; your 1, 2, 3, or 4 year old, the police will be called, CPS will be called, you will go to jail, and you will appear before a judge to explain why you shouldn&#x27;t lose custody of your own kids.", "parent": 15766217.0, "deleted": null, "dead": null, "descendants": null, "id": 15767008, "ranking": null, "date": 1511462444000, "year": 2017}, {"by": "carapace", "score": null, "time": 1511729368, "timestamp": 1511729368000, "title": "", "type": "comment", "url": "", "text": "I&#x27;ve been working in a CPS Joy variant, deriving recursive functions on trees and such.  I&#x27;ve noticed that the code always works the first time.  So far my &quot;data&quot; on this phenomenon is still too anecdotal to get excited, but I wanted to mention it (here where people might be interested.)  It surprised me at first, but then I realized that this is part of the promise of Backus&#x27; Functional Programming: being able to do algebra to derive programs gives you error-free code that doesn&#x27;t require tests.<p>It leads me to speculate...  what if I don&#x27;t need types to write correct software?  I assumed I would implement typing and type inference (like Factor language already has) at some point.  But if the code has no bugs without it... YAGNI?<p>My reasoning goes like this:  Let&#x27;s postulate that we have a library of functions, each of which has the quality Q of being error-free.  If we derive new functions from the existing ones by a process that preserves Q, so that new functions are all also error-free, then we cannot have errors in our code, <i>just user error</i>.  I.e. the user can present bad inputs, but no other source of error exists (other than mechanical faults.)  This would be a desirable state of affairs.  Now if the Q-preserving new-function-deriving process doesn&#x27;t require types to work, then we don&#x27;t need them.  Whether or not typing helps prevent user error is another question.  Personally, I lean toward defining user error as UI error, but I am ranging far from my original point now.<p>(If you&#x27;re interested: <a href=\"https:&#x2F;&#x2F;github.com&#x2F;calroc&#x2F;joypy&#x2F;tree&#x2F;master&#x2F;docs\" rel=\"nofollow\">https:&#x2F;&#x2F;github.com&#x2F;calroc&#x2F;joypy&#x2F;tree&#x2F;master&#x2F;docs</a>  Still very DRAFT versions. <a href=\"https:&#x2F;&#x2F;github.com&#x2F;calroc&#x2F;joypy&#x2F;blob&#x2F;master&#x2F;docs&#x2F;3.%20Developing%20a%20Program.md\" rel=\"nofollow\">https:&#x2F;&#x2F;github.com&#x2F;calroc&#x2F;joypy&#x2F;blob&#x2F;master&#x2F;docs&#x2F;3.%20Develo...</a> )", "parent": 15776033.0, "deleted": null, "dead": null, "descendants": null, "id": 15782914, "ranking": null, "date": 1511729368000, "year": 2017}, {"by": "tomc1985", "score": null, "time": 1511895699, "timestamp": 1511895699000, "title": "", "type": "comment", "url": "", "text": "Probably because helicopter parenting is in vogue (at least in the US). It is seriously messed up that you can have CPS called on you for letting your kid wander freely in the neighborhood", "parent": 15800082.0, "deleted": null, "dead": null, "descendants": null, "id": 15800280, "ranking": null, "date": 1511895699000, "year": 2017}, {"by": "Pulcinella", "score": null, "time": 1511896301, "timestamp": 1511896301000, "title": "", "type": "comment", "url": "", "text": "You won\u2019t have CPS called on you for letting your children wander and play in the neighbor. Please don\u2019t spread nonsense.<p>Edited with my response to everyone depositing articles about the Meitivs:<p>Nobody \u201ccalled CPS on\u201d the Meitivs. Somebody called the polic because they saw the children wandering around a parking garage (not a park like in many of the news stories. See [1].) The police officer then called CPS several times wondering what to do with children before finally driving over to CPS when they were dragging their heels[2].\n[1] <a href=\"https:&#x2F;&#x2F;www.washingtonpost.com&#x2F;local&#x2F;free-range-family-again..\" rel=\"nofollow\">https:&#x2F;&#x2F;www.washingtonpost.com&#x2F;local&#x2F;free-range-family-again...</a>.\n[2] Not that I think CPS is great. As a teacher, it\u2019s basically impossible to get CPS to do anything unless the parents are abusing the children right in front of you on school property. Part of that is CPS being overworked and underfunded&#x2F;understaffed. Part of that is that is it still usually better to keep the kids with their parents instead of foster care. And part of it is CPS not having the resources to have more options besides arrest parents or do nothing (like offering social services to the parents). Also I would argue there is a difference between letting your children play in the neighborhood outside your house and just leaving your children at the park for hours. I have had students who haven been abandoned at the park with their younger siblings.", "parent": 15800280.0, "deleted": null, "dead": null, "descendants": null, "id": 15800364, "ranking": null, "date": 1511896301000, "year": 2017}, {"by": "ringaroundthetx", "score": null, "time": 1511896356, "timestamp": 1511896356000, "title": "", "type": "comment", "url": "", "text": "Man that meme really went wild huh<p>Yes, CPS in one state did something ambiguous and alarming to self-proclaimed &quot;free range&quot; parents.<p>No, you probably don&#x27;t have the full story that a guy who had never seen the children before was concerned about their safety in that part of town, he decided to call 911 instead of talking to the kids and coming off as a creep.<p>Yes, that one town&#x27;s police department did get the CPS&#x27; attention, and the CPS did an investigation and found something arbitrary which is rightfully concerning.<p>No, this isn&#x27;t indicative of the entire US culture or widespread neighborly paranoia about children walking unattended.", "parent": 15800280.0, "deleted": null, "dead": null, "descendants": null, "id": 15800372, "ranking": null, "date": 1511896356000, "year": 2017}, {"by": "dsp1234", "score": null, "time": 1511896779, "timestamp": 1511896779000, "title": "", "type": "comment", "url": "", "text": "I&#x27;ll just go let my best friend know that the several CPS inspections she had to endure last year when she left her kids at the park unattended were not real.<p>Anyone can call CPS for just about anything, and having someone pick through your home and point out every little flaw, with the threat of taking your kids away is a real issue.  Please don&#x27;t downplay it, and don&#x27;t downplay how shitty people can be to each other.", "parent": 15800364.0, "deleted": null, "dead": null, "descendants": null, "id": 15800447, "ranking": null, "date": 1511896779000, "year": 2017}, {"by": "jMyles", "score": null, "time": 1511896878, "timestamp": 1511896878000, "title": "", "type": "comment", "url": "", "text": "This literally happened to me last week in Fresno, CA at @dmpayton&#x27;s house.  Fortunately, it&#x27;s not possible to <i>directly</i> call CPS here; one needs to go through the police first.  The police arrived and questioned me.  I explained to them that I had no intention of changing my behavior and that I didn&#x27;t want to answer any questions.  They were polite and eventually left.<p>But it was still bizarre.  I don&#x27;t understand why the response (to the caller) isn&#x27;t, &quot;M&#x27;am, there&#x27;s no violation of the law in your description of this event.  Please keep this line open in case of actual emergencies.&quot;", "parent": 15800364.0, "deleted": null, "dead": null, "descendants": null, "id": 15800472, "ranking": null, "date": 1511896878000, "year": 2017}, {"by": "dougmccune", "score": null, "time": 1511897255, "timestamp": 1511897255000, "title": "", "type": "comment", "url": "", "text": "Everyone is pointing out various news articles that show that people do indeed call CPS when you let your kids play by themselves at a playground. I won&#x27;t dispute that it happens, but to me this is similar to how we view other low-probability  events. If I let my kids walk to school or the playground by themselves there&#x27;s also a chance they can get hit by a car crossing the street. I can teach them safety rules and arm them with the tools they need, but there&#x27;s always that chance. If you were so inclined I&#x27;m sure you could find countless articles about unsupervised kids getting hit by cars (or whatever other horrible thing you wanted to dig up, child abduction, etc etc). And yet that&#x27;s a low-probability risk that we readily accept for the trade-off of fostering a child&#x27;s independence and not being held hostage by every small risk in this world. Some asshole calling CPS and causing serious annoyance and maybe even emotional trauma is a real risk, but I&#x27;d argue it&#x27;s super low probability (lower than the risk cars on the street pose). So yes, it happens, but that doesn&#x27;t mean we have to change our behavior. We just have to accept that risk just like we do thousands of others in the course of daily life.", "parent": 15800364.0, "deleted": null, "dead": null, "descendants": null, "id": 15800548, "ranking": null, "date": 1511897255000, "year": 2017}, {"by": "btilly", "score": null, "time": 1511897567, "timestamp": 1511897567000, "title": "", "type": "comment", "url": "", "text": "Many are sharing personal experiences as well.<p>I have not had CPS called on me.  But I do have friends who dealt with that.  In fact I know more people whose had CPS called on them than I do people who have been in car accidents.  So it doesn&#x27;t seem to be a super low probability event.<p>What also has me concerned is that my kids are heading towards puberty.  Over 1&#x2F;4 of all registered sex offenders committed their crime while minors.  The single year of your life that you are most likely to become a registered sex offender is 14.  It is massively more likely that they will have their lives destroyed that way than by an accident.", "parent": 15800548.0, "deleted": null, "dead": null, "descendants": null, "id": 15800596, "ranking": null, "date": 1511897567000, "year": 2017}, {"by": "Pulcinella", "score": null, "time": 1511897698, "timestamp": 1511897698000, "title": "", "type": "comment", "url": "", "text": "Nobody \u201ccalled CPS on\u201d the Meitivs. Somebody called the polic because they saw the children wandering around a parking garage (not a park like in many of the news stories. See [1].) The police officer then called CPS several times wondering what to do with children before finally driving over to CPS when they were dragging their heels[2].<p>[1] <a href=\"https:&#x2F;&#x2F;www.washingtonpost.com&#x2F;local&#x2F;free-range-family-again-in-spotlight-after-police-pick-up-kids-6-and-10&#x2F;2015&#x2F;04&#x2F;13&#x2F;30e2a2f4-e1f1-11e4-81ea-0649268f729e_story.html?utm_term=.a3cad281e4d3\" rel=\"nofollow\">https:&#x2F;&#x2F;www.washingtonpost.com&#x2F;local&#x2F;free-range-family-again...</a><p>[2] Not that I think CPS is great. As a teacher, it\u2019s basically impossible to get CPS to do anything unless the parents are abusing the children right in front of you on school property. Part of that is CPS being overworked and underfunded&#x2F;understaffed. Part of that is that is it still usually better to keep the kids with their parents instead of foster care. And part of it is CPS not having the resources to have more options besides arrest parents or do nothing (like offering social services to the parents). Also I would argue there is a difference between letting your children play in the neighborhood outside your house and just leaving your children at the park for hours. I have had students who haven been abandoned at the park with their younger siblings.", "parent": 15800448.0, "deleted": null, "dead": null, "descendants": null, "id": 15800613, "ranking": null, "date": 1511897698000, "year": 2017}, {"by": "mrkurt", "score": null, "time": 1511898483, "timestamp": 1511898483000, "title": "", "type": "comment", "url": "", "text": "I do think the lose-your-kids-to-CPS fear is a little overblown. But it&#x27;s a little silly to say &quot;they didn&#x27;t call CPS, they called the police&quot;. The outcome is the same, and people almost always call the police instead of CPS directly.", "parent": 15800613.0, "deleted": null, "dead": null, "descendants": null, "id": 15800736, "ranking": null, "date": 1511898483000, "year": 2017}, {"by": "ghurtado", "score": null, "time": 1511899559, "timestamp": 1511899559000, "title": "", "type": "comment", "url": "", "text": "&gt; You won\u2019t have CPS called on you for letting your children wander and play in the neighbor. Please don\u2019t spread nonsense.<p>You&#x27;re absolutely wrong and I know first hand of a couple of neighbors where exactly this has happened.<p>Just because you haven&#x27;t experienced it first hand it doesn&#x27;t mean you have proof positive that it never occurs.", "parent": 15800364.0, "deleted": null, "dead": null, "descendants": null, "id": 15800913, "ranking": null, "date": 1511899559000, "year": 2017}, {"by": "shostack", "score": null, "time": 1511899565, "timestamp": 1511899565000, "title": "", "type": "comment", "url": "", "text": "I&#x27;m not very familiar with how CPS works and the law there--do you have any right to refuse unless they present some evidence that warrants such invasive next steps?<p>Seems like a passive-aggressive parental version of Swatting someone.", "parent": 15800447.0, "deleted": null, "dead": null, "descendants": null, "id": 15800918, "ranking": null, "date": 1511899565000, "year": 2017}, {"by": "Pulcinella", "score": null, "time": 1511899773, "timestamp": 1511899773000, "title": "", "type": "comment", "url": "", "text": "The original comment I was responding to specifically said \u201cyou can have CPS called on\u201d you. Many people then pointed out the case of the Meitiv family even though nobody called CPS on them. Somebody called the police because they saw children playing in a parking garage unattended. Nobody called the police and said \u201cthe Meitiv\u2019s children are playing in the neighborhood unattended.\u201d", "parent": 15800736.0, "deleted": null, "dead": null, "descendants": null, "id": 15800952, "ranking": null, "date": 1511899773000, "year": 2017}, {"by": "valuearb", "score": null, "time": 1511899805, "timestamp": 1511899805000, "title": "", "type": "comment", "url": "", "text": "When I was 6 years old my mom used to let me ride my bike all over town (a 5 mile jaunt) all day long.  When I was 8, me and my friends used to walk 4 miles to school to play basketball, then spend rest of day playing in woods. Eventually when I was around 13 one of my friends lost an eye due to our experiments with explosives, but other than that we all survived.<p>Maybe I should call CPS on my mom. What&#x27;s the statute of limitations.", "parent": 15800704.0, "deleted": null, "dead": null, "descendants": null, "id": 15800957, "ranking": null, "date": 1511899805000, "year": 2017}, {"by": "kinkrtyavimoodh", "score": null, "time": 1511900004, "timestamp": 1511900004000, "title": "", "type": "comment", "url": "", "text": "I am not sure what the sex offender thing had to do with CPS being called on you. Were you giving another example of a low probability event?", "parent": 15800596.0, "deleted": null, "dead": null, "descendants": null, "id": 15800989, "ranking": null, "date": 1511900004000, "year": 2017}, {"by": "Pulcinella", "score": null, "time": 1511900170, "timestamp": 1511900170000, "title": "", "type": "comment", "url": "", "text": "Don\u2019t know what it\u2019s like on the \u201creceiving end\u201d but in my state when I notify CPS it\u2019s a very, very involved process that usually takes at least an hour. You can do it by phone or internet form and both require extensive information about the child, parents, family members, address, etc. It\u2019s definitely not something you can just do because you don\u2019t like your neighbors and want them arrested in five minutes.", "parent": 15800918.0, "deleted": null, "dead": null, "descendants": null, "id": 15801016, "ranking": null, "date": 1511900170000, "year": 2017}, {"by": "tomc1985", "score": null, "time": 1511900556, "timestamp": 1511900556000, "title": "", "type": "comment", "url": "", "text": "Growing up I was allowed to roam the grounds of wherever we were freely unsupervised. As with many of us gen-Y&#x27;ers. In spending time with various women with kids I have noticed that parents nowadays are way more likely<p>a) hover over their children (in a playground for example) so as to be no more than 10-20 feet away from them at all times<p>b) eyeing any adults in the play area without a nearby child suspiciously<p>c) Occasionally chastising or otherwise harassing parents that don&#x27;t do this, in the same way that nosy people chastise others over their actions.<p>Given the prevalence of stories and my own observations, I think you are wrong. I also think the quality of the institutions being talked about vary greatly depending on where you are. When I was in high school my friend had CPS called on her parents after a particularly nasty fight (her family was prone to loud fights) and it took them a couple weeks to convince CPS to get off their backs.", "parent": 15800364.0, "deleted": null, "dead": null, "descendants": null, "id": 15801095, "ranking": null, "date": 1511900556000, "year": 2017}, {"by": "vamin", "score": null, "time": 1511902054, "timestamp": 1511902054000, "title": "", "type": "comment", "url": "", "text": "I know you&#x27;re already getting a torrent of anecdotes right now, but I really think it&#x27;s important not to sweep this under the rug. I have a co-worker who lives in a nice suburban neighborhood and had CPS called on him because his child was allowed to play in the park across the street from his house unsupervised. His child was interviewed by a social worker, his house was searched for drugs, the contents of his fridge were evaluated, and he had to go to court. In my state, it only takes one person to call, and once that person calls, an investigation is legally required, regardless of how spurious.", "parent": 15800364.0, "deleted": null, "dead": null, "descendants": null, "id": 15801392, "ranking": null, "date": 1511902054000, "year": 2017}, {"by": "tomc1985", "score": null, "time": 1511904933, "timestamp": 1511904933000, "title": "", "type": "comment", "url": "", "text": "&quot;you can have CPS called on you&quot; doesn&#x27;t imply a direct relationship between the reporter and CPS. The end result is the what matters.", "parent": 15800952.0, "deleted": null, "dead": null, "descendants": null, "id": 15802010, "ranking": null, "date": 1511904933000, "year": 2017}, {"by": "Pulcinella", "score": null, "time": 1511906844, "timestamp": 1511906844000, "title": "", "type": "comment", "url": "", "text": "I think it does. The statement is very clear and straight forward. It is a different statement than \u201cyou could be investigated by CPS for leaving your child on a parking garage.\u201d", "parent": 15802010.0, "deleted": null, "dead": null, "descendants": null, "id": 15802309, "ranking": null, "date": 1511906844000, "year": 2017}, {"by": "jrochkind1", "score": null, "time": 1512496041, "timestamp": 1512496041000, "title": "", "type": "comment", "url": "", "text": "You&#x27;d be surprised how crazy CPS is if you aren&#x27;t wealthy and white. They don&#x27;t actually seem to even need any &quot;evidence&quot; really.<p>I agree it seems unlikely, though, especially if you are relatively wealthy and white. (Also who is hacking into your system with this as their goal and how likely is that? On the other hand, in the age of swatting, anything seems possible.)<p>As we continue to advance universal surveillance though (self- and other-), I think we will start to see stuff like this happening more. It&#x27;ll take a little while.", "parent": 15853603.0, "deleted": null, "dead": null, "descendants": null, "id": 15853702, "ranking": null, "date": 1512496041000, "year": 2017}, {"by": "crooked-v", "score": null, "time": 1512496559, "timestamp": 1512496559000, "title": "", "type": "comment", "url": "", "text": "&gt; You&#x27;d be surprised how crazy CPS is if you aren&#x27;t wealthy and white. They don&#x27;t actually seem to even need any &quot;evidence&quot; really.<p>For example (white, but not wealthy): <a href=\"https:&#x2F;&#x2F;www.usatoday.com&#x2F;story&#x2F;news&#x2F;nation&#x2F;2015&#x2F;04&#x2F;13&#x2F;parents-investigated-letting-children-walk-alone&#x2F;25700823&#x2F;\" rel=\"nofollow\">https:&#x2F;&#x2F;www.usatoday.com&#x2F;story&#x2F;news&#x2F;nation&#x2F;2015&#x2F;04&#x2F;13&#x2F;parent...</a><p>&gt; Montgomery County police and county Children&#x27;s Protective Services are jointly investigating the Meitivs of Silver Spring for allowing their children to walk repeatedly around the neighborhood alone. The parents say they know where their children are but are allowing them independence.<p>&gt; Officers picked up the children about two blocks from home, Rafi said, telling them they would drop them off at home. Instead, the two sat in a patrol car for 2\u00bd hours then were taken about 10 miles away to Children&#x27;s Protective Services offices in Rockville, Md.", "parent": 15853702.0, "deleted": null, "dead": null, "descendants": null, "id": 15853821, "ranking": null, "date": 1512496559000, "year": 2017}, {"by": "irrational", "score": null, "time": 1512499763, "timestamp": 1512499763000, "title": "", "type": "comment", "url": "", "text": "&gt;You&#x27;d be surprised how crazy CPS is if you aren&#x27;t wealthy and white.<p>Even then, I have some relatives (white and middle-class) that lived in an apartment. The people on the other side of the wall reported them for yelling at their kids. Fortunately for them they had a friend at the CPS who called them and told them that CPS was coming the next morning to take away their kids. So they packed up and moved out of state that night.", "parent": 15853702.0, "deleted": null, "dead": null, "descendants": null, "id": 15854471, "ranking": null, "date": 1512499763000, "year": 2017}, {"by": "jrochkind1", "score": null, "time": 1512499887, "timestamp": 1512499887000, "title": "", "type": "comment", "url": "", "text": "Yeah, good point, it&#x27;s not limited to the white and not wealthy, but like everything else in society, the more resources you got, the more you can avoid them (and being white is indeed a resource in our society). But yeah, CPS is scary shit.", "parent": 15854471.0, "deleted": null, "dead": null, "descendants": null, "id": 15854494, "ranking": null, "date": 1512499887000, "year": 2017}, {"by": "musage", "score": null, "time": 1512499979, "timestamp": 1512499979000, "title": "", "type": "comment", "url": "", "text": "&gt; You&#x27;d be surprised how crazy CPS is if you aren&#x27;t wealthy and white.<p>When people say they have nothing to hide, they&#x27;re also saying they have no abuse of power to confront, and nobody who is persecuted to stand with in solidarity. And for some reason, they think they&#x27;re the standard, or that any of this is new. Look into history, with any totalitarian government, any oppressive king, you&#x27;ll always find people going &quot;doesn&#x27;t affect <i>me</i>&quot;. It&#x27;s as old, and as valuable, as dirt.", "parent": 15853702.0, "deleted": null, "dead": null, "descendants": null, "id": 15854518, "ranking": null, "date": 1512499979000, "year": 2017}, {"by": "millzlane", "score": null, "time": 1513106149, "timestamp": 1513106149000, "title": "", "type": "comment", "url": "", "text": "Technically I was a free range latch key kid. I&#x27;m not sure how involved CPS here is involved in the bad parenting cases. They&#x27;re probably overwhelmed with drug addicted parents and kids who&#x27;s parents are criminals.<p>I think bad parents should be punished but I&#x27;m wouldn&#x27;t go as far as to say they&#x27;re criminals. It&#x27;s a very slippery slope. I feel like a voluntary reversible sterilization subsidies from the government would be a pretty good idea.", "parent": 15861956.0, "deleted": null, "dead": null, "descendants": null, "id": 15908521, "ranking": null, "date": 1513106149000, "year": 2017}, {"by": "watt", "score": null, "time": 1513526137, "timestamp": 1513526137000, "title": "", "type": "comment", "url": "", "text": "What matters is what YOU do, and what your children are allowed to do. What matters, is that if you let your children play outside alone and unsupervised, tomorrow they will be taken away by CPS or equivalent protective services organization of your country[1].<p>([1] In Germany - Jugendamt, though I find Germans are surprisingly good with allowing the children autonomy they need. Getting a call from Jugendamt however is really really scary. It&#x27;s quite awful how these agencies are used as a blunt baton <i>against</i> the very families they are supposed(?) to protect and help.)", "parent": 15945709.0, "deleted": null, "dead": null, "descendants": null, "id": 15946214, "ranking": null, "date": 1513526137000, "year": 2017}, {"by": "ransom1538", "score": null, "time": 1513527946, "timestamp": 1513527946000, "title": "", "type": "comment", "url": "", "text": "Plea-bargaining is totally insane.<p>Quick example, you own a gun in your Florida home.  Unbeknownst to you, your (idiot) cousin smokes a joint in the driveway before leaving and leaves joint on your table.  Neighbors call police, they enter your home (based on smell) and find a gun and a joint.  You are looking at 10 YEARS in federal jail [i] as a prohibited gun owner, a few months in county (for the joint), possibly some time in state prison for child endangerment (kids were home), and the CPS took your kids that <i>day</i>.  IT DOES NOT MATTER if your are innocent or guilty you will do a plea deal. No jury for you. US prosecutors rely on <i>extremely</i> harsh <i>possible</i> sentences to bully innocent defendants into jail.<p><a href=\"https:&#x2F;&#x2F;www.justice.gov&#x2F;sites&#x2F;default&#x2F;files&#x2F;usao-ut&#x2F;legacy&#x2F;2013&#x2F;06&#x2F;03&#x2F;guncard.pdf\" rel=\"nofollow\">https:&#x2F;&#x2F;www.justice.gov&#x2F;sites&#x2F;default&#x2F;files&#x2F;usao-ut&#x2F;legacy&#x2F;2...</a>", "parent": 15945881.0, "deleted": null, "dead": null, "descendants": null, "id": 15946333, "ranking": null, "date": 1513527946000, "year": 2017}, {"by": "Godel_unicode", "score": null, "time": 1513533134, "timestamp": 1513533134000, "title": "", "type": "comment", "url": "", "text": "&gt; we shouldn&#x27;t call this the land of the free anymore.<p>Did you miss the part where they won and CPS released a statement that the cops overreacted? What more American thing is there than repeatedly disobeying wrong instructions from the government?<p>Their kids learned that in America if you didn&#x27;t do anything wrong you can challenge The System and win. Seems like a lesson worth teaching to me!", "parent": 15946406.0, "deleted": null, "dead": null, "descendants": null, "id": 15946767, "ranking": null, "date": 1513533134000, "year": 2017}, {"by": "somethingsimple", "score": null, "time": 1513535368, "timestamp": 1513535368000, "title": "", "type": "comment", "url": "", "text": "Do you mind sharing in what state you live? I wonder if there\u2019s a cultural difference between the West Coast and other parts of the country when it comes to calling CPS on people.<p>We live in WA and our 9 year old daughter walks back from the school bus stop alone everyday, then stays alone at home for 3-4 hours until we come back from work (we let her because we deem her mature enough for that, before age 9 she went to an after school program). A few of our neighbors and even the building management people know about it, and don\u2019t seem to take issue with it. The building administrator actually said something like \u201cooh she\u2019s a big girl now! :)\u201d when we requested an extra key for our daughter.<p>So there\u2019s that, and also that every CPS story I\u2019ve heard or read on the news seems to have happened in the Midwest or the East Coast.", "parent": 15944750.0, "deleted": null, "dead": null, "descendants": null, "id": 15946940, "ranking": null, "date": 1513535368000, "year": 2017}, {"by": "jason_slack", "score": null, "time": 1513577734, "timestamp": 1513577734000, "title": "", "type": "comment", "url": "", "text": "I live in upstate NY and I think that here if my 9 year old walked home alone everyday and then stayed in our house alone everyday some people might call CPS is they knew about it or noticed it.<p>I wish I understood why. Perhaps it is economics related? I should research this more because it would be interesting to understand.", "parent": 15946940.0, "deleted": null, "dead": null, "descendants": null, "id": 15949799, "ranking": null, "date": 1513577734000, "year": 2017}, {"by": "w8rbt", "score": null, "time": 1513600237, "timestamp": 1513600237000, "title": "", "type": "comment", "url": "", "text": "It seems the malware was installed on an engineering workstation connected to a SIS (Safety Instrumented System).<p><pre><code>    https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Safety_instrumented_system\n</code></pre>\nThe only purpose of a SIS in a CPS (Cyber Physical System) is to take over and bring the plant&#x2F;processes down safely when things go wrong but before they get out of control.<p>So it seems it did its job here. The big question is how the malware got onto the engineering workstation to begin with. These are usually very segmented (firewalls,  data diodes, etc.)", "parent": 15947575.0, "deleted": null, "dead": null, "descendants": null, "id": 15951177, "ranking": null, "date": 1513600237000, "year": 2017}, {"by": "rurban", "score": null, "time": 1513785713, "timestamp": 1513785713000, "title": "", "type": "comment", "url": "", "text": "I don&#x27;t understand what he is talking about.\nA very simple one-pass recursive regex matcher is trivial to write. I wrote the one for asterisk in 2003. No fancy CPS needed.<p><a href=\"http:&#x2F;&#x2F;asteriskguru.com&#x2F;archives&#x2F;asterisk-dev-better-pattern-matcher-vt42988.html\" rel=\"nofollow\">http:&#x2F;&#x2F;asteriskguru.com&#x2F;archives&#x2F;asterisk-dev-better-pattern...</a>", "parent": 15969558.0, "deleted": null, "dead": null, "descendants": null, "id": 15970683, "ranking": null, "date": 1513785713000, "year": 2017}, {"by": "burntsushi", "score": null, "time": 1513788866, "timestamp": 1513788866000, "title": "", "type": "comment", "url": "", "text": "&gt; One drawback of the CPS technique in C is its stack usage, especially because it is quite hard to understand at all what is going on, which makes it very hard to predict how much stack is used. Usually, I get SIGSEGV from pointer misuses (typically NULL), but in debugging this program, instead I got an infinite recursion causing SIGSEGV a couple of times.<p>I think the key missing drawback that isn&#x27;t stated here is that even if you fix all of your logical bugs, then unless every function call is tail-call optimized by the compiler, then your parser isn&#x27;t quite safe for untrusted regular expressions. e.g., A user could write `(((((...a...)))))`, and if you don&#x27;t guard against it with some hard limit on nesting depth, then you&#x27;re vulnerable to stack overflows. So let&#x27;s say you implement nesting limits. What limit should be set? &#x2F;shrug<p>This is why I write my regex parsers without recursion and instead use an explicit stack on the heap. It is then a bit easier to more robustly manage nesting limits.", "parent": 15969558.0, "deleted": null, "dead": null, "descendants": null, "id": 15971262, "ranking": null, "date": 1513788866000, "year": 2017}, {"by": "kmill", "score": null, "time": 1513789197, "timestamp": 1513789197000, "title": "", "type": "comment", "url": "", "text": "If I am reading your code correctly, I don&#x27;t see full backtracking search.  The CPS version should implement this (though I find their particular CPS style rather difficult to skim, so I&#x27;m not confident without running it).", "parent": 15970683.0, "deleted": null, "dead": null, "descendants": null, "id": 15971327, "ranking": null, "date": 1513789197000, "year": 2017}, {"by": "tinkersleep", "score": null, "time": 1513797412, "timestamp": 1513797412000, "title": "", "type": "comment", "url": "", "text": "You are absolutely right!<p>But I&#x27;d like to stress that this is a problem of this implementation, but not of the CPS technique as such: CPS is just not used to its extreme here to allow for tail-call optimisation of all functions, which would then result in O(1) stack usage.<p>The problem with this implementation is that gcc cannot tail-call optimise every function call, because continuation results are evaluated in the middle of the computation (e.g. for all &#x27;or&#x27; decisions).  This means the compiler cannot discard the old stack frame.<p>I should try harder and see what gcc can then do for me! :-)", "parent": 15971262.0, "deleted": null, "dead": null, "descendants": null, "id": 15972782, "ranking": null, "date": 1513797412000, "year": 2017}, {"by": "phaedrus", "score": null, "time": 1513814887, "timestamp": 1513814887000, "title": "", "type": "comment", "url": "", "text": "This is very close to logic programming, even down to the use of the return codes for &quot;exception&quot; handling (you can re-re-interpret the &quot;return 0 means exception&quot; as meaning logical negation-as-failure).  Compare the Castor C++ logic programming library, which defines logic relations as functions which return true if they bind variables or false if they failed.<p>The use of continuation passing style is also apropos: compare the LC++ logic programming library which uses CPS to implement lazy streams for query evaluation.  In LC++ an &quot;OR&quot; relation is implemented by calling the first argument with the continuation, and then the second argument with the continuation.  An &quot;AND&quot; is similar, except it chains the continuations.<p>My personal interest in this topic is that I believe it should be possible to use continuation passing style and callbacks together to make an evaluation engine which &quot;reorganizes&quot; the C-stack to aid in debugging.  It would work like this: the user code would utilize CPS, but the runtime engine, not the user code, has final say over where the continuation actually jumps.  By priming the linked-list of continuations + context data the right way, the runtime could &quot;stack the deck&quot; so that when the user functions run, it creates a &quot;fake&quot; callstack that looks like a certain series of operations ran, which in reality may have actually been run a long time ago or may be composed of pieces of different chains of computation.  In this way, the engine could communicate to the programmer + debugger a semantically meaningful summary of an otherwise convoluted &#x2F; too detailed original computation.  Or restart a computation which had to be previously abandoned due to needing data that wasn&#x27;t available yet.  I call this technique &quot;stacking the stack&quot; (in analogy to stacking the deck to cheat at a card game).<p>Also, although your technique of calling the continuation twice as in &quot;return cont(a * a, data) &amp;&amp; cont(a<i>a</i>a, data);&quot; is perfectly valid (in fact, this code is also a syntactically valid Castor logic expression), here&#x27;s another way it could be done:  convert the nondeterministic choice into a deterministic one by lifting the information as to which branch is being executed into a variable which can be passed in.  It would then look like:<p>int foo(int * next_part, int a, cont_t cont, data_t * data)<p>{<p><pre><code>  switch (( * next_part)++)\n\n  {\n\n  case 0: return cont(a * a, data); \n\n  case 1: return cont(a * a * a, data); \n\n  default: return 0; &#x2F;&#x2F; fail when exhausted \n\n  };\n</code></pre>\n}<p>You&#x27;re already doing this, sort of, in the regex engine when you do &quot;switch ( * p)&quot;.  The difference is, there, you&#x27;re choosing between alternatives based on a concrete property of the input character.  If you like, think of the &quot;next_part&quot; variable as an intangible or out-of-band property of the current input.  Once you do that, you could even turn all of you &quot;switch ( * p)&quot; statements into &quot;switch (( * next_part)++)&quot; and simply _assume_ *p matched that case (we&#x27;ll just fail inside the step if it didn&#x27;t match, and backtrack).  Congratulations, now you&#x27;re doing logic programming!!", "parent": 15969558.0, "deleted": null, "dead": null, "descendants": null, "id": 15975139, "ranking": null, "date": 1513814887000, "year": 2017}, {"by": "tinkersleep", "score": null, "time": 1513819589, "timestamp": 1513819589000, "title": "", "type": "comment", "url": "", "text": "Thanks!  It was fun tinkering.<p>For the regex problem, because of the required backtracking, data usage is definitely not O(1), so the continuation data will not be storable on the stack for an O(1) stack tail-call-only CPS version of regex.  That context data for the continuations will need to go to the heap, and so we are basically back to how you&#x27;d avoid recursion to avoid unbounded stack: by using some data structures on the heap.  And at that point, you could just use more straight-forward data structures than those needed for CPS here.<p>Anyway, the one-phase parsing+matching is still interesting, I think, and it is worth a try to get it to work in O(1) stack by storing the continuation data on the heap.  So after fixing SIGSEGVs for infinite recursions, I will go back to fixing memory leaks. :-)", "parent": 15974823.0, "deleted": null, "dead": null, "descendants": null, "id": 15975578, "ranking": null, "date": 1513819589000, "year": 2017}, {"by": "AmVess", "score": null, "time": 1515001648, "timestamp": 1515001648000, "title": "", "type": "comment", "url": "", "text": "My parents let me walk to the corner store alone when I was 5. By the time I was 8, I&#x27;d be gone all day doing who knows what; the big rule was to be home for dinner.<p>Allowing your kids to roam around like that these days will get CPS called on you.", "parent": 16061519.0, "deleted": null, "dead": null, "descendants": null, "id": 16063103, "ranking": null, "date": 1515001648000, "year": 2018}, {"by": "Analemma_", "score": null, "time": 1515003142, "timestamp": 1515003142000, "title": "", "type": "comment", "url": "", "text": "&gt; But if anybody gets nosey and calls child protection, I\u2019m in a world of hurt from which I\u2019ll probably never emerge.<p>I think this is a really overblown fear. Yeah, everyone &quot;totally heard about someone&quot; who had CPS called on them because they let their kid roam around, but I think this is mostly an urban legend about as likely as a terrorist attack. CPS usually has way more on their plate than they can handle with <i>actual</i> issues, I don&#x27;t think they give a damn about free-range children.", "parent": 16063270.0, "deleted": null, "dead": null, "descendants": null, "id": 16063411, "ranking": null, "date": 1515003142000, "year": 2018}, {"by": "abritinthebay", "score": null, "time": 1515003979, "timestamp": 1515003979000, "title": "", "type": "comment", "url": "", "text": "It happened to a friend of mine - twice even.<p>However, and I think this is the important thing, CPS totally didn\u2019t care after a quick 15min interview.<p>The second time they even apologized and said they were mostly showing up because they <i>had to</i>.<p>It was the same local busy-body calling them both times btw.", "parent": 16063411.0, "deleted": null, "dead": null, "descendants": null, "id": 16063555, "ranking": null, "date": 1515003979000, "year": 2018}, {"by": "naasking", "score": null, "time": 1515009609, "timestamp": 1515009609000, "title": "", "type": "comment", "url": "", "text": "&gt; CPS usually has way more on their plate than they can handle with actual issues<p>Except they are required by law to follow-up on all reports. So you will be interviewed and inconvenienced at the very least.", "parent": 16063411.0, "deleted": null, "dead": null, "descendants": null, "id": 16064487, "ranking": null, "date": 1515009609000, "year": 2018}, {"by": "mywittyname", "score": null, "time": 1515019693, "timestamp": 1515019693000, "title": "", "type": "comment", "url": "", "text": "Even if you wanted to, it&#x27;s de facto illegal to do so.  There&#x27;s a very real risk of CPS being called on you or getting cited for child endangerment for this.<p>My parents live in a subdivision with several parks that are completely empty.  I took my niece to one and discovered that&#x27;s apparently suspicious behavior to use a public park in the middle of a weekend afternoon after a local PD officer stopped by to &quot;have a chat.&quot;<p>The police also literally barricade the subdivision for Halloween.  Nobody comes in or out between the hours of 7 &amp; 9.", "parent": 16065420.0, "deleted": null, "dead": null, "descendants": null, "id": 16066128, "ranking": null, "date": 1515019693000, "year": 2018}, {"by": "Para2016", "score": null, "time": 1516055942, "timestamp": 1516055942000, "title": "", "type": "comment", "url": "", "text": "For sure it wasn&#x27;t a serious comment, but there is a more serious facet of it I think. If our states aren&#x27;t able to properly deal with the poverty that&#x27;s already here, why are we inviting more of it in?<p>US psychiatric, APS, and CPS services are poor, and can&#x27;t adequately deal with the needs of those already here. It&#x27;s only going to get worse.", "parent": 16153976.0, "deleted": null, "dead": null, "descendants": null, "id": 16154098, "ranking": null, "date": 1516055942000, "year": 2018}, {"by": "sctb", "score": null, "time": 1516221843, "timestamp": 1516221843000, "title": "", "type": "comment", "url": "", "text": "If I&#x27;m understanding your terminology, Guile already has a kind of CPS as its mid-level intermediate form: <a href=\"https:&#x2F;&#x2F;wingolog.org&#x2F;archives&#x2F;2015&#x2F;07&#x2F;27&#x2F;cps-soup\" rel=\"nofollow\">https:&#x2F;&#x2F;wingolog.org&#x2F;archives&#x2F;2015&#x2F;07&#x2F;27&#x2F;cps-soup</a>. There&#x27;s a long history of Lisp languages using a \u201cMIR\u201d of sorts, typically CPS, SSA, or ANF.", "parent": 16171106.0, "deleted": null, "dead": null, "descendants": null, "id": 16171607, "ranking": null, "date": 1516221843000, "year": 2018}, {"by": "somecontext", "score": null, "time": 1516894332, "timestamp": 1516894332000, "title": "", "type": "comment", "url": "", "text": "The short answer is probably &quot;no&quot;.<p>Another comment <a href=\"https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=16231191\" rel=\"nofollow\">https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=16231191</a> tried to even find the source of the number, more or less unsuccessfully.  The purported origin of the statistic is the Current Population Survey, which has the following comments on &quot;Income&quot;: &quot;Data on consumer income collected in the CPS by the Census Bureau cover money income received (exclusive of certain money receipts such as capital gains) before payments for personal income taxes, Social Security, union dues, Medicare deductions, etc.  Also, money income does not reflect the fact that some households receive part of their income in the form of non-money transfers such as food stamps, health benefits, subsidized housing, and energy assistance; that many farm households receive non-money income in the form of rent free housing and goods produced and consumed on the farm; or that non-money income is received by some nonfarm residents that often takes the form of the use of business transportation and facilities, or full or partial contributions for retirement programs, medical and educational expenses, etc.  These elements should be considered when com-paring income levels. Moreover, readers should be aware that for many different reasons there is a tendency in household surveys for respondents to under report their income. From an analysis of independently derived income estimates, it has been determined that wages and salaries tend to be much better reported than such income types as public assistance, Social Security, and net income from interest, dividends, rents, etc.&quot;<p>The Census Bureau excludes capital gains&#x2F;losses, noncash benefits, and tax credits in its usual measures of poverty: <a href=\"https:&#x2F;&#x2F;www.census.gov&#x2F;topics&#x2F;income-poverty&#x2F;poverty&#x2F;guidance&#x2F;poverty-measures.html\" rel=\"nofollow\">https:&#x2F;&#x2F;www.census.gov&#x2F;topics&#x2F;income-poverty&#x2F;poverty&#x2F;guidanc...</a><p>If we had a Universal Basic Income in the United States delivered through the IRS, the Census Bureau and its poverty rate might not notice.", "parent": 16230925.0, "deleted": null, "dead": null, "descendants": null, "id": 16231443, "ranking": null, "date": 1516894332000, "year": 2018}, {"by": "cryptonector", "score": null, "time": 1516901630, "timestamp": 1516901630000, "title": "", "type": "comment", "url": "", "text": "There is no good approach to avoiding asynchrony.  There&#x27;s been nothing new in this department for decades.  You have these choices:<p><pre><code>     - async, continuation passing style code\n     - async with delineated continuations to make snippets look synchronous which aren&#x27;t actually\n     - cooperative multi-tasking (co-routines with async I&#x2F;O under the covers)\n     - threading (preemtible multitasking)\n</code></pre>\nEach one of this choices has its problems, and all can be characterized as where on the spectrum of explicit vs. implicit state keeping you want to be.  For example, with threads and co-routines you keep a lot of implicit state in the call stack, whereas with async CPS you make <i>all</i> of the state fully explicit.  Async CPS code is the least problematic once you wrap your mind around it, but it does have &quot;mind warp&quot; as a hard requirement.<p>There are times, of course, when your code is very serial, and then you really do benefit from co-routines&#x2F;threads.  For example, PuTTY&#x27;s implementation of the SSH version exchange, key exchange, and user authentication protocols, is one HUGE C function that is actually running as a co-routine which cooperates with the UI side, with async I&#x2F;O under the covers.  The PuTTY approach is <i>wonderful</i> for that particular case: those parts of the SSH protocols are extremely serial, and the resulting serial-<i>looking</i> code is very very easy on the eyes (so much so that it makes up for the enormity of the function that implements it!).  So it pays to be able to reach for co-routines sometimes, but not always, and I&#x27;d say not even most of the time.<p>Programmers today simply have to be prepared to deal with everything-is-async codebases, and they should be prepared to create codebases where everything is async from day zero.", "parent": 16232553.0, "deleted": null, "dead": null, "descendants": null, "id": 16232674, "ranking": null, "date": 1516901630000, "year": 2018}, {"by": "cryptonector", "score": null, "time": 1516907519, "timestamp": 1516907519000, "title": "", "type": "comment", "url": "", "text": "&quot;syntactic tools&quot; -&gt; implicit state.<p>There&#x27;s only so much the compiler can do for you.  At some point you have to bear some of the cognitive load of state compression (which is really all async is about).<p>Multi-processing was great, but it doesn&#x27;t scale to today&#x27;s world, and neither does multi-threading.  It doesn&#x27;t matter in the least that those two technologies allow the programmer to write serial-looking code that does not execute serially.  Those technologies cannot compress program state embodied in the call stacks and heap, therefore they do not scale (because they consume too much memory, have worse cache footprints and higher resident set size, involve heavy-duty context switching, and so on).<p>In terms of <i>actual</i> novelty in this space in computer science, I don&#x27;t believe there&#x27;s been anything new since the 80s.  Everything that seems to be new is an old idea rediscovered, or a new take on an old idea, so either way not new at all.<p>CPS -&gt; least implicit state.<p>Process -&gt; most implicit state.<p>In between those two there are a few options, but nothing is a panacea, and ultimately CPS is an option you have to be prepared to use.<p>Less implicit state -&gt; explicit state, which you can compress well because you understand its semantics.<p>Less state -&gt; less load for the same work -&gt; more work can be done.<p>In some contexts (e.g., the UI) this is a very big deal, which is why GUIs are async.", "parent": 16232878.0, "deleted": null, "dead": null, "descendants": null, "id": 16233599, "ranking": null, "date": 1516907519000, "year": 2018}, {"by": "avodonosov", "score": null, "time": 1517976654, "timestamp": 1517976654000, "title": "", "type": "comment", "url": "", "text": "References about Java? I was looking for coroutines &#x2F; CPS for Java recently and found no JSRs and no plans to include it into the language anytime soon.", "parent": 16318535.0, "deleted": null, "dead": null, "descendants": null, "id": 16322193, "ranking": null, "date": 1517976654000, "year": 2018}, {"by": "randcraw", "score": null, "time": 1518446248, "timestamp": 1518446248000, "title": "", "type": "comment", "url": "", "text": "The persistence of the British CPS in pursuing Assange shows how tight the militaries are between the US and Commonwealth nations.  AFAIK, Britain had no personal stake in Wikileaks &#x2F; Assange.  But because America badly wanted to suppress Wikileaks and its ilk from future revelations, Britain has persisted in its surrogate prosecution of Assange.<p>I wonder, is there no blowback among Brits for the Crown so baldly adopting the role of America&#x27;s attack dog?  Or is that de rigueur now?", "parent": 16358457.0, "deleted": null, "dead": null, "descendants": null, "id": 16358789, "ranking": null, "date": 1518446248000, "year": 2018}, {"by": "randcraw", "score": null, "time": 1518448920, "timestamp": 1518448920000, "title": "", "type": "comment", "url": "", "text": "Crime?  I&#x27;m aware only that a charge was made against Assange by an individual for an infraction that had nothing to do with Wikileaks.  This is strikingly convenient since it bypasses the introduction of any Wikileak-related  evidence in Assange&#x27;s prosecution, and thus prohibits it.<p>In light of Assange&#x27;s political activity, and now the <i>astonishing</i> level of CPS persistence in pursuing him, the Swedish charge against him appears: 1) awfully convenient, 2) increasingly implausible (i.e. politically trumped up), and of course, 3) not a crime until his guilt is proven.", "parent": 16358922.0, "deleted": null, "dead": null, "descendants": null, "id": 16359133, "ranking": null, "date": 1518448920000, "year": 2018}, {"by": "guitarbill", "score": null, "time": 1518450040, "timestamp": 1518450040000, "title": "", "type": "comment", "url": "", "text": "Given the eagerness of the CPS to prosecute, seems like paranoia was a good strategy, no? There&#x27;s some hidden agenda here, and it&#x27;s hard to believe it&#x27;s something as mundane as CPS bloke doesn&#x27;t want a new case before he retires when emails conveniently get &quot;deleted&quot;. I think you can expect better from lawyers. But it&#x27;s especially galling for a lawyer who works for the government, they should have procedures to retain this information.<p>The only thing that doesn&#x27;t make sense to me is fleeing to the UK, who&#x27;s government isn&#x27;t known for it&#x27;s integrity.", "parent": 16359156.0, "deleted": null, "dead": null, "descendants": null, "id": 16359284, "ranking": null, "date": 1518450040000, "year": 2018}, {"by": "greggarious", "score": null, "time": 1518452623, "timestamp": 1518452623000, "title": "", "type": "comment", "url": "", "text": "&gt;The persistence of the British CPS in pursuing Assange shows how tight the militaries are between the US and Commonwealth nations. AFAIK, Britain had no personal stake in Wikileaks<p>They&#x27;re members of Five Eyes and NATO. So yes, they do have a &quot;personal stake&quot;.", "parent": 16358789.0, "deleted": null, "dead": null, "descendants": null, "id": 16359645, "ranking": null, "date": 1518452623000, "year": 2018}, {"by": "greggarious", "score": null, "time": 1518452771, "timestamp": 1518452771000, "title": "", "type": "comment", "url": "", "text": "&gt;In light of Assange&#x27;s political activity, and now the astonishing level of CPS persistence in pursuing him, the Swedish charge against him appears: 1) awfully convenient, 2) increasingly implausible (i.e. politically trumped up), and of course, 3) not a crime until his guilt is proven.<p>It was not &quot;trumped up&quot;. It was followed up on disproportionately, but let&#x27;s not pretend there&#x27;s no substance there.<p>And it&#x27;s hard to hold a trial to prove his guilt when he&#x27;s hiding in an embassy closet.", "parent": 16359133.0, "deleted": null, "dead": null, "descendants": null, "id": 16359664, "ranking": null, "date": 1518452771000, "year": 2018}, {"by": "belorn", "score": null, "time": 1518456593, "timestamp": 1518456593000, "title": "", "type": "comment", "url": "", "text": "&gt; The CPS lawyer also told Ny that year: \u201cIt is simply amazing how much work this case is generating. It sometimes seems like an industry. Please do not think this case is being dealt with as just another extradition.\u201d<p>Pure government corruption and waste. If those lawyers was speaking of an official policy decision of the CPS, how many laws would they be breaking?", "parent": 16358457.0, "deleted": null, "dead": null, "descendants": null, "id": 16360202, "ranking": null, "date": 1518456593000, "year": 2018}, {"by": "rayiner", "score": null, "time": 1518618239, "timestamp": 1518618239000, "title": "", "type": "comment", "url": "", "text": "i don\u2019t think \u201cpolitically progressive\u201d is a determinative. The DC suburbs skew extremely left, by are oppressive as hell for children. Some parents recently got CPS sicced on them for letting their 8 year old walk less than a mile to school.", "parent": 16375800.0, "deleted": null, "dead": null, "descendants": null, "id": 16375864, "ranking": null, "date": 1518618239000, "year": 2018}, {"by": "jlarsen", "score": null, "time": 1519729238, "timestamp": 1519729238000, "title": "", "type": "comment", "url": "", "text": "Good article! I find CPS rather refreshing to work with in JS; so much so, that I prefer using it for asynchronous code over promises or async&#x2F;await.  It turns out &#x27;callback hell&#x27; isn&#x27;t so hellish with a few simple conventions, and I feel that functional-style asynchronous code is much easier to get right than imperative-style asynchronous code.<p>Shameless plug: (<a href=\"https:&#x2F;&#x2F;github.com&#x2F;somesocks&#x2F;uchain\" rel=\"nofollow\">https:&#x2F;&#x2F;github.com&#x2F;somesocks&#x2F;uchain</a>)", "parent": 16470042.0, "deleted": null, "dead": null, "descendants": null, "id": 16472462, "ranking": null, "date": 1519729238000, "year": 2018}, {"by": "solipsism", "score": null, "time": 1519793691, "timestamp": 1519793691000, "title": "", "type": "comment", "url": "", "text": "The author, like most people who oppose common sense regulations like the banning of assault rifles, sees the world in simplistic black and white. There are <i>bad guys</i> who want to harm people, and who scoff at laws. And there are <i>good guys</i>, who follow laws, are patriots, and just want to protect their family and community.<p>Of course the world is a lot more complicated than that. Yesterday&#x27;s <i>good guy</i> is tomorrow&#x27;s school shooter. Domestic violence, alcohol, mental health disorders, theft, and accidents are all cracks in this simplistic worldview. No matter how you cut it, a world where all the good guys have assault rifles with high capacity magazines is a world where the effects of the inevitable -- the breakdown of social order -- are magnified. A shooting spree instead of a bar fight. A family murder-suicide instead of a black eye and a CPS visit. 20 school children dead instead of 10.<p>This is what NRA supporters don&#x27;t seem to understand about the world. They&#x27;re stuck in a comic book good-vs-evil story and they&#x27;re the hero.", "parent": 16480563.0, "deleted": null, "dead": null, "descendants": null, "id": 16480768, "ranking": null, "date": 1519793691000, "year": 2018}, {"by": "bjoli", "score": null, "time": 1519887915, "timestamp": 1519887915000, "title": "", "type": "comment", "url": "", "text": "I can&#x27;t wait to play with this when I get home! I loathe doing web development. I just can&#x27;t wrap my head around it, so whenever WASM gets in a position where it can easily work with the DOM (preferrably with a decent GC), I will be all over it :)<p>The project is in an interesting phase as well. Doing CPS transforms and implementing macros (the only thing really hard about writing a scheme).", "parent": 16488605.0, "deleted": null, "dead": null, "descendants": null, "id": 16490224, "ranking": null, "date": 1519887915000, "year": 2018}, {"by": "cwzwarich", "score": null, "time": 1520101606, "timestamp": 1520101606000, "title": "", "type": "comment", "url": "", "text": "I find the easiest way to think about this trick is to consider the CPS transformation of a depth-first traversal of a tree (in the case of a general graph, you use a DFS spanning tree). At each recursive call, you need to be able to produce and store the continuation upon return. Upon returning from a recursive call, you need to rematerialize the continuation.<p>The object pointer for the most recent continuation is stored in a global variable, and others are stored in a stack constructed by using pointers in objects that can now be inferred from the stacking nature of the recursion.<p>Part of the information for the code pointer for the most recent continuation is stored in the object pointer, i.e. from the object header you narrow the possibilities to process it. For an object containing N fields, you need log_2 N bits to store the field you were last processing. Since each object can appear in at most one stack frame of the recursive traversal (modulo where you put the marked check to bail out in the graph case), you need to put these log_2 N bits somewhere in the object.<p>You have a few options for where to put the bits:<p>- Find a few bits lying around where you can store them. This works pretty well for objects with few fields.<p>- Add an extra field with log_2 N bits to store them. This is the most straightforward solution for a larger object with an arbitrary number of fields.<p>- If you have an easy way of locating object headers from internal pointers, you can use internal pointers as your back pointers.<p>- Steal a few bits from every field that has a pointer value stored in it. This works because you actually only need log_2 M bits where M is the number of fields containing a pointer. The non-pointer fields can all be skipped.<p>This scheme can be generalized to implement arbitrary structural recursion on polynomial datatypes:<p><a href=\"https:&#x2F;&#x2F;www.sciencedirect.com&#x2F;science&#x2F;article&#x2F;pii&#x2F;009605519390004K\" rel=\"nofollow\">https:&#x2F;&#x2F;www.sciencedirect.com&#x2F;science&#x2F;article&#x2F;pii&#x2F;0096055193...</a>", "parent": 16507385.0, "deleted": null, "dead": null, "descendants": null, "id": 16510695, "ranking": null, "date": 1520101606000, "year": 2018}, {"by": "chunky1994", "score": null, "time": 1520260400, "timestamp": 1520260400000, "title": "", "type": "comment", "url": "", "text": "This is a fantastic comment. To provide some anecdotal evidence (which I realize isn&#x27;t much) I can compare where I grew up (Urban India) vs where I went to University (Urban North America) and can see some Stark differences.<p>There is a much more safety and risk averse culture here for kids growing up and there is an epidemic of over policing of children. Back home, I could run around and play in the streets without much parental oversight as early as the age of six. All I had to do was get back before dark and my parents made it very clear if I didn&#x27;t there would be significant consequences (I was never beaten so you can make children understand it without the threat of corporeal punishment). However here, CPS can be called if you leave your child unattended in your backyard.<p>My theory is that since boys hitting puberty are driven towards riskier behaviour thanks to testosterone (they just have more physical energy than girls that needs to be expended and mundane activities rarely suffice), this policing culture that no longer fits that style of exploration takes it upon themselves to neuter young boys. It&#x27;s a sorry state of affairs, but unfortunately I don&#x27;t see a way to fix it without getting mired down in identity politics", "parent": 16520568.0, "deleted": null, "dead": null, "descendants": null, "id": 16521257, "ranking": null, "date": 1520260400000, "year": 2018}, {"by": "Shoothe", "score": null, "time": 1521055583, "timestamp": 1521055583000, "title": "", "type": "comment", "url": "", "text": "&gt; I can&#x27;t speak to Let&#x27;s Encrypt, but the bigger companies that make their money in the CA space are insanely serious about security.<p>That&#x27;s really what I&#x27;m interested in, very high level security &#x2F; operations standards. Not that I&#x27;m intending on running the CA myself but it&#x27;s easier to understand daily trade offs knowing how it would be done if extremely high standards were absolutely necessary.<p>Unfortunately there is not much reading material online on this subject (I understand it may not be super interesting subject for most people) but reading the CPS really shed some light.<p>Thanks for your comment!", "parent": 16584937.0, "deleted": null, "dead": null, "descendants": null, "id": 16587556, "ranking": null, "date": 1521055583000, "year": 2018}, {"by": "toomuchtodo", "score": null, "time": 1521420874, "timestamp": 1521420874000, "title": "", "type": "comment", "url": "", "text": "I can appreciate we have different viewpoints. I can appreciate that, as a taxpayer, you\u2019re upset. I also see the issues with institutions like CPS (having lived in Chicago proper). I don&#x27;t believe paying teachers for outcomes when outcomes are primarily driven by influences outside of a teacher&#x27;s control [1], but that is a discussion for another thread.<p>I don\u2019t think it\u2019s a secret I\u2019m hard to the left. People first. That\u2019s how empathy works, economic efficiency be damned. Are there issues with how pension systems are gamed? Certainly, and fixes need to be put in place (benefit systems should never have the capacity to be gamed). Should public sector workers have reduced benefits or salaries because the American public has allowed their representatives to hand all the gains to Corporate America? Absolutely not.<p>We have slowly, over decades, mortgaged the future (at local, state, and federal levels, speaking specifically about the US). The bills are coming due, and everyone is surprisingly shocked. I can\u2019t tell you what to do, but I have gotten involved in politics and intend to contribute to a solution. I encourage you to do the same.<p>[1] <a href=\"https:&#x2F;&#x2F;www.mckinsey.com&#x2F;industries&#x2F;social-sector&#x2F;our-insights&#x2F;drivers-of-student-performance-insights-from-north-america\" rel=\"nofollow\">https:&#x2F;&#x2F;www.mckinsey.com&#x2F;industries&#x2F;social-sector&#x2F;our-insigh...</a>", "parent": 16615437.0, "deleted": null, "dead": null, "descendants": null, "id": 16615455, "ranking": null, "date": 1521420874000, "year": 2018}, {"by": "Analemma_", "score": null, "time": 1521650267, "timestamp": 1521650267000, "title": "", "type": "comment", "url": "", "text": "This law is coming from a good place, but I&#x27;m not sure how much it can accomplish. The pressure against &quot;free-range parenting&quot; is much more social than legal, and it doesn&#x27;t seem like the government can do a lot about that. Although maybe it will be enough knowing that if someone threatens to call CPS on you for letting your kid walk to school, you can tell them to fuck off.", "parent": 16639605.0, "deleted": null, "dead": null, "descendants": null, "id": 16639769, "ranking": null, "date": 1521650267000, "year": 2018}, {"by": "daeken", "score": null, "time": 1521650685, "timestamp": 1521650685000, "title": "", "type": "comment", "url": "", "text": "&gt; Although maybe it will be enough knowing that if someone threatens to call CPS on you for letting your kid walk to school, you can tell them to fuck off.<p>I don&#x27;t live in Utah, where this law was just enacted, but I will happily tell folks to fuck off if they threaten me with a CPS call for letting my child walk to school.  This culture of fear is unnecessary and harmful.", "parent": 16639769.0, "deleted": null, "dead": null, "descendants": null, "id": 16639853, "ranking": null, "date": 1521650685000, "year": 2018}, {"by": "jeffreyrogers", "score": null, "time": 1521651379, "timestamp": 1521651379000, "title": "", "type": "comment", "url": "", "text": "You can tell the person to fuck off, but if they call CPS then CPS still has to come talk to your kids. This happened to me as a child (not for being allowed to walk to school, but for something similarly dumb).", "parent": 16639853.0, "deleted": null, "dead": null, "descendants": null, "id": 16640001, "ranking": null, "date": 1521651379000, "year": 2018}, {"by": "graeme", "score": null, "time": 1521652510, "timestamp": 1521652510000, "title": "", "type": "comment", "url": "", "text": "A lot of posts in this thread are not understanding the point of the law. Sentiments such as:<p>&quot;Why need a law? Just let your children be free and independent. They need that.&quot;\n&quot;If anyone threatens to call CPS on me I&#x27;ll tell them to fuck off.&quot;<p>That&#x27;s why the law is needed! Currently, in a lot of jurisdictions, do either of those two things and your kids can arbitrarily be taken from you, legally, by the government.<p>This law makes it so that allowing children normal independence <i>is legal</i>. Because slowly administrative agencies started to take a stricter view on what was &quot;safe&quot;.", "parent": 16639605.0, "deleted": null, "dead": null, "descendants": null, "id": 16640241, "ranking": null, "date": 1521652510000, "year": 2018}, {"by": "doitLP", "score": null, "time": 1521653082, "timestamp": 1521653082000, "title": "", "type": "comment", "url": "", "text": "Very true. I used to volunteer with an advocacy group that helped parents whose kids were wrongly taken by CPS and what I saw of the system scared the crap out of me. It does some good work but the sheer stupidity of some of the employees, the arbitrary powers and lack of due process was the stuff of nightmares.", "parent": 16640241.0, "deleted": null, "dead": null, "descendants": null, "id": 16640370, "ranking": null, "date": 1521653082000, "year": 2018}, {"by": "rayiner", "score": null, "time": 1521653303, "timestamp": 1521653303000, "title": "", "type": "comment", "url": "", "text": "My friend had a babysitter report her to CPS because there were stuffed animals in her 7-month old&#x27;s crib, which apparently contradicts some guidance. CPS closed the investigation without doing anything, but not before causing a lot of unnecessary worry.", "parent": 16640241.0, "deleted": null, "dead": null, "descendants": null, "id": 16640409, "ranking": null, "date": 1521653303000, "year": 2018}, {"by": "eco", "score": null, "time": 1521653700, "timestamp": 1521653700000, "title": "", "type": "comment", "url": "", "text": "Child abuse and neglect laws started in the 1940s after a series of articles were published by a doctor with accounts of children with injuries clearly caused by adults and by the 1970s most states had passed them. They were well meaning and only intended to protect children from real harm.<p>The problem is they are (somewhat necessarily) vague. They didn&#x27;t think the laws would be used for trivial things but words like &quot;endangerment&quot; can easily be applied to letting your kid walk home alone.<p>This is the first real attempt that I know of to scale back some of it and I suspect we&#x27;ll see more of this in other states as society realizes some of this has gone to far.<p>It should also be said that this is just codifying what was basically already the case. Utah&#x27;s Child Protective Services supported this law and already considered the behaviors the law protects to be perfectly fine but they were obligated to open investigations anyway. Now they don&#x27;t have to. It also prevents Utah&#x27;s CPS in the future from doing some of the ridiculous actions that have occurred in other states if the attitude of the workers&#x2F;leadership at Utah&#x27;s CPS shifted.", "parent": 16639605.0, "deleted": null, "dead": null, "descendants": null, "id": 16640473, "ranking": null, "date": 1521653700000, "year": 2018}, {"by": "rayiner", "score": null, "time": 1521653860, "timestamp": 1521653860000, "title": "", "type": "comment", "url": "", "text": "&gt; Isn&#x27;t the reverse better?<p>No. Being a kid is comically safe these days, there is room to move in the other direction. It&#x27;s also a matter of setting cultural norms. When CPS issues a civil citation for reporting someone for having stuffed animals in the crib, that tells people that worrying about such frivolities is not okay.", "parent": 16639995.0, "deleted": null, "dead": null, "descendants": null, "id": 16640499, "ranking": null, "date": 1521653860000, "year": 2018}, {"by": "maloney", "score": null, "time": 1521654707, "timestamp": 1521654707000, "title": "", "type": "comment", "url": "", "text": "There is a difference between a new born and a 7 month old. The latter is extremly unlikly of suffocating on a blanket or a stuffed animal and calling CPS in this case is abhorrent. There is certinaly a step before you call someone to take there kid away", "parent": 16640503.0, "deleted": null, "dead": null, "descendants": null, "id": 16640628, "ranking": null, "date": 1521654707000, "year": 2018}, {"by": "OtterCoder", "score": null, "time": 1521654786, "timestamp": 1521654786000, "title": "", "type": "comment", "url": "", "text": "In Utah? Perfectly sane. The law just codifies Utah CPS practices. Other states with similar laws? You could have your children confiscated if they weren&#x27;t in visual range.", "parent": 16640030.0, "deleted": null, "dead": null, "descendants": null, "id": 16640641, "ranking": null, "date": 1521654786000, "year": 2018}, {"by": "scurvy", "score": null, "time": 1521654999, "timestamp": 1521654999000, "title": "", "type": "comment", "url": "", "text": "This guidance is beyond suspect. It falls into the category of &quot;drink 8 glasses of water a day.&quot; Doctors parrot it, but they have no foundation for saying this and no one knows when&#x2F;why they started saying it. But they all say it.<p>Any serious medical professional worth a damn will immediately question the SIDS &quot;guidance.&quot; If you don&#x27;t know what causes something, you can&#x27;t treat it. You don&#x27;t blindly run around doing things and hope it helps. You have to find out the cause to find the cure.<p>This is exactly the kind of FUD that people are fighting when dealing with crazy CPS zealots.<p>Edit: If SIDS is suffocating from an obstruction, then call it suffocation by obstruction. But it&#x27;s not suffocation by obsstruction. The current theory is that it&#x27;s suffocation due to brain malfunction. Putting a toy in a crib isn&#x27;t going to cause a brain malfunction.", "parent": 16640503.0, "deleted": null, "dead": null, "descendants": null, "id": 16640670, "ranking": null, "date": 1521654999000, "year": 2018}, {"by": "kolpa", "score": null, "time": 1521655370, "timestamp": 1521655370000, "title": "", "type": "comment", "url": "", "text": "This is Utah, where the Mormon church has a de facto near-monopoly on large segments of society. The church (and parents) impose far more oppressiev restrictions of children&#x27;s freedom than any CPS does.", "parent": 16639605.0, "deleted": null, "dead": null, "descendants": null, "id": 16640743, "ranking": null, "date": 1521655370000, "year": 2018}, {"by": "d--b", "score": null, "time": 1521656330, "timestamp": 1521656330000, "title": "", "type": "comment", "url": "", "text": "Of course you can&#x27;t write such a law. My point is that because such a law is impossible to write, I think it is better to  defer to common sense, and to attack CPS when they&#x27;re overreaching.", "parent": 16640650.0, "deleted": null, "dead": null, "descendants": null, "id": 16640918, "ranking": null, "date": 1521656330000, "year": 2018}, {"by": "dragonwriter", "score": null, "time": 1521656473, "timestamp": 1521656473000, "title": "", "type": "comment", "url": "", "text": "&gt; My friend had a babysitter report her to CPS because there were stuffed animals in her 7-month old&#x27;s crib, which apparently contradicts some guidance.<p>I can confirm that a wide variety of medical sources strongly recommend that there be nothing but a proper infant mattress and fitted sheet designed specifically for the mattress in an infants crib, to reduce SIDS risk. 7 months is within the age range to which I usually see the recommendation applied, but out of the highest-risk period.", "parent": 16640409.0, "deleted": null, "dead": null, "descendants": null, "id": 16640943, "ranking": null, "date": 1521656473000, "year": 2018}, {"by": "Notorious_BLT", "score": null, "time": 1521659972, "timestamp": 1521659972000, "title": "", "type": "comment", "url": "", "text": "It isn&#x27;t forbidden, but its very poorly protected.<p>(Intentionally vague) laws intended to protect kids from serious harm end up being applied to situations where kids are perfectly safe, but some busybody heard a late night news report one time about a kid that got abducted, or fell out of a tree and broke his neck, or got hit by a bus and felt the need to impose their worry on others. So they call CPS, and now the parent is under investigation for doing something completely normal, because CPS has too much power and not enough oversight&#x2F;due process.<p>The idea of this law is to send a clear message that parents are NOT to be harassed&#x2F;threatened by government agencies over these harmless situations. Sometimes the state has to be told where their power ends explicitly.", "parent": 16640005.0, "deleted": null, "dead": null, "descendants": null, "id": 16641406, "ranking": null, "date": 1521659972000, "year": 2018}, {"by": "graeme", "score": null, "time": 1521667600, "timestamp": 1521667600000, "title": "", "type": "comment", "url": "", "text": "Good points, but one issue is that you can actually have CPS take kids unreasonably <i>even if</i> most parents believe in letting children run free.<p>All you need is someone to report you, and for the agency to have an incentive to err on the side of taking kids away.", "parent": 16640642.0, "deleted": null, "dead": null, "descendants": null, "id": 16642576, "ranking": null, "date": 1521667600000, "year": 2018}, {"by": "tptacek", "score": null, "time": 1521673749, "timestamp": 1521673749000, "title": "", "type": "comment", "url": "", "text": "We had a bullshit CPS scare in San Francisco when our first was born that involved 2 CPS inspectors having to come inspect our house and verify that we had &quot;at least a dresser drawer&quot; to put the kid in. It was entirely stupid (we were renting a 3-story townhouse off 8th and Folsom, which was nosebleed expensive even in 1999), but still incredibly stressful for us, because CPS had no compunctions about telling us what the consequences of noncompliance would be.<p>You have kids and you realize how traumatic even a single night of custody interruption would be, and then you think about what the reality of due process in these situations is.", "parent": 16640409.0, "deleted": null, "dead": null, "descendants": null, "id": 16643311, "ranking": null, "date": 1521673749000, "year": 2018}, {"by": "dragonwriter", "score": null, "time": 1521674784, "timestamp": 1521674784000, "title": "", "type": "comment", "url": "", "text": "&gt; The context is taking their children away from their parents under the pretext that the parents are unfit to raise them. Can we agree that &quot;a professional association of physicians made a recommendation which the parents violated&quot; does not constitute &quot;unfit parent&quot;?<p>Being aware of a parent disregarding widely disseminated recommendations of the medical community on a death risk is certainly reason for a third party to be concerned about fitness. It may not equate to unfitness, which corresponds well to the lack of any CPS action when the report was investigated.<p>The threshold for reasonsble reporting to a investigative authority should not be certainty of a violation.<p>(Now, I would expect a babysitter to attempt to resolve this with the parents first.)", "parent": 16640652.0, "deleted": null, "dead": null, "descendants": null, "id": 16643437, "ranking": null, "date": 1521674784000, "year": 2018}, {"by": "rayiner", "score": null, "time": 1522255820, "timestamp": 1522255820000, "title": "", "type": "comment", "url": "", "text": "Except the whole point of the article is that even if the State had put in the money it was supposed to, that wouldn&#x27;t have kept up with the promises.<p>And also, you&#x27;re whitewashing the role of public employees. Those &quot;corrupt politicians&quot; are Democrats who keep getting elected with the support of teachers&#x27;, police, etc., unions. Chicago&#x27;s pension holidays, for example, resulted in that money going to CPS directly, to support higher salaries and the &quot;pension pickup&quot; (where the school district covered most of teachers&#x27; required pension contributions).", "parent": 16698339.0, "deleted": null, "dead": null, "descendants": null, "id": 16699376, "ranking": null, "date": 1522255820000, "year": 2018}, {"by": "dietrichepp", "score": null, "time": 1522539835, "timestamp": 1522539835000, "title": "", "type": "comment", "url": "", "text": "Not really familiar with the terminology here\u2014I don\u2019t know what it means to \u201cevert\u201d an expression. Using CPS or something else doesn\u2019t matter here because this is not a compiler issue, this is a problem with the library that stems from the language definition itself.<p>Calling a continuation multiple times works as expected if the continuation is pure. For example, consider the following map implementation for one list:<p><pre><code>    (define (map f x)\n      (if (null? x)\n          ()\n          (cons (f (car x))\n                (map f (cdr x)))))\n</code></pre>\nThis works but creates a number of active activation records equal to the list length, which is not ideal. Attempts to optimize this are confounded by the fact that f may return multiple times\u2014not that it\u2019s impossible to optimize, just that multiple returns make optimization more difficult.<p>Then consider the case for, e.g., vector-map, where the most obvious implementation does not handle multiple returns correctly in the first place, even before you optimize it. This is why I became so disinterested in Scheme.", "parent": 16725151.0, "deleted": null, "dead": null, "descendants": null, "id": 16725789, "ranking": null, "date": 1522539835000, "year": 2018}, {"by": "orthecreedence", "score": null, "time": 1522542631, "timestamp": 1522542631000, "title": "", "type": "comment", "url": "", "text": "I wrote cl-async. I <i>really</i> missed continuations because any synchronous code that wants to use async basically has to be rewritten all the way up to accept async. This can be somewhat alleviated with promises, but it&#x27;s still a rewrite no matter how you slice it.<p>Continuations would have solved this completely by allowing first-class green threads or coroutines or whatever the hell you want to call them. There&#x27;s cl-cont, which is a horribly hacky syntax macro that converts all your code to CPS and, as I remember it, kind of sidesteps proper error handling altogether.<p>So, you can argue over which is better for error handling all you want, but I would have strangled a dolphin to have continuations&#x2F;coroutines back when I was building out the async ecosystem stuff.", "parent": 16720729.0, "deleted": null, "dead": null, "descendants": null, "id": 16725978, "ranking": null, "date": 1522542631000, "year": 2018}, {"by": "Someone1234", "score": null, "time": 1522547656, "timestamp": 1522547656000, "title": "", "type": "comment", "url": "", "text": "Because it isn&#x27;t just old laws, these are also new guidelines for how CPS handles cases of accused &quot;neglect.&quot; This sets the bar, and sets it universally so there&#x27;s no gaps.<p>There&#x27;s no reason they cannot still go back and update bad existing law. But that takes time, and this helps people while that occurs.", "parent": 16726227.0, "deleted": null, "dead": null, "descendants": null, "id": 16726268, "ranking": null, "date": 1522547656000, "year": 2018}, {"by": "greenyoda", "score": null, "time": 1522560106, "timestamp": 1522560106000, "title": "", "type": "comment", "url": "", "text": "Not to mention that calling CPS would probably be a career-limiting move for a babysitter. What parents would want to risk hiring that babysitter after something like that?", "parent": 16640566.0, "deleted": null, "dead": null, "descendants": null, "id": 16726863, "ranking": null, "date": 1522560106000, "year": 2018}, {"by": "spamizbad", "score": null, "time": 1522773795, "timestamp": 1522773795000, "title": "", "type": "comment", "url": "", "text": "It really depends though. As a parent raising kids in the city myself, my wife and I made the conscious decision to settle in the city and raise our family here.<p>We based this on:<p>0) We just really like the city and want to raise our kids in the city.<p>1) In Chicago, where we live, CPS students outperform the state overall. Source:\n<a href=\"https:&#x2F;&#x2F;www.wbez.org&#x2F;shows&#x2F;wbez-news&#x2F;perception-vs-reality-chicago-students-outperform-kids-in-rest-of-illinois&#x2F;5445214e-cc48-48a9-9019-4d1c05305940\" rel=\"nofollow\">https:&#x2F;&#x2F;www.wbez.org&#x2F;shows&#x2F;wbez-news&#x2F;perception-vs-reality-c...</a><p>2) Breaking down a school&#x27;s performance at the demographic level can often change the equation. The elementary school my son will attend actually scores higher for students  above the poverty line than the one I attended out in the suburbs.<p>3) My wife is a STEM professor and has seen lots of students who attended the region&#x27;s top-tier public schools (9&#x2F;10 or 10&#x2F;10 on greatschools, etc) that were woefully unprepared for college, despite otherwise decent ACT scores.<p>4) The suburbs are facing their own austerity crisis: postwar subsidized infrastructure gravy train is long over, so property taxes are rising. Their housing stock doesn&#x27;t align well with the smaller and most cost-conscious millennial family. So a big worry for us was, do we want to buy into a &quot;good school&quot; suburb only to have our kid&#x27;s school budget slashed to control costs? This is already happening to one Chicago suburb famous for its great schools (Hinsdale, IL)<p>5) School performance is, at best, a trailing indicator.  Say you&#x27;ve got 2 kids under the age of 4. Is it worth buying a home somewhere because of a high school they won&#x27;t be attending for 10+ years? It makes sense if you&#x27;re talking about a radical difference in school performance, but marginal advantages seem prone to change.<p>I don&#x27;t claim that this is the best course of action. For all we know, the city schools could just as easily go sideways due to budgeting issues, or maybe suburban schools are the first to break free from the trend of &quot;teaching to the test&quot; and our kids are left behind. But right now, it just feels like once you have a safe learning environment and some basic academic standards, most of the outcome is in the hands of the parents and students. High-performing schools don&#x27;t produce great students so much as they attract the people who foster that attitude.", "parent": 16745803.0, "deleted": null, "dead": null, "descendants": null, "id": 16746470, "ranking": null, "date": 1522773795000, "year": 2018}, {"by": "spamizbad", "score": null, "time": 1522855241, "timestamp": 1522855241000, "title": "", "type": "comment", "url": "", "text": "I live in the painfully uncool neighborhood of Jefferson Park. There are a decent chunk of good K-8 CPS neighborhood schools up here. A very safe neighborhood, in part due to the number of CPD who live in the area.<p>Uptown is amazing and while it is still rough around the edges it is easily one my favorite neighborhoods in the city. The crime is slowly getting better, but I think most parents of means send their kids to private school or lottery them somewhere else.... or move.", "parent": 16751701.0, "deleted": null, "dead": null, "descendants": null, "id": 16755555, "ranking": null, "date": 1522855241000, "year": 2018}, {"by": "mnm1", "score": null, "time": 1523122703, "timestamp": 1523122703000, "title": "", "type": "comment", "url": "", "text": "I love the game, but the league is despicable so with every season I watch less and less. At some point, I may stop altogether. I don&#x27;t buy gear and would lead a campaign if my city even thought about bringing in a team and wasting public money on a stadium. The states looking to ban tackle football for young kids are on the right track. This should be pushed nationally. It&#x27;s the only way to start bringing down this awful organization. If this went national, I can see the nfl fading in a generation or two. Parents can, of course, do their parental duties and keep their kids out of this sport till they&#x27;re 18. Really, at this point, CPS should be handling the cases where parents fail. CTE is a horrible &quot;gift&quot; to give to kids. But the dumb masses will take a lot longer to change without new regulations and in the meantime, a few will make millions and millions will get CTE playing for teams whose owners&#x27; ideals belong on a slave plantation, not in the modern world. I&#x27;ll miss it a little, but not much, because these same owners&#x27; idiotic policies on broadcasting mean seeing the games of interest most Sundays is an outrageously expensive or impossible proposition.", "parent": 16780787.0, "deleted": null, "dead": null, "descendants": null, "id": 16781718, "ranking": null, "date": 1523122703000, "year": 2018}, {"by": "orthecreedence", "score": null, "time": 1523992338, "timestamp": 1523992338000, "title": "", "type": "comment", "url": "", "text": "I wrote some high-performance lisp applications in production. My main was was a threaded queue worker, driven off beanstalkd, that processed large volumes of data. This was highly successful and didn&#x27;t require overly-provisioned servers (was using CCL&#x2F;linux x64&#x2F;linode VPS).<p>That said, I don&#x27;t think I&#x27;ll ever use lisp for front-facing web stuff again. I wrote cl-async, and afterwards and used it in production in a few places, then a bit later started using node heavily. The tooling for CL is just not there. Quicklisp is great, but not being able to pick and choose package versions is limiting, and having to rewrite every single thing for async was a pain (since CL doesn&#x27;t have continuations, any sort of async that avoids CPS is impossible). I was hoping I would get more community support on cl-async, and I did get many hands helping, but eventually it just became too much to maintain. So if you&#x27;re doing network stuff on CL, it&#x27;s probably best to just use threaded, which IMO just doesn&#x27;t handle the same amount of load evented does, at least when dealing with web APIs.<p>One thing I used lisp for briefly which I want to do again soon is game dev. Being able to redefine&#x2F;fix portions of your program while it&#x27;s running is fantastic, especially when you have huge amounts of state to deal with like you do in games. I wouldn&#x27;t exactly call that running CL in production, though.", "parent": 16861141.0, "deleted": null, "dead": null, "descendants": null, "id": 16861362, "ranking": null, "date": 1523992338000, "year": 2018}, {"by": "orthecreedence", "score": null, "time": 1523994262, "timestamp": 1523994262000, "title": "", "type": "comment", "url": "", "text": "&gt; macros would appear to eliminate continuation-writing-by-hand<p>They don&#x27;t =]. There&#x27;s cl-cont, but it&#x27;s like building a house on a foundation of toothpicks. Not to discount the work the author put in, but you can only do very specific things with it, and last time I looked, error&#x2F;exception handling was pretty much completely missing.<p>&gt; I&#x27;m interested exactly what the pain points are with CPS<p>Basically, for example, if I&#x27;m going to convert cl-postgres to use async, I have to rip out the protocol parsing from the networking (they are often globbed together) then I have to replace the networking with async and tie it back into the protocol parsing. This in itself isn&#x27;t too bad, but then anything that calls the new async cl-postgres has to be converted to expect async...all the way up. This can be somewhat alleviated by promises (<a href=\"https:&#x2F;&#x2F;orthecreedence.github.io&#x2F;blackbird&#x2F;\" rel=\"nofollow\">https:&#x2F;&#x2F;orthecreedence.github.io&#x2F;blackbird&#x2F;</a>) but they still don&#x27;t change the fact that <i>the entire stack is unwound once you call into async</i>.<p>Continuations would allow building green threads&#x2F;coroutines which would eliminate CPS and allow you to preserve your stack while calling into async, but CL is pretty much written in stone to not have continuations (or coroutines et al) at this point.<p>Qlot looks handy, thanks for the tip.", "parent": 16861566.0, "deleted": null, "dead": null, "descendants": null, "id": 16861650, "ranking": null, "date": 1523994262000, "year": 2018}, {"by": "Blackthorn", "score": null, "time": 1524005901, "timestamp": 1524005901000, "title": "", "type": "comment", "url": "", "text": "Biggest issue I personally had with CPS and why I&#x27;ll never use it for anything is the need to wrap your entire call stack, at compilation time, in CPS macros. That&#x27;s a no-go for calling external libs.<p>Clojure does this a lot better with Pulsar.", "parent": 16861566.0, "deleted": null, "dead": null, "descendants": null, "id": 16863039, "ranking": null, "date": 1524005901000, "year": 2018}, {"by": "cryptonector", "score": null, "time": 1524711205, "timestamp": 1524711205000, "title": "", "type": "comment", "url": "", "text": "Callbacks have plenty to do with concurrency: first you compile everything into CPS (where callbacks are continuations) and then a trivial event loop nets you cooperative multitasking.  When you don&#x27;t have language support for this but you need concurrency, you just write something resembling CPS by hand and call it &quot;callback hell&quot;.<p>&gt; (pthread_create\u2014threading.Thread doesn&#x27;t count as parallism due to GIL)<p>Eh?  Why would you have a GIL?  Maybe in Go, but so what, just don&#x27;t use such a language&#x2F;run-time.", "parent": 16922377.0, "deleted": null, "dead": null, "descendants": null, "id": 16928444, "ranking": null, "date": 1524711205000, "year": 2018}, {"by": "ddingus", "score": null, "time": 1524798179, "timestamp": 1524798179000, "title": "", "type": "comment", "url": "", "text": "No, not often.  For some common words yes.  Depends on keyboard at that point.  Some will take it, some won&#x27;t.<p>In game terms, input can approach that speed, which is really what I was writing to.  Should have said, by analogy.<p>For me, a whole lot depends.  If I am transcribing, I look at the screen, and it can matter.  Same for a quick type of a common phrase.  I&#x27;ll blast that out.<p>For most things, it&#x27;s a few CPS and slower.<p>And this is all modal.  Interactive, like cursor navigation is different from general character input, which is different from common, short words.", "parent": 16937803.0, "deleted": null, "dead": null, "descendants": null, "id": 16938172, "ranking": null, "date": 1524798179000, "year": 2018}, {"by": "oldcynic", "score": null, "time": 1524934418, "timestamp": 1524934418000, "title": "", "type": "comment", "url": "", "text": "Please change link to the BBC story[0] this Jalopnik article links to, as this is riddled with errors.<p><i>&quot;Note that this took place in England, so the left-hand side is the driver side&quot;</i><p>No, in UK we <i>drive</i> on the left, the driver side is the <i>right</i> of the car.<p>He was not banned from the M1, but banned from <i>driving</i> for 18 months. ie he got his driving licence suspended.<p>Neither does one pay the Crown <i>Prosecution</i> (a clue to their role) Services (also CPS is Crown Prosecution Service singular) one&#x27;s fine.<p>That&#x27;s enough proof reading :)<p>[0] <a href=\"http:&#x2F;&#x2F;www.bbc.com&#x2F;news&#x2F;uk-england-beds-bucks-herts-43934504\" rel=\"nofollow\">http:&#x2F;&#x2F;www.bbc.com&#x2F;news&#x2F;uk-england-beds-bucks-herts-43934504</a>", "parent": 16948003.0, "deleted": null, "dead": null, "descendants": null, "id": 16948476, "ranking": null, "date": 1524934418000, "year": 2018}, {"by": "cryptonector", "score": null, "time": 1525200679, "timestamp": 1525200679000, "title": "", "type": "comment", "url": "", "text": "&gt; The root cause of the Spectre and Meltdown vulnerabilities was that processor architects were trying to build not just fast processors, but fast processors that expose the same abstract machine as a PDP-11.  [...]<p>This strikes me as a flavor of the VLIW+compilers-could-statically-do-more-of-the-work argument, though TFA does not mention VLIW architectures.<p>C or not, making compilers do more of the work is not trivial, it is not even simple, not even hard -- it&#x27;s insanely difficult, at least for VLIW architectures, and it&#x27;s insanely difficult whether we&#x27;re using C or, say, Haskell.  The only concession to make is that a Haskell compiler would have a lot more freedom than a C compiler, and a much more integrated view of the code to generate, but still, it&#x27;d be insanely hard to do all of the scheduling in the compiler.  Moreover, the moment you share a CPU and its caches is the moment that static scheduling no longer works, and there is a lot of economic pressure to share resources.<p>There are reasons that this make-the-compilers-insanely-smart approach has failed.<p>It might be more likely to be successful <i>now</i> than 15 years ago, and it might be more successful if applied to Rust or Haskell or some such than C, but, honestly?, I just don&#x27;t believe this will work anytime soon, and it&#x27;s all academic anyways as long as the CPU architects keep churning out CPUs with hidden caches and speculative execution.<p>If you want this to be feasible, the first step is to make a CPU where you can turn off speculative execution and where there is no sharing between hardware threads.  This could be an extension of existing CPUs.<p>A much more interesting approach might be to build asynchrony right into the CPUs and their ISAs.  Suppose LOADs and STOREs were asynchronous, with an AWAIT-type instruction by which to implement micro event loops... then compilers could effectively do CPS conversion and automatically make your code locally async.  This <i>is</i> feasible because CPS conversion is well-understood, but this is a far cry from the VLIW approach.  Indeed, this is a lot simpler than the VLIW approach.<p>TFA mentions CMT and ULtraSPARC, and that&#x27;s certainly a design direction, but note that it&#x27;s one that makes C less of a problem anyways -- so maybe C isn&#x27;t the problem...<p>Still, IMO TFA is right that C is a large part of the problem.  Evented programs and libraries written in languages that insist on immutable data structures would help a great deal.  Sharing even less across HW&#x2F;SW threads (not even immutable data) would still be needed in order to eliminate the need for cache coherency, but just having immutable data would help reduce cache snooping overhead in actual programs.  But the CPUs will continue to be von Neuman designs at heart.", "parent": 16967675.0, "deleted": null, "dead": null, "descendants": null, "id": 16970154, "ranking": null, "date": 1525200679000, "year": 2018}, {"by": "tialaramex", "score": null, "time": 1525685661, "timestamp": 1525685661000, "title": "", "type": "comment", "url": "", "text": "At arrest, a police officer. It&#x27;s their choice whether they think your excuse means they shouldn&#x27;t arrest you. After that, a CPS prosecutor, whose job is to decide whether they should try to convict you of some crime or not based on the public interest tests.<p>At trial, ultimately this would be a matter for a jury. But &quot;bad neighbourhood&quot; definitely doesn&#x27;t come into it, &quot;I need it for self defence&quot; doesn&#x27;t constitute a lawful purpose.<p>The chef&#x27;s defence gets to introduce any excuse the chef may believe he has, but it&#x27;s like to be subject to fairly intense cross from the prosecutors. On the other hand sometimes these excuses are ludicrous, and the court is entitled to tell the jury that they don&#x27;t have to credit such an excuse just because it wasn&#x27;t explicitly rebutted by the prosecution.<p>The main thrust of this article is that it&#x27;s wrong to even be _arresting_ these people never mind jailing them. And you can&#x27;t solve the former in the courts.", "parent": 17011129.0, "deleted": null, "dead": null, "descendants": null, "id": 17011394, "ranking": null, "date": 1525685661000, "year": 2018}, {"by": "drzaiusapelord", "score": null, "time": 1525726118, "timestamp": 1525726118000, "title": "", "type": "comment", "url": "", "text": "&gt;Then why the opposition to school choice?<p>Because &#x27;school choice&#x27; is a loaded political term for defunding the public school system these people depend on so that the money earmarked for these systems gets handed out to private or charter schools, thus leaving the public system in a worse place, especially when the public system must take the worst students while charters can dismiss them. In other words you&#x27;re socializing your losses and privatizing your winnings.<p>Even then, the &quot;opposition&quot; is more like healthy skepticism. Even in liberal Chicago we have a charter school boom and thus far the results aren&#x27;t impressive especially when you consider they benefit from the &#x27;cream of the crop&#x27; issue defined above. They can dump the low performing students onto CPS while enjoying the test scores and metrics more motivated students or the students without learning disabilities or the students when more involved parents can produce.<p>But no, we&#x27;re not going to defund CPS entirely overnight and hand out its budget in its entirety to charters. That&#x27;s not &quot;opposition&quot; that&#x27;s sane thinking. And yes, if charters can&#x27;t deliver the goods and if they cannot deal with the worst students or improve them, then they have failed and shouldn&#x27;t be subsidized by the taxpayer. My tax dollars shouldn&#x27;t be an entitlement to those with experimental and untested educational theories who can fill out an application to create a school. You have to earn it by showing your methods produce results - with all the kids, not the cherry picked one.  That&#x27;s what they currently don&#x27;t seem  to be able to do.  Even then we still give them money hoping they do someday or that the added competition creates a stronger educational dynamic.<p>That said, many charter schools are just a ploy to get taxpayers to fund weirdo religious schools. A lot of charters are extensions of churches&#x2F;mosques&#x2F;temples or ethnic groups (often with religiosity as the main motivator). That isn&#x27;t exactly the education revolution you&#x27;re looking for here in many cases.", "parent": 17016242.0, "deleted": null, "dead": null, "descendants": null, "id": 17016363, "ranking": null, "date": 1525726118000, "year": 2018}, {"by": "dsfyu404ed", "score": null, "time": 1526047679, "timestamp": 1526047679000, "title": "", "type": "comment", "url": "", "text": "&gt;Parents would be almost seen as negligent if their children weren&#x27;t supervised within earshot.<p>One asshole calling CPS will put a little voice in the back of everyone&#x27;s head telling them to be slightly more restrictive with their kids.<p>&gt;art of me struggles to believe that kids don&#x27;t want to play outside unsupervised \u2013 at least once they&#x27;re outside.<p>Kid&#x27;s don&#x27;t want to play outside in the first place.  They&#x27;d rather watch TV or whatever. If you make them play outside they&#x27;ll stop whining and do it in fairly short order.<p>Combine the up front whining with the little voice and you see why &quot;go play outside until mommy is done making dinner&quot; is much less common.", "parent": 17047051.0, "deleted": null, "dead": null, "descendants": null, "id": 17047371, "ranking": null, "date": 1526047679000, "year": 2018}, {"by": "vertexFarm", "score": null, "time": 1526065961, "timestamp": 1526065961000, "title": "", "type": "comment", "url": "", "text": "Really good points. Yes, I don&#x27;t think it&#x27;s always coming from the kid&#x27;s parents. There&#x27;s a lot of pressure from other parents. If you decide for yourself that you&#x27;re going to have a free range kid and give them a 70s-style childhood where they practice their own agency from an early age and get to grow up learning their own limits and having adventures, then at some point some other worrying, busybody person is going to see your kid by themselves and call the police or CPS or whatever.<p>It&#x27;s a herd thing. We have difficulty choosing to do anything drastically differently from the rest of society, and raising children involves another being who doesn&#x27;t necessarily have freedom to consent so society gets even more involved if what you are doing is deviant. But the drift of society has caused the norm to be something that decades ago would have been considered highly deviant. If you were a hovering parent like is common today in the 60s or 70s, you&#x27;d be an absolute freak and considered abusive. But today the opposite is true.<p>I&#x27;m glad you mentioned that the kids are sometimes the ones who make the choice themselves. I guess we&#x27;re putting so much fear around them that it&#x27;s making them decide the wisest course of action is to do what is normal and practiced by all their peers, be in constant sight of their parents. Really a shame.", "parent": 17046405.0, "deleted": null, "dead": null, "descendants": null, "id": 17050059, "ranking": null, "date": 1526065961000, "year": 2018}, {"by": "dsfyu404ed", "score": null, "time": 1526317690, "timestamp": 1526317690000, "title": "", "type": "comment", "url": "", "text": "&gt;Can you imagine any other app store denying service to 200 teams or individuals and then investigate any possible wrongdoings?<p>The government does stuff like that all the time although usually it&#x27;s ~200 people over the course of a year or two, not all at once.  It&#x27;s something along the lines of &quot;Whoops, looks like CPS wasn&#x27;t actually doing their jobs right and we took 200 kids from otherwise not too terrible parents, well here&#x27;s an official apology and a pledge to investigate this internally, don&#x27;t worry we&#x27;ll conclude we did nothing wrong.  Maybe if we feel really guilty we&#x27;ll force someone to retire a year early or something.&quot;<p>You can replace the above with other examples of systemic mistreatment if you want.<p>Sleazy utility providers and businesses with local monopoly do similar but not quite so bad things and nobody gets any recourse unless they get a check from a class action.<p>These kind of things typically makes the state or regional news for a day with maybe a 10sec follow up when the apology is actually issued or they find themselves innocent of wrongdoing.<p>When you have monopoly or near monopoly position there&#x27;s less accountability and more wiggle room to behave like a jerk.", "parent": 17066555.0, "deleted": null, "dead": null, "descendants": null, "id": 17067222, "ranking": null, "date": 1526317690000, "year": 2018}, {"by": "waterhouse", "score": null, "time": 1527760446, "timestamp": 1527760446000, "title": "", "type": "comment", "url": "", "text": "&gt; That&#x27;s not a bad thing.<p>For the record, I don&#x27;t consider this obviously true.  If you search &quot;cps horror stories&quot;, some of the results are about horrible family situations that Child Protective Services has encountered, and others are about family situations that CPS has horribly mishandled.  A couple of links focusing on the latter:<p><a href=\"https:&#x2F;&#x2F;parentalrights.org&#x2F;child_protective_services&#x2F;\" rel=\"nofollow\">https:&#x2F;&#x2F;parentalrights.org&#x2F;child_protective_services&#x2F;</a><p><a href=\"https:&#x2F;&#x2F;lfb.org&#x2F;confessions-of-an-ex-cps-agent&#x2F;\" rel=\"nofollow\">https:&#x2F;&#x2F;lfb.org&#x2F;confessions-of-an-ex-cps-agent&#x2F;</a><p>I&#x27;m not sure if anyone has tried very hard to make a case that the good of CPS outweighs the bad.", "parent": 17195008.0, "deleted": null, "dead": null, "descendants": null, "id": 17195150, "ranking": null, "date": 1527760446000, "year": 2018}, {"by": "bzbarsky", "score": null, "time": 1527776961, "timestamp": 1527776961000, "title": "", "type": "comment", "url": "", "text": "The problems start when &quot;ill-equipped&quot; is defined as expansively as possible.  See the various cases of CPS getting involved when parents try to teach their kids basic independence by letting them walk to the playground on the corner and play there.<p>I think the way CPS is currently done in the US is actually causing a great deal of harm to current kids whose parents are totally reasonable parents...", "parent": 17195008.0, "deleted": null, "dead": null, "descendants": null, "id": 17196556, "ranking": null, "date": 1527776961000, "year": 2018}, {"by": "microcolonel", "score": null, "time": 1528080445, "timestamp": 1528080445000, "title": "", "type": "comment", "url": "", "text": "You know the weird thing about CPS is that well they won&#x27;t arrest the people who are going to kill their kids by running them off a cliff but they&#x27;ll sure as hell bug you if you leave your kids in the <i>backyard</i> without watching.", "parent": 17221012.0, "deleted": null, "dead": null, "descendants": null, "id": 17224170, "ranking": null, "date": 1528080445000, "year": 2018}, {"by": "Ascetik", "score": null, "time": 1528081694, "timestamp": 1528081694000, "title": "", "type": "comment", "url": "", "text": "I absolutely think you&#x27;re on to something here. I as well as other people I know in my circle have observed the same thing. In the past 20 years or so it seems like people have gotten angrier and angrier. It feels like no one minds their own business anymore and constantly assumes the worst about any given situation when they do not know the circumstances or intentions of the occurrence.<p>One of my friends got CPS called on her because her kids were playing in their own yard barefoot. Yes. It happened more than once too. It was surreal. What is wrong with people today?", "parent": 17221531.0, "deleted": null, "dead": null, "descendants": null, "id": 17224271, "ranking": null, "date": 1528081694000, "year": 2018}, {"by": "core-questions", "score": null, "time": 1529355073, "timestamp": 1529355073000, "title": "", "type": "comment", "url": "", "text": "Ahh, hard to say.<p>Imagine the case of someone within the country where CPS gets called due to the parents doing something criminal. Should the children be jailed? Isn&#x27;t that cruel? Separation is cruel, but it might be healthier for the kids to go to a foster family or facility where they&#x27;re not imprisoned.<p>&gt; The stated aim of the policy is to be so abominable that it acts as a deterrent. You okay with that?<p>I&#x27;m plenty okay with punishments that are intended to be deterrents, yes, but if you&#x27;re going to do that you need to make sure everyone knows, and enforce it consistently.<p>A far better option would just be to turn people back at the border, and instantly deport anyone caught in the country who isn&#x27;t supposed to be there. Consistent, possible to enforce without the courts being involved, faster and more efficient,  and probably less cruel overall.", "parent": 17341514.0, "deleted": null, "dead": null, "descendants": null, "id": 17341594, "ranking": null, "date": 1529355073000, "year": 2018}, {"by": "cryptonector", "score": null, "time": 1529357784, "timestamp": 1529357784000, "title": "", "type": "comment", "url": "", "text": "Icon is a great little language.  The old Icon compiler used CPS and generated C w&#x2F; no C extensions.", "parent": 17341131.0, "deleted": null, "dead": null, "descendants": null, "id": 17341871, "ranking": null, "date": 1529357784000, "year": 2018}, {"by": "kcsrk", "score": null, "time": 1530260796, "timestamp": 1530260796000, "title": "", "type": "comment", "url": "", "text": "The author of the talk here. I am excited about the Multicore OCaml upstreaming plan.<p>We&#x27;re going to phase it into 3 distinct phases. First, we will upstream the multicore runtime so that it co-exists with the current runtime as a non-default option. This will give a chance to test and tune the new GC in the wild. Once we are happy with it, it will be made the default.<p>The second PR would be support for fibers -- linear delimited continuations without the syntax extensions (exposed as primitives in the Obj module). This will help us test the runtime support for fibers and prototype programs.<p>The last PR would be effect handlers <i>with an effect system</i>. Any unhandled user-defined effects would be caught statically by the type system. The effect system is particularly useful not just for writing correct programs, but to target JavaScript using the js_of_ocaml compiler where we can selectively CPS translate the effectful bits \u00e0 la Koka. As a result, we will retain the performance of direct-style code and pay extra cost only for the code that uses effect handlers. In the future, we will extend it to track built-in OCaml effects such as IO and mutable refs. At that point, we can statically distinguish pure (as Haskell defines it) functions from impure ones without having to use Monad transformers for the code that mixes multiple effects. I&#x27;d recommend Leo White&#x27;s talk [0] on effect handlers for a preview of how this system would look like.<p>[0] <a href=\"https:&#x2F;&#x2F;www.janestreet.com&#x2F;tech-talks&#x2F;effective-programming&#x2F;\" rel=\"nofollow\">https:&#x2F;&#x2F;www.janestreet.com&#x2F;tech-talks&#x2F;effective-programming&#x2F;</a>", "parent": 17416797.0, "deleted": null, "dead": null, "descendants": null, "id": 17423192, "ranking": null, "date": 1530260796000, "year": 2018}, {"by": "noelwelsh", "score": null, "time": 1530275745, "timestamp": 1530275745000, "title": "", "type": "comment", "url": "", "text": "That&#x27;s called a trampoline, and is one of the ways to simulate tail recursion. It requires a global modification to the code: you have to rewrite all your code that you want to be stack-safe to be trampolined. It wouldn&#x27;t call that trivial, but then Node developers are happy to rewrite their code into CPS so what do I know.", "parent": 17424099.0, "deleted": null, "dead": null, "descendants": null, "id": 17424115, "ranking": null, "date": 1530275745000, "year": 2018}, {"by": "cobbal", "score": null, "time": 1530547690, "timestamp": 1530547690000, "title": "", "type": "comment", "url": "", "text": "Call stacks are almost always used in implementations of functional languages as well, even those that support first-class continuations. Even implementations that use CPS as you describe don&#x27;t necessarily lose call-stack discipline (e.g. guile); that&#x27;s a separate choice that some (e.g. SML&#x2F;NJ) choose to make.<p>The call stack provides very cache-friendly and gc-friendly memory. It&#x27;s still a very useful construct in functional languages.", "parent": 17442395.0, "deleted": null, "dead": null, "descendants": null, "id": 17442842, "ranking": null, "date": 1530547690000, "year": 2018}, {"by": "lgregg", "score": null, "time": 1530554589, "timestamp": 1530554589000, "title": "", "type": "comment", "url": "", "text": "I appreciate the active listening, it&#x27;s close, let me clarify a bit.<p>There are two major cultural ideas, cultures of individualism [0] and cultures of collectivism [1], that I vaguely pointed out. They&#x27;re not exclusive but you don&#x27;t always notice them intertwined together often. In my experience, the Philippines, had both cultures but usually led with a dominance of collectivism. I had autonomy [4], much like the article, to make my own decisions that were un-coerced. That wasn&#x27;t to say that my parents didn&#x27;t parent, or that individuals would watch over me where ever I was. In example, I would wander a mall (273k m\u00b2~ in size) as a 6-10 year-old kid and when my parents wanted to find me they would look at the shop keepers which would point in the direction I went. I remember chatting with different store keepers like it was normal. That leads me back to the idea of collectivism. I had tons of &quot;uncles&quot; and &quot;aunts&quot; (mostly local college students) which would collectively parent me, but I also had people I barely knew who would watch out for me. There was a construction site next to my parent&#x27;s house which I would often visit. Those guys would obviously watch out for my safety but when I visited during their breaks they would talk to me, ask how my day was, what I was up to -- small talk. I also lived in post-Soviet bloc Poland, it was a similar experience.<p>In the United States, when we visited and ultimately moved there it was extremely different for the most part. I had walked not even a quarter mile to a local barbershop in Huntsville, Alabama before I got stopped by police asking where my parents were. I never once had that experience overseas. There was also a cafe, local bookstore, a few restaurants, and a few other shops on that block.<p>Eventually, it got to the point where my parents took away the majority of my autonomy to go places because of Child Protective Services (CPS). It fell into a few categories but the two big ones were: the hype over stranger danger and the issue of perceived safety of myself by the U.S. Government. I do want to admit that my experience, which has shaped my opinion, would be different if I had lived in Rural America. CPS can be a terrible organization to work with because they&#x27;re overworked leading to snap decisions rather than understanding the context. I&#x27;ve heard horror stories from friends over the years of the stuff that organization does because the government has the &quot;best interest&quot; for everyone in every situation (one of those friends was a Parent Advocate for the local Public Defenders Office). Also, if you need another example, look at ICE.<p>On Individualism in America, when was the last time you saw a stranger interact and correct&#x2F;parent another person&#x27;s kid in a grocery store. Swizec and NeedMoreTea had a great summary too:<p>NeedMoreTea [2]<p>&gt; The individualism of today&#x27;s adults all around has led to them ignoring, or putting up with the excesses of, everyone else&#x27;s kids. Few would dare say anything, and would probably get a torrent of abuse from the parent if they did.<p>&gt; The over-hype of abuse and stranger danger hasn&#x27;t helped either - serious things, but not exactly as common as the media imply. Adult males have double the reason not to speak to or tell off someone&#x27;s child.<p>Swizec [3]<p>&gt; My interpreta is that in many other countries there is a sense of collectivism in that everyone takes care of children and collaborates a little bit. If you see a kid, you don\u2019t think something must be wrong, you lend assistance to their parents by being an impromptu guardian and help the kid achieve their means.<p>&gt; Whereas in the US the modus operandi is \u201cWell it\u2019s not my kid what do I care? Their parents must be terrible people for not standing right next to them\u201d<p>&gt; For example, as a 7 year old in eastern-ish europe, I would walk 1km to school on my own every morning. The worst that ever happened was when me and a friend decided that umbrellas ar[e] the perfect snow shovel.<p>Hopefully, that provides a bit more clarity for everyone.<p>Edit: formatting.<p>[0] <a href=\"https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Individualism\" rel=\"nofollow\">https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Individualism</a><p>[1] <a href=\"https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Collectivism\" rel=\"nofollow\">https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Collectivism</a><p>[2] <a href=\"https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=17437151\" rel=\"nofollow\">https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=17437151</a><p>[3] <a href=\"https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=17437088\" rel=\"nofollow\">https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=17437088</a><p>[4] <a href=\"https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Autonomy\" rel=\"nofollow\">https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Autonomy</a> &amp;&amp; <a href=\"https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Autonomy#Child_development\" rel=\"nofollow\">https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Autonomy#Child_development</a>", "parent": 17436985.0, "deleted": null, "dead": null, "descendants": null, "id": 17443985, "ranking": null, "date": 1530554589000, "year": 2018}, {"by": "betterunix2", "score": null, "time": 1530556463, "timestamp": 1530556463000, "title": "", "type": "comment", "url": "", "text": "Sure, you can apply a CPS conversion to a C program, but what you would get would actually be a (abstract) function call stack because there is nothing in C that breaks the call stack paradigm (setjmp&#x2F;longjmp come close but the semantics are carefully defined to avoid breaking the semantics of a call stack; in particular they cannot be used to &quot;restore&quot; stack frames that were previously destroyed by a return statement or a call to longjmp).  In some languages (like Scheme) it is possible to write code that will not have that &quot;de facto&quot; call stack because there is first-class support for things that completely break the call stack paradigm (e.g. call&#x2F;cc).", "parent": 17443171.0, "deleted": null, "dead": null, "descendants": null, "id": 17444266, "ranking": null, "date": 1530556463000, "year": 2018}, {"by": "gpderetta", "score": null, "time": 1531686387, "timestamp": 1531686387000, "title": "", "type": "comment", "url": "", "text": "Green threads is very different from CPS actually both from an implementation and semantics point of view. In a CPS model the continuation is first class and is available at every single call point. In practice this would require heap allocating every single function frame, which is expensive and and a huge problem for interoperability (a smart compiler can turn it back to a traditional stack if the continuation is only used in traditional ways)<p>With the normall call&#x2F;return model, the implicit continuation in a normal call stack can only be accessed via return. Green threads do allow accessing the continuation at specific yield points (although most green thread implementations do not expose it to the user) but because the yield point are much fewer than every single call, a whole stack can be allocated and used in one go. There aren&#x27;t in fact many issues with interoperability as foregin functions or even os calls can be accommodated on this stack.<p>Async is a tradeoff, basically the programmer is responsible of marking functions that are to be CPS transformed and that need their stack frame reified. This way no full stack is needed nor there are the performance and interoperability issues of full CPS. You end up with the blue&#x2F;red functions issue though.", "parent": 17536714.0, "deleted": null, "dead": null, "descendants": null, "id": 17536881, "ranking": null, "date": 1531686387000, "year": 2018}, {"by": "gpderetta", "score": null, "time": 1531694247, "timestamp": 1531694247000, "title": "", "type": "comment", "url": "", "text": "To allow for separate compilation you need to compile each function twice though: a CPS version and &#x27;classic&#x27; one. This can be wasteful. You also need annotations in the object file to describe the  frame size of  each CPS function. At some point this was seriously considered for C++ and I&#x27;m sure some language implementations actually do it.<p>Or you go with cactus stacks which have their own set of issues.", "parent": 17537162.0, "deleted": null, "dead": null, "descendants": null, "id": 17537490, "ranking": null, "date": 1531694247000, "year": 2018}, {"by": "lapinot", "score": null, "time": 1531705925, "timestamp": 1531705925000, "title": "", "type": "comment", "url": "", "text": "Didn&#x27;t mean to bash the lang design team at all, actually i was kinda hoping for you folks to reply interesting and tricky stuff about how things are not so simple.<p>This is probably only because you didn&#x27;t develop the answer fully but i still struggle to see how monads (or other structures in that family) couldn&#x27;t apply here: they aren&#x27;t implemented in any way and just provide interface (eg not caring about rust at all, the semantic of that feature here is very monadic, it should mostly behave like the CPS monad). Anyway, i&#x27;m gonna stop arguing, look at how it is&#x2F;will be implemented and hopefully wait for that essay of yours, to have a broader picture.", "parent": 17537980.0, "deleted": null, "dead": null, "descendants": null, "id": 17538220, "ranking": null, "date": 1531705925000, "year": 2018}, {"by": "Rusky", "score": null, "time": 1531708434, "timestamp": 1531708434000, "title": "", "type": "comment", "url": "", "text": "A Rust-flavored effect system is quite a bit different from do-notation. You&#x27;re probably right that such a thing could achieve the same ergonomics and efficiency as built-in async&#x2F;await, but you&#x27;re also probably right that it would be a huge amount of complexity.<p>When people say that monads and do-notation don&#x27;t work in Rust, they&#x27;re talking about a user-level Monad trait and a simple CPS transform built on top of it:<p>- Such a monad trait is impossible to write even with HKT because it would have to abstract over both Option&#x2F;Result (type constructors) and Iterator&#x2F;Future (traits)<p>- Such a CPS transform would be extremely limited (not composable with built-in loop structures) and&#x2F;or extremely tricky around TCE, lifetimes, and allocation (the typical type for `&gt;&gt;=` would involve `Fn` trait objects...).<p>Effects bypass this by leaving the CPS transform in the compiler, instead only exposing delimited continuations to userspace. Which is basically what async&#x2F;await does, just non-generically.", "parent": 17538191.0, "deleted": null, "dead": null, "descendants": null, "id": 17538367, "ranking": null, "date": 1531708434000, "year": 2018}, {"by": "barrkel", "score": null, "time": 1531736763, "timestamp": 1531736763000, "title": "", "type": "comment", "url": "", "text": "If you want call&#x2F;cc (for repeated executions of the continuation) you need a first class stack. A CPS execution model can use green threads right up until you want that explicit continuation in hand and split the stack. In most implementations of CPS the continuation is not in fact available for the user to execute: stack-oriented programming is the mental model, until you pull out call&#x2F;cc or something similar.<p>Note that you don&#x27;t get the continuation in hand for the async-everywhere advocated by GP, only blocking operations get the continuation, and most of those are implemented by the runtime.", "parent": 17536881.0, "deleted": null, "dead": null, "descendants": null, "id": 17540125, "ranking": null, "date": 1531736763000, "year": 2018}, {"by": "rubidium", "score": null, "time": 1532720861, "timestamp": 1532720861000, "title": "", "type": "comment", "url": "", "text": "Yes. As noted in the article, the now-extensive reach and power of CPS-type investigations is the most damaging typical harrassment. Other parents concerns are annoying but a bit silly. Cops don&#x27;t have much legal ground in the minor things, as noted. But CPS can pretty do whatever it wants.", "parent": 17628400.0, "deleted": null, "dead": null, "descendants": null, "id": 17628737, "ranking": null, "date": 1532720861000, "year": 2018}, {"by": "convivialdingo", "score": null, "time": 1532733157, "timestamp": 1532733157000, "title": "", "type": "comment", "url": "", "text": "I used to think the same thing, but having raised kids I have told my own two adult children to raise their kids abroad.<p>The Stasi-like laws are real. Anonymous tips, school and medical required reporting laws, assumed guilt and state harassment are the status quo.<p>I\u2019ve known too many families that get caught up by CPS.  In poor communities the harassment is disturbing. Parenting while poor is apparently against the law.<p>Few parents know their limited rights - so they usually talk with CPS before consulting an attorney and get caught up in the system for years when they likely did nothing wrong.<p>Every CPS encounter is for the primary purpose of gathering evidence against the accused.  Those conversations are twisted into the most negative light possible, editorialized and presented as evidence in court.  I\u2019ve read the cases.<p>There are 2.3M CPS cases a year(2014), and there are 3-4M children born each year.  These statistics alone show a marked trend of state harassment against families.<p>I appreciate and understand that CPS has a role in protecting children. I just think the system is broken, wrong and often unjust. CPS is likely causing more harm than good for most children, even if they help a small minority.", "parent": 17628521.0, "deleted": null, "dead": null, "descendants": null, "id": 17630240, "ranking": null, "date": 1532733157000, "year": 2018}, {"by": "jessaustin", "score": null, "time": 1532753123, "timestamp": 1532753123000, "title": "", "type": "comment", "url": "", "text": "I don&#x27;t think I understand your reasoning. The busybodies aren&#x27;t calling the HOA; they&#x27;re calling the police. If we punish those who are mostly guilty of having assholes for neighbors enough, is that going to make life better for an 11yo with gonorrhea? Wouldn&#x27;t it be better for CPS to have more time to help children with actual problems?", "parent": 17628919.0, "deleted": null, "dead": null, "descendants": null, "id": 17631591, "ranking": null, "date": 1532753123000, "year": 2018}, {"by": "mehrdadn", "score": null, "time": 1533082057, "timestamp": 1533082057000, "title": "", "type": "comment", "url": "", "text": "Ohh.. so it&#x27;s saying Visa CPS Retail vs. Visa Rewards Traditional vs. Visa Rewards Signature vs. etc. are different. Interesting, thanks, I didn&#x27;t know that. But if I&#x27;m buying two of the <i>same</i> product (obviously -- I&#x27;m not talking about two gas vs. groceries here) with two different cards, both of which are from the same network and the same &quot;kind&quot; (by which I mean the categorizations listed above, like two that are both &quot;Visa Rewards Signature&quot;), then the merchant will pay the same fee, right? i.e. it&#x27;s not like the mere fact that one pays 1% cash back and one pays 2% cash back could possibly result in a different charge to the merchant by itself if they&#x27;re both (say) lumped together as Rewards Traditional?", "parent": 17658445.0, "deleted": null, "dead": null, "descendants": null, "id": 17658479, "ranking": null, "date": 1533082057000, "year": 2018}, {"by": "gizmo686", "score": null, "time": 1533174225, "timestamp": 1533174225000, "title": "", "type": "comment", "url": "", "text": "I am not going to enter a discussion on the merits of the underlying argument because you have already acknowledged that you have no interest in doing so.<p>Returning to the meta discussion. Let us trace the course of the conversation in question:<p>neuland: <i>...focus on building a better foster &#x2F; adoption system and encouraging people to use it</i><p>house9-2: <i>wouldn&#x27;t it be better to support the families as they are? help improve peoples lives instead of ripping families apart</i><p>textor: <i>For what it&#x27;s worth, children from at-risk families achieve better education when the father ends up incarcerated. So we can absolutely make a case for &quot;ripping families apart&quot; and against supporting &quot;families as they are&quot;.</i><p>The only proposal being made here is a voluntary foster&#x2F;adoption system with encouragement. This is then framed as &quot;ripping families apart&quot;. While this framing is arguably unfair, it is within the bounds of reason so, giving it the most charitable interpretation possible, textor responds to &quot;ripping families apart&quot; in the context in which it was introduced and provided evidence that keeping blood families together is not inherently the best course of action. To be clear, at this point the conversation is about how much we should be supporting voluntary adoption; and textor is arguing that the idea is not as inherantly bad as house9-2 seems to be assuming.<p>Stepping up a level of meta:<p>&gt;I refuse to have an evidence-based discussion about whether certain people deserve human rights.<p>This is what political correctness looks like. Literally. You are interested in what is politically correct, evidence be dammed. Further, no one in this discussion has argued for denying people human rights. Even further, every society on the planet accepts that we can violate &quot;human rights&quot; in some sense for the greater good. Eg. prisons deny people their human right of freedom; taxes partially deny the right of personal property.<p>At risk of entering into the merits of the original discussion, leaving children in poor home environment arguably denies them their human rights, including their right to: education security of person, and food.<p>How do we balance these conflicting goals? With evidence to inform us what our options are and what effects they will have with regards to our goals.<p>Going meta again:<p>&gt; one that that is a blatant misuse of a study ...<p>It is not a blatant misuse; it is extrapolating beyond the facts of the original study. The first step of evidence based inquiry is to work with the evidence you have. This informs the questions you can ask, so you can look for the evidence you want to have [0]. Once you&#x27;ve done that, you can move onto making the evidence you want to have [1]. Each step of this process provides a foundation to build the next step.<p>And yes, the process is not as simple as I lay out. You need theory crafting. And once your theory starts to develop holes, it may be time to revisit an earlier step until you have enough of a foundation to make the later steps worthwhile (either because your foundation is strong, is the lower tiers are short of relevant evidence)<p>&gt; ... toward ideological ends,<p>Please take a moment to rethink who is arguing towards ideological ends. In my experience, it is generally the person arguing against the concept of evidence; not the one trying to ground themselves in evidence.<p>&gt;That shifts the Overton window to present such ideas as acceptable<p>And what about the overton window you are moving towards. Where it is accatable to blatantly argue that evidence should be ignored. Where the very concept of introducing evidence is morally abhorant. Is that the window you want us to live in?<p>&gt;when in a civilized society they should not be.<p>Are you arguing that the very concept of seperating children from their parents has no place in civilized society? Child Protective Services might disagree with you. They do place strong emphasis on keeping families together where possible; but they acknowledge that sometimes conditions are so bad that it is unacceptable to leave a child in that situation. Where is the line that determines what warrents CPS to remove children from their families? Again, evidence is the best approach to find it, unless you want to remove children unnecessarily while leaving others in bad situations that they would be far better off out of.<p>Going meta again:<p>The discussion is not simply two extremes. Even if we agreed that one (or both) extremes was morally untenable, by seriously exploring the benifits of it, we can look for ways to obtain those same benifits by other means: such as turning school into a &#x27;second home&#x27;, as this the content of the original article, or voluntary foster care with active involvment of the birth parents in a non-primary-guardian capacity.<p>[0] And by want to have, I mean the evidence that answers the questions you want to ask; not the evidence that supports the conclusion you want to reach<p>[1] Again, in the sense of the evidence that answers the questions you want answered.", "parent": 17668311.0, "deleted": null, "dead": null, "descendants": null, "id": 17668661, "ranking": null, "date": 1533174225000, "year": 2018}, {"by": "Spooky23", "score": null, "time": 1533311042, "timestamp": 1533311042000, "title": "", "type": "comment", "url": "", "text": "It&#x27;s all inter-related from a funding POV. All service delivery for social services is via county government in the US.<p>Even something like CPS is significantly funded via other programs. They perform functions like managing foster care, early intervention, medicaid enrollment, etc and draw administrative funding that is shared among programs.<p>It doesn&#x27;t mean the UBI is bad, just that you cannot bank all of the &quot;legacy&quot; spending.", "parent": 17666339.0, "deleted": null, "dead": null, "descendants": null, "id": 17680774, "ranking": null, "date": 1533311042000, "year": 2018}, {"by": "BillPollak", "score": 1.0, "time": 1533568570, "timestamp": 1533568570000, "title": "Minimum Viable Capability (MVC): Scaling MVP for Cyber-Physical Systems", "type": "story", "url": "https://insights.sei.cmu.edu/sei_blog/2018/08/introducing-the-minimum-viable-capability-strategy.html", "text": "", "parent": null, "deleted": null, "dead": null, "descendants": 0.0, "id": 17698319, "ranking": null, "date": 1533568570000, "year": 2018}, {"by": "tialaramex", "score": null, "time": 1533743543, "timestamp": 1533743543000, "title": "", "type": "comment", "url": "", "text": "As the article you&#x27;ve linked points out, the fact you _can_ theoretically do this in England doesn&#x27;t mean it will actually work.<p>There are private prosecutions in England, but they almost all happen under the tacit approval of the state, e.g. rather than spend government money prosecuting people who mistreat their pets the government doesn&#x27;t stop the RSCPA (a charity) from prosecuting them privately with donated money.<p>If instead a rich person has just decided to try to prosecute someone they don&#x27;t like, it is almost certain that the state will intervene, and indeed it is legally required to do so once it&#x27;s told this is going on, by a judge, a newspaper article, a law clerk who realises what&#x27;s happening, almost anybody.<p>What will happen is that a very bored junior barrister from the Crown Prosecution Service will show up (this could happen as early as pre-trial discussions), they will inform the court that the CPS would like this case assigned to them, they&#x27;re privileged to do this without giving any reason. Then, having been granted control of your prosecution, the barrister will inform the judge that they&#x27;re not offering any evidence, the judge will accordingly declare the defendant isn&#x27;t guilty as no evidence has been presented against them. You have now spent a lot of money and achieved nothing except to annoy a judge and the prosecutor, which seems like a bad idea.<p>If you&#x27;ve got a dubious case, maybe the defendant was caught red-handed stealing something from your store and you&#x27;re trying to prosecute them to ruin their reputation after police decided a formal warning was sufficient - the CPS can demand all your paperwork, take over the case and then having read your evidence decide to take that evidence to court or offer no evidence on the same basis they&#x27;d have used if the police sent them the case (a &quot;full code test&quot;).", "parent": 17716556.0, "deleted": null, "dead": null, "descendants": null, "id": 17716923, "ranking": null, "date": 1533743543000, "year": 2018}, {"by": "mschuster91", "score": null, "time": 1534245112, "timestamp": 1534245112000, "title": "", "type": "comment", "url": "", "text": "&gt; This is a fucked up job that gives way too much power to people who really don&#x27;t care about others and often are unsuited to work with others.<p>The problem is that CPS (or equivalent) jobs aren&#x27;t nearly paid well enough, with an ever rising load of cases (for example due to morons calling CPS on their neighbors for letting their kids play in the garden). This results in underpaid, probably underqualified, and massively overworked employees. Which in turn often leads to employees preemptively taking kids out of families because they&#x27;re afraid they might be on the hook if they leave the kids, but don&#x27;t have the time to properly assess the situation.", "parent": 17754975.0, "deleted": null, "dead": null, "descendants": null, "id": 17756852, "ranking": null, "date": 1534245112000, "year": 2018}, {"by": "pbhjpbhj", "score": null, "time": 1535121554, "timestamp": 1535121554000, "title": "", "type": "comment", "url": "", "text": "This subthread is UK specific, so the number in jail for non-payment of bail is zero.<p>Probable cause isn&#x27;t a UK test -- we use [reasonable] suspicion -- but one needs far more evidence than that to retain someone in prison. CPS don&#x27;t take cases to trial without an expectation of success; non serious crimes (and some serious ones) don&#x27;t result in prison so aren&#x27;t pertinent.<p>Suspicion is an even lower bar, but the charge officer won&#x27;t even admit someone into custody without evidence (though that evidence has a far lower bar than is required for conviction).<p>So you get out 24 hrs later, the police caught the perp who just happened to match your description and locality. Surely the downside is just part of society functioning, do you really need compensating? Legal protection for your job, seems like it should be in place though.", "parent": 17834913.0, "deleted": null, "dead": null, "descendants": null, "id": 17835171, "ranking": null, "date": 1535121554000, "year": 2018}, {"by": "candiodari", "score": null, "time": 1535934935, "timestamp": 1535934935000, "title": "", "type": "comment", "url": "", "text": "&gt; This is obviously going to attract the wrong sort of people, and the right sort of people will be influenced by them and frustrated in their own right.<p>This is a very important thing to internalize: whatever your arrangement. Any position that&#x27;s given power over others, or over children, or over mental patients will attract exactly the sort of people that are the worst possible case to have such power.<p>Power over others ? Bullies, torturers, rapists.<p>Power over children ? Paedophiles.<p>Power over mental patients ? Bullies, torturers, rapists.<p>So any child care system, mental health system and prison system needs to be designed so that even with a group of paedophiles taking all the decisions (which WILL be the case, as demonstrated above) the system does not lead to abuse.<p>Is it the same in the US ? You bet [1]. What do US child abuse&#x2F;child protection services do when caught molesting children ? They cover it up and protect the guilty. From that wikipedia page:<p>&quot;Several lawsuits were brought in 2008 against the Florida Department of Children &amp; Families (DCF), accusing it of mishandling reports that Thomas Ferrara, 79, a foster parent, was molesting young girls.[36][37] The suits claimed that even though there were records of sexual misconduct allegations against Ferrara in 1992, 1996, and 1999, the DCF continued to place foster children with Ferrara and his then-wife until 2000.[36]&quot;<p>&quot;In July 2002, the federal court granted plaintiffs\u2019 experts access to 500 children\u2019s case files, allowing plaintiffs to collect information concerning harm to children in foster care through a case record review.[42] These files revealed numerous cases in which foster children were abused, and DYFS failed to take proper action. On June 9, 2004, the child welfare panel appointed by the parties approved the NJ State\u2019s Reform Plan.&quot;<p>(note: no action was taken to punish the guilty. There was simply a request for a &quot;reform plan&quot;, no mention is made for any checks to a reform plan)<p>&quot;The foster parent, John Jackson, was licensed by the state, despite the fact that he abused his own wife and son, overdosed on drugs and was arrested for drunken driving. In 2006, Jackson was convicted in Santa Clara County of nine counts of lewd or lascivious acts on a child by force, violence, duress, menace and fear, and seven counts of lewd or lascivious acts on a child under 14, according to the Santa Clara County District Attorney&#x27;s Office.[32] The sex acts that he forced the children in his foster care to perform sent him to prison for 220 years. Later in 2010, Giarretto Institute, the private foster family agency responsible for licensing and monitoring Jackson&#x27;s foster home and others, was also found to be negligent and liable for 75 percent of the abuse that was inflicted on the victim, and Jackson himself was liable for the rest.[32]&quot;<p>&quot;In 2009, Oregon Department of Human Services agreed to pay $2 million into a fund for the future care of twins who were allegedly abused by their foster parents; this was the largest such settlement in the agency&#x27;s history.[34] According to the civil rights suit filed on request of the twins&#x27; adoptive mother in December 2007 in U.S. Federal Court, the children were kept in makeshift cages\u2014cribs covered with chicken wire secured by duct tape\u2014in a darkened bedroom known as &quot;the dungeon.&quot; The brother and sister often went without food, water or human touch. The boy, who had a shunt put into his head at birth to drain fluid, did not receive medical attention, so when police rescued the twins he was nearly comatose. The same foster family previously took into their care hundreds of other children over nearly four decades.[35] DHS said the foster parents deceived child welfare workers during the checkup visits.[34]&quot;<p>Apparently checkup visits in Oregon miss the fact that children are kept in cages.<p>Needless to say, all of the above cases make it very, VERY clear that only the minutest tip of the iceberg was actually caught. Serial paedophile works for Florida CPS, gets 400 children ... and abuses a single one ? Riiight. Let&#x27;s realistically assume he violated half of them. That would mean about 0.5% of child abuse in child protective services in the US is actually caught.<p>In all cases, child rapists working for CPS in at least 4 states were each given hundreds of children, dozens per year. At least 78% of those, according to [2], were never sexually abused by their parents, and a further 11% were only abused in the sense that there was inadequate supervision, or their parents got drunk). Given that the above cases alone would reasonably be ~800 children that were abused, we can assume that 89% of those, or 716 were abused <i>because child protective services protected them</i>. That&#x27;s for a period of about 8 years, and only the very tip of the iceberg, cases famous enough to be very widely reported. How many cases are like that ? 1% ? 10% ?<p>10% would mean that of all children child protective services takes in (~500000) about 15% get sexually abused, versus 0.08% of children in the general US society (0.009 * 0.09, according to the wikipedia page), or CLOSE TO 18518% MORE THAN WOULD BE ABUSED WITHOUT CHILD PROTECTIVE SERVICES<p>1% would mean that of all children child protective services takes in, about 1.5% get sexually abused, or about 20x more than if child protective services did not exist.<p>You know, the amount of children that child protective services gave to these convicted paedophiles in these very public cases (in half the cases WHEN THEY KNEW THOSE WERE CONVICTED PAEDOPHILES) is about equal to the total number of children sexually abused in the United States. So if the above cases are all there is, that would mean that at least half of the children sexually abused in the US get abused because Child protective services exists.<p>Which of course, creates a bigger need for more child protection. Where else could a paedophile go where the damage they do gets them more children ?<p>That&#x27;s the result of creating an organization that&#x27;s such a ridiculously tempting target for paedophiles.<p>And given that you&#x27;re right, Europe does a lot more interfering, which would mean that in Europe the situation should be worse, not better.<p>Thanks for pointing me to the US. Much more numbers available. Sad, very, very, very sad numbers.<p>[1] <a href=\"https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Foster_care_in_the_United_States#Abuse_and_negligence\" rel=\"nofollow\">https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Foster_care_in_the_United_Stat...</a><p>[2] <a href=\"https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Child_abuse#United_States\" rel=\"nofollow\">https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Child_abuse#United_States</a>", "parent": 17868116.0, "deleted": null, "dead": null, "descendants": null, "id": 17899463, "ranking": null, "date": 1535934935000, "year": 2018}, {"by": "DannyBee", "score": null, "time": 1536177954, "timestamp": 1536177954000, "title": "", "type": "comment", "url": "", "text": "This article (and a number around it) miss the underlying point of SSA entirely.<p>SSA exists (or at least, was done) because of bitvector dataflow time bounds.  All the other interesting reasoning about blah blah blah is mostly just people making up reasons they think people did stuff.  It also promotes an NIH view of the world that didn&#x27;t exist.<p>(CPS wasn&#x27;t even introduced until 1976, and i&#x27;m not aware of anybody proving any of the nice properties of SSA about it until after SSA existed. If someone has a reference otherwise, i&#x27;d love to see it)<p>I can state this with such flat assertion because Zadeck was my officemate at IBM for a few years, so he told me why it did it. He hated staring at bitvectors because he is dyslexic. Motivation is funny sometimes.<p>For a large class of problems, bitvector dataflow can be done in O(N) bitvector operations. However, each operation&#x2F;iteration requires N time to perform the bitvector union&#x2F;intersection&#x2F;whatever.\nHence the total time bound was N^2 overall.<p>It was proven in the early to mid seventies this was the best you can do by Tarjan, when he wasn&#x27;t busy efficiently solving every <i>other</i> graph problem known to CS at the time:\n<a href=\"http:&#x2F;&#x2F;i.stanford.edu&#x2F;pub&#x2F;cstr&#x2F;reports&#x2F;cs&#x2F;tr&#x2F;76&#x2F;547&#x2F;CS-TR-76-547.pdf\" rel=\"nofollow\">http:&#x2F;&#x2F;i.stanford.edu&#x2F;pub&#x2F;cstr&#x2F;reports&#x2F;cs&#x2F;tr&#x2F;76&#x2F;547&#x2F;CS-TR-76...</a><p>That was thought to be the end of it.\nThere were elimination dataflow approaches still left open, but these are complicated.\n(Wegman was, among other things, an expert in elimination based dataflow methods)<p>There were approaches to incremental dataflow, and complex ways to try to work around this for specific problems.<p>Zadeck&#x27;s thesis was on ways to start to approach breaking these barriers with techniques different than used before.\nYou can see most of SSA in it:\n<a href=\"https:&#x2F;&#x2F;scholarship.rice.edu&#x2F;handle&#x2F;1911&#x2F;15877\" rel=\"nofollow\">https:&#x2F;&#x2F;scholarship.rice.edu&#x2F;handle&#x2F;1911&#x2F;15877</a><p>In fact, when he initially suggested it, he was told it was &quot;impossible and i can prove it&quot;, but he explained, correctly, that Tarjan&#x2F;et al proved a very specific thing, and he was using a way not encumbered by those proofs.<p>(The later parts of this story reduce to &quot;two groups of IBM researchers discovered the problems they were trying to solve were the same even though they appear different&quot;. I&#x27;ll skip this)<p>In practice, SSA was the first real approach that made it easy and trivial to break bitvector bound for large classes of dataflow problems (constant propagation, etc).<p><i>That</i> is why it is used in compilers.<p>As mentioned, despite this article (and a few others) claiming CPS did it first, i&#x27;m not aware of anyone in CPS land claiming or proving anything related to this until well after SSA became popular.", "parent": 17912929.0, "deleted": null, "dead": null, "descendants": null, "id": 17921440, "ranking": null, "date": 1536177954000, "year": 2018}, {"by": "ddtaylor", "score": null, "time": 1537068098, "timestamp": 1537068098000, "title": "", "type": "comment", "url": "", "text": "&gt; Section 1.4.2 of the CPS expressly forbids the use off Google certificates for \u201cman-in-the middle purposes\u201d<p>Uh huh.", "parent": 17996949.0, "deleted": null, "dead": null, "descendants": null, "id": 17997156, "ranking": null, "date": 1537068098000, "year": 2018}, {"by": "senderista", "score": null, "time": 1538763793, "timestamp": 1538763793000, "title": "", "type": "comment", "url": "", "text": "Trust me, it will :) The last few chapters on CPS and the Y combinator are roughly a vertical segment on an otherwise nearly horizontal learning curve.", "parent": 18111709.0, "deleted": null, "dead": null, "descendants": null, "id": 18150461, "ranking": null, "date": 1538763793000, "year": 2018}]